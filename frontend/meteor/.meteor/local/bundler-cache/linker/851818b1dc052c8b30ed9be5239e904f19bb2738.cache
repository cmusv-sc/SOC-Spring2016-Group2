[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar OAuth = Package.oauth.OAuth;\nvar Oauth = Package.oauth.Oauth;\nvar _ = Package.underscore._;\nvar ServiceConfiguration = Package['service-configuration'].ServiceConfiguration;\nvar Random = Package.random.Random;\nvar Template = Package.templating.Template;\nvar Blaze = Package.blaze.Blaze;\nvar UI = Package.blaze.UI;\nvar Handlebars = Package.blaze.Handlebars;\nvar Spacebars = Package.spacebars.Spacebars;\nvar HTML = Package.htmljs.HTML;\n\n/* Package-scope variables */\nvar Google;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/google/template.google_configure.js                                              //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\n                                                                                             // 1\nTemplate.__checkName(\"configureLoginServiceDialogForGoogle\");                                // 2\nTemplate[\"configureLoginServiceDialogForGoogle\"] = new Template(\"Template.configureLoginServiceDialogForGoogle\", (function() {\n  var view = this;                                                                           // 4\n  return [ HTML.Raw(\"<p>\\n    First, you'll need to get a Google Client ID. Follow these steps:\\n  </p>\\n  \"), HTML.OL(\"\\n    \", HTML.Raw('<li>\\n      Visit <a href=\"https://console.developers.google.com/\" target=\"blank\">https://console.developers.google.com/</a>\\n    </li>'), \"\\n    \", HTML.Raw('<li>\\n      \"Create Project\", if needed. Wait for Google to finish provisioning.\\n    </li>'), \"\\n    \", HTML.Raw('<li>\\n      On the left sidebar, go to \"APIs &amp; auth\" and, underneath, \"Consent Screen\". Make sure to enter an email address and a product name, and save.\\n    </li>'), \"\\n    \", HTML.Raw('<li>\\n      On the left sidebar, go to \"APIs &amp; auth\" and then, \"Credentials\". \"Create New Client ID\", then select \"Web application\" as the type.\\n    </li>'), \"\\n    \", HTML.LI(\"\\n     Set Authorized Javascript Origins to: \", HTML.SPAN({\n    \"class\": \"url\"                                                                           // 6\n  }, Blaze.View(\"lookup:siteUrl\", function() {                                               // 7\n    return Spacebars.mustache(view.lookup(\"siteUrl\"));                                       // 8\n  })), \"\\n    \"), \"\\n    \", HTML.LI(\"\\n      Set Authorized Redirect URI to: \", HTML.SPAN({  // 9\n    \"class\": \"url\"                                                                           // 10\n  }, Blaze.View(\"lookup:siteUrl\", function() {                                               // 11\n    return Spacebars.mustache(view.lookup(\"siteUrl\"));                                       // 12\n  }), \"_oauth/google\"), \"\\n    \"), \"\\n    \", HTML.Raw('<li>\\n      Finish by clicking \"Create Client ID\".\\n    </li>'), \"\\n  \") ];\n}));                                                                                         // 14\n                                                                                             // 15\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/google/google_configure.js                                                       //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nTemplate.configureLoginServiceDialogForGoogle.helpers({                                      // 1\n  siteUrl: function () {                                                                     // 2\n    return Meteor.absoluteUrl();                                                             // 3\n  }                                                                                          // 4\n});                                                                                          // 5\n                                                                                             // 6\nTemplate.configureLoginServiceDialogForGoogle.fields = function () {                         // 7\n  return [                                                                                   // 8\n    {property: 'clientId', label: 'Client ID'},                                              // 9\n    {property: 'secret', label: 'Client secret'}                                             // 10\n  ];                                                                                         // 11\n};                                                                                           // 12\n                                                                                             // 13\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/google/google_client.js                                                          //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nGoogle = {};                                                                                 // 1\n                                                                                             // 2\n// Request Google credentials for the user                                                   // 3\n// @param options {optional}                                                                 // 4\n// @param credentialRequestCompleteCallback {Function} Callback function to call on          // 5\n//   completion. Takes one argument, credentialToken on success, or Error on                 // 6\n//   error.                                                                                  // 7\nGoogle.requestCredential = function (options, credentialRequestCompleteCallback) {           // 8\n  // support both (options, callback) and (callback).                                        // 9\n  if (!credentialRequestCompleteCallback && typeof options === 'function') {                 // 10\n    credentialRequestCompleteCallback = options;                                             // 11\n    options = {};                                                                            // 12\n  } else if (!options) {                                                                     // 13\n    options = {};                                                                            // 14\n  }                                                                                          // 15\n                                                                                             // 16\n  var config = ServiceConfiguration.configurations.findOne({service: 'google'});             // 17\n  if (!config) {                                                                             // 18\n    credentialRequestCompleteCallback && credentialRequestCompleteCallback(                  // 19\n      new ServiceConfiguration.ConfigError());                                               // 20\n    return;                                                                                  // 21\n  }                                                                                          // 22\n                                                                                             // 23\n  var credentialToken = Random.secret();                                                     // 24\n                                                                                             // 25\n  // always need this to get user id from google.                                            // 26\n  var requiredScope = ['profile'];                                                           // 27\n  var scope = ['email'];                                                                     // 28\n  if (options.requestPermissions)                                                            // 29\n    scope = options.requestPermissions;                                                      // 30\n  scope = _.union(scope, requiredScope);                                                     // 31\n                                                                                             // 32\n  var loginUrlParameters = {};                                                               // 33\n  if (config.loginUrlParameters){                                                            // 34\n    _.extend(loginUrlParameters, config.loginUrlParameters)                                  // 35\n  }                                                                                          // 36\n  if (options.loginUrlParameters){                                                           // 37\n    _.extend(loginUrlParameters, options.loginUrlParameters)                                 // 38\n  }                                                                                          // 39\n  var ILLEGAL_PARAMETERS = ['response_type', 'client_id', 'scope', 'redirect_uri', 'state'];\n    // validate options keys                                                                 // 41\n  _.each(_.keys(loginUrlParameters), function (key) {                                        // 42\n    if (_.contains(ILLEGAL_PARAMETERS, key))                                                 // 43\n      throw new Error(\"Google.requestCredential: Invalid loginUrlParameter: \" + key);        // 44\n  });                                                                                        // 45\n                                                                                             // 46\n  // backwards compatible options                                                            // 47\n  if (options.requestOfflineToken != null){                                                  // 48\n    loginUrlParameters.access_type = options.requestOfflineToken ? 'offline' : 'online'      // 49\n  }                                                                                          // 50\n  if (options.prompt != null) {                                                              // 51\n    loginUrlParameters.prompt = options.prompt;                                              // 52\n  } else if (options.forceApprovalPrompt) {                                                  // 53\n    loginUrlParameters.prompt = 'consent'                                                    // 54\n  }                                                                                          // 55\n                                                                                             // 56\n  if (options.loginHint) {                                                                   // 57\n    loginUrlParameters.login_hint = options.loginHint;                                       // 58\n  }                                                                                          // 59\n                                                                                             // 60\n  var loginStyle = OAuth._loginStyle('google', config, options);                             // 61\n  // https://developers.google.com/accounts/docs/OAuth2WebServer#formingtheurl               // 62\n  _.extend(loginUrlParameters, {                                                             // 63\n    \"response_type\": \"code\",                                                                 // 64\n    \"client_id\":  config.clientId,                                                           // 65\n    \"scope\": scope.join(' '), // space delimited                                             // 66\n    \"redirect_uri\": OAuth._redirectUri('google', config),                                    // 67\n    \"state\": OAuth._stateParam(loginStyle, credentialToken, options.redirectUrl)             // 68\n  });                                                                                        // 69\n  var loginUrl = 'https://accounts.google.com/o/oauth2/auth?' +                              // 70\n    _.map(loginUrlParameters, function(value, param){                                        // 71\n      return encodeURIComponent(param) + '=' + encodeURIComponent(value);                    // 72\n    }).join(\"&\");                                                                            // 73\n                                                                                             // 74\n  OAuth.launchLogin({                                                                        // 75\n    loginService: \"google\",                                                                  // 76\n    loginStyle: loginStyle,                                                                  // 77\n    loginUrl: loginUrl,                                                                      // 78\n    credentialRequestCompleteCallback: credentialRequestCompleteCallback,                    // 79\n    credentialToken: credentialToken,                                                        // 80\n    popupOptions: { height: 600 }                                                            // 81\n  });                                                                                        // 82\n};                                                                                           // 83\n                                                                                             // 84\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package.google = {}, {\n  Google: Google\n});\n\n})();\n","servePath":"/packages/google.js"}]