[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar Random = Package.random.Random;\nvar Accounts = Package['accounts-base'].Accounts;\nvar Google = Package.google.Google;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                     //\n// packages/accounts-google/google.js                                                                  //\n//                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                       //\nAccounts.oauth.registerService('google');                                                              // 1\n                                                                                                       // 2\nif (Meteor.isClient) {                                                                                 // 3\n  Meteor.loginWithGoogle = function(options, callback) {                                               // 4\n    // support a callback without options                                                              // 5\n    if (! callback && typeof options === \"function\") {                                                 // 6\n      callback = options;                                                                              // 7\n      options = null;                                                                                  // 8\n    }                                                                                                  // 9\n                                                                                                       // 10\n    // Use Google's domain-specific login page if we want to restrict creation to                      // 11\n    // a particular email domain. (Don't use it if restrictCreationByEmailDomain                       // 12\n    // is a function.) Note that all this does is change Google's UI ---                               // 13\n    // accounts-base/accounts_server.js still checks server-side that the server                       // 14\n    // has the proper email address after the OAuth conversation.                                      // 15\n    if (typeof Accounts._options.restrictCreationByEmailDomain === 'string') {                         // 16\n      options = _.extend({}, options || {});                                                           // 17\n      options.loginUrlParameters = _.extend({}, options.loginUrlParameters || {});                     // 18\n      options.loginUrlParameters.hd = Accounts._options.restrictCreationByEmailDomain;                 // 19\n    }                                                                                                  // 20\n    var credentialRequestCompleteCallback = Accounts.oauth.credentialRequestCompleteHandler(callback);\n    Google.requestCredential(options, credentialRequestCompleteCallback);                              // 22\n  };                                                                                                   // 23\n} else {                                                                                               // 24\n  Accounts.addAutopublishFields({                                                                      // 25\n    forLoggedInUser: _.map(                                                                            // 26\n      // publish access token since it can be used from the client (if                                 // 27\n      // transmitted over ssl or on                                                                    // 28\n      // localhost). https://developers.google.com/accounts/docs/OAuth2UserAgent                       // 29\n      // refresh token probably shouldn't be sent down.                                                // 30\n      Google.whitelistedFields.concat(['accessToken', 'expiresAt']), // don't publish refresh token    // 31\n      function (subfield) { return 'services.google.' + subfield; }),                                  // 32\n                                                                                                       // 33\n    forOtherUsers: _.map(                                                                              // 34\n      // even with autopublish, no legitimate web app should be                                        // 35\n      // publishing all users' emails                                                                  // 36\n      _.without(Google.whitelistedFields, 'email', 'verified_email'),                                  // 37\n      function (subfield) { return 'services.google.' + subfield; })                                   // 38\n  });                                                                                                  // 39\n}                                                                                                      // 40\n                                                                                                       // 41\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['accounts-google'] = {};\n\n})();\n","servePath":"/packages/accounts-google.js"}]