[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Collection2 = Package['aldeed:collection2-core'].Collection2;\nvar _ = Package.underscore._;\nvar LocalCollection = Package.minimongo.LocalCollection;\nvar Minimongo = Package.minimongo.Minimongo;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar SimpleSchema = Package['aldeed:simple-schema'].SimpleSchema;\nvar MongoObject = Package['aldeed:simple-schema'].MongoObject;\nvar Mongo = Package.mongo.Mongo;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////\n//                                                                                   //\n// packages/aldeed_schema-index/lib/indexing.js                                      //\n//                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////\n                                                                                     //\n// Extend the schema options allowed by SimpleSchema                                 // 1\nSimpleSchema.extendOptions({                                                         // 2\n  index: Match.Optional(Match.OneOf(Number, String, Boolean)),                       // 3\n  unique: Match.Optional(Boolean),                                                   // 4\n  sparse: Match.Optional(Boolean),                                                   // 5\n});                                                                                  // 6\n                                                                                     // 7\n// Define validation error messages                                                  // 8\nSimpleSchema.messages({                                                              // 9\n  notUnique: \"[label] must be unique\",                                               // 10\n});                                                                                  // 11\n                                                                                     // 12\nif (Meteor.isServer) {                                                               // 13\n  Collection2.on('schema.attached', function (collection, ss) {                      // 14\n    function ensureIndex(index, indexName, unique, sparse) {                         // 15\n      Meteor.startup(function () {                                                   // 16\n        collection._collection._ensureIndex(index, {                                 // 17\n          background: true,                                                          // 18\n          name: indexName,                                                           // 19\n          unique: unique,                                                            // 20\n          sparse: sparse                                                             // 21\n        });                                                                          // 22\n      });                                                                            // 23\n    }                                                                                // 24\n                                                                                     // 25\n    function dropIndex(indexName) {                                                  // 26\n      Meteor.startup(function () {                                                   // 27\n        try {                                                                        // 28\n          collection._collection._dropIndex(indexName);                              // 29\n        } catch (err) {                                                              // 30\n          // no index with that name, which is what we want                          // 31\n        }                                                                            // 32\n      });                                                                            // 33\n    }                                                                                // 34\n                                                                                     // 35\n    // Loop over fields definitions and ensure collection indexes (server side only)\n    _.each(ss.schema(), function(definition, fieldName) {                            // 37\n      if ('index' in definition || definition.unique === true) {                     // 38\n        var index = {}, indexValue;                                                  // 39\n        // If they specified `unique: true` but not `index`,                         // 40\n        // we assume `index: 1` to set up the unique index in mongo                  // 41\n        if ('index' in definition) {                                                 // 42\n          indexValue = definition.index;                                             // 43\n          if (indexValue === true) indexValue = 1;                                   // 44\n        } else {                                                                     // 45\n          indexValue = 1;                                                            // 46\n        }                                                                            // 47\n        var indexName = 'c2_' + fieldName;                                           // 48\n        // In the index object, we want object array keys without the \".$\" piece     // 49\n        var idxFieldName = fieldName.replace(/\\.\\$\\./g, \".\");                        // 50\n        index[idxFieldName] = indexValue;                                            // 51\n        var unique = !!definition.unique && (indexValue === 1 || indexValue === -1);\n        var sparse = definition.sparse || false;                                     // 53\n                                                                                     // 54\n        // If unique and optional, force sparse to prevent errors                    // 55\n        if (!sparse && unique && definition.optional) sparse = true;                 // 56\n                                                                                     // 57\n        if (indexValue === false) {                                                  // 58\n          dropIndex(indexName);                                                      // 59\n        } else {                                                                     // 60\n          ensureIndex(index, indexName, unique, sparse);                             // 61\n        }                                                                            // 62\n      }                                                                              // 63\n    });                                                                              // 64\n  });                                                                                // 65\n}                                                                                    // 66\n///////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['aldeed:schema-index'] = {};\n\n})();\n","servePath":"/packages/aldeed_schema-index.js"}]