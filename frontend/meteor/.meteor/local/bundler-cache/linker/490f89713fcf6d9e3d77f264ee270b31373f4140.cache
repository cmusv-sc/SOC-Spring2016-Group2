[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Template = Package.templating.Template;\nvar $ = Package.jquery.$;\nvar jQuery = Package.jquery.jQuery;\nvar _ = Package.underscore._;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar ReactiveVar = Package['reactive-var'].ReactiveVar;\nvar i18n = Package['anti:i18n'].i18n;\nvar Mongo = Package.mongo.Mongo;\nvar Blaze = Package.blaze.Blaze;\nvar UI = Package.blaze.UI;\nvar Handlebars = Package.blaze.Handlebars;\nvar Spacebars = Package.spacebars.Spacebars;\nvar HTML = Package.htmljs.HTML;\n\n/* Package-scope variables */\nvar get, oldField, sortedRows, normalizeSort, getSortedFields, getSortQuery, sortWithFunctions, getPrimarySortField, changePrimarySort, getFilterQuery, ReactiveTable, dependOnFilters, getFilterStrings, getFilterFields;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/aslagle_reactive-table/lib/template.reactive_table.js                                                    //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n                                                                                                                     // 1\nTemplate.__checkName(\"reactiveTable\");                                                                               // 2\nTemplate[\"reactiveTable\"] = new Template(\"Template.reactiveTable\", (function() {                                     // 3\n  var view = this;                                                                                                   // 4\n  return Spacebars.With(function() {                                                                                 // 5\n    return Spacebars.call(view.lookup(\"context\"));                                                                   // 6\n  }, function() {                                                                                                    // 7\n    return [ \"\\n  \", Blaze.If(function() {                                                                           // 8\n      return Spacebars.call(view.lookup(\"ready\"));                                                                   // 9\n    }, function() {                                                                                                  // 10\n      return [ \"\\n    \", HTML.DIV({                                                                                  // 11\n        \"class\": \"clearfix\"                                                                                          // 12\n      }, \"\\n      \", HTML.DIV({                                                                                      // 13\n        \"class\": \"reactive-table-options col-sm-8 pull-right\"                                                        // 14\n      }, \"\\n        \", Blaze.If(function() {                                                                         // 15\n        return Spacebars.call(view.lookup(\"showFilter\"));                                                            // 16\n      }, function() {                                                                                                // 17\n        return [ \"\\n          \", HTML.DIV({                                                                          // 18\n          \"class\": \"reactive-table-filter form-group col-sm-8 pull-right\"                                            // 19\n        }, \"\\n            \", Blaze._TemplateWith(function() {                                                        // 20\n          return {                                                                                                   // 21\n            id: Spacebars.call(view.lookup(\"getFilterId\")),                                                          // 22\n            useFontAwesome: Spacebars.call(view.lookup(\"useFontAwesome\"))                                            // 23\n          };                                                                                                         // 24\n        }, function() {                                                                                              // 25\n          return Spacebars.include(view.lookupTemplate(\"reactiveTableFilter\"));                                      // 26\n        }), \"\\n          \"), \"\\n        \" ];                                                                         // 27\n      }), \"\\n        \", Blaze.If(function() {                                                                        // 28\n        return Spacebars.call(view.lookup(\"showColumnToggles\"));                                                     // 29\n      }, function() {                                                                                                // 30\n        return [ \"\\n          \", HTML.DIV({                                                                          // 31\n          \"class\": \"reactive-table-columns-dropdown col-sm-4 pull-right\"                                             // 32\n        }, \"\\n            \", HTML.BUTTON({                                                                           // 33\n          \"class\": \"btn btn-default dropdown-toggle\",                                                                // 34\n          id: function() {                                                                                           // 35\n            return [ \"reactive-table-add-column-\", Spacebars.mustache(view.lookup(\"id\")) ];                          // 36\n          },                                                                                                         // 37\n          \"data-toggle\": \"dropdown\"                                                                                  // 38\n        }, \"\\n              \", Blaze.View(\"lookup:i18n\", function() {                                                // 39\n          return Spacebars.mustache(view.lookup(\"i18n\"), \"reactiveTable.columns\");                                   // 40\n        }), \"\\n            \"), \"\\n            \", HTML.UL({                                                           // 41\n          \"class\": \"dropdown-menu dropdown-menu-right\",                                                              // 42\n          role: \"menu\",                                                                                              // 43\n          \"aria-labelledby\": function() {                                                                            // 44\n            return [ \"reactive-table-add-column-\", Spacebars.mustache(view.lookup(\"id\")) ];                          // 45\n          }                                                                                                          // 46\n        }, \"\\n              \", Blaze.Each(function() {                                                               // 47\n          return Spacebars.call(view.lookup(\"fields\"));                                                              // 48\n        }, function() {                                                                                              // 49\n          return [ \"\\n                \", Blaze.Unless(function() {                                                   // 50\n            return Spacebars.call(view.lookup(\"hideToggle\"));                                                        // 51\n          }, function() {                                                                                            // 52\n            return [ \"\\n                  \", HTML.LI({                                                               // 53\n              role: \"presentation\"                                                                                   // 54\n            }, HTML.A({                                                                                              // 55\n              role: \"menuitem\",                                                                                      // 56\n              tabindex: \"-1\",                                                                                        // 57\n              \"data-target\": \"#\"                                                                                     // 58\n            }, \"\\n                    \", Blaze.If(function() {                                                       // 59\n              return Spacebars.call(view.lookup(\"isVisible\"));                                                       // 60\n            }, function() {                                                                                          // 61\n              return [ \"\\n                      \", HTML.INPUT({                                                      // 62\n                type: \"checkbox\",                                                                                    // 63\n                checked: \"\",                                                                                         // 64\n                \"data-fieldid\": function() {                                                                         // 65\n                  return Spacebars.mustache(view.lookup(\"fieldId\"));                                                 // 66\n                }                                                                                                    // 67\n              }), \"\\n                    \" ];                                                                        // 68\n            }, function() {                                                                                          // 69\n              return [ \"\\n                      \", HTML.INPUT({                                                      // 70\n                type: \"checkbox\",                                                                                    // 71\n                \"data-fieldid\": function() {                                                                         // 72\n                  return Spacebars.mustache(view.lookup(\"fieldId\"));                                                 // 73\n                }                                                                                                    // 74\n              }), \"\\n                    \" ];                                                                        // 75\n            }), \"\\n                    \", HTML.LABEL(\"\\n                      \", Blaze.If(function() {               // 76\n              return Spacebars.call(view.lookup(\"labelIsTemplate\"));                                                 // 77\n            }, function() {                                                                                          // 78\n              return Spacebars.With(function() {                                                                     // 79\n                return Spacebars.call(view.lookup(\"labelData\"));                                                     // 80\n              }, function() {                                                                                        // 81\n                return Spacebars.include(function() {                                                                // 82\n                  return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"label\"));                                  // 83\n                });                                                                                                  // 84\n              }, function() {                                                                                        // 85\n                return Spacebars.include(view.lookupTemplate(\"label\"));                                              // 86\n              });                                                                                                    // 87\n            }, function() {                                                                                          // 88\n              return Blaze.View(\"lookup:getLabel\", function() {                                                      // 89\n                return Spacebars.mustache(view.lookup(\"getLabel\"));                                                  // 90\n              });                                                                                                    // 91\n            }), \"\\n                    \"), \"\\n                  \")), \"\\n                \" ];                         // 92\n          }), \"\\n              \" ];                                                                                  // 93\n        }), \"\\n            \"), \"\\n          \"), \"\\n        \" ];                                                      // 94\n      }), \"\\n      \"), \"\\n    \"), \"\\n    \", Blaze.Unless(function() {                                                // 95\n        return Spacebars.call(view.lookup(\"noData\"));                                                                // 96\n      }, function() {                                                                                                // 97\n        return [ \"\\n      \", HTML.TABLE({                                                                            // 98\n          id: function() {                                                                                           // 99\n            return Spacebars.mustache(view.lookup(\"id\"));                                                            // 100\n          },                                                                                                         // 101\n          \"class\": function() {                                                                                      // 102\n            return [ Spacebars.mustache(view.lookup(\"class\")), \" reactive-table\" ];                                  // 103\n          }                                                                                                          // 104\n        }, \"\\n        \", HTML.THEAD(\"\\n          \", HTML.TR(\"\\n            \", Blaze.Each(function() {                // 105\n          return Spacebars.call(view.lookup(\"fields\"));                                                              // 106\n        }, function() {                                                                                              // 107\n          return [ \"\\n              \", Blaze.If(function() {                                                         // 108\n            return Spacebars.call(view.lookup(\"isVisible\"));                                                         // 109\n          }, function() {                                                                                            // 110\n            return [ \"\\n                \", Blaze.If(function() {                                                     // 111\n              return Spacebars.call(view.lookup(\"isPrimarySortField\"));                                              // 112\n            }, function() {                                                                                          // 113\n              return [ \"\\n                  \", HTML.TH({                                                             // 114\n                \"class\": function() {                                                                                // 115\n                  return [ Blaze.If(function() {                                                                     // 116\n                    return Spacebars.call(view.lookup(\"isSortable\"));                                                // 117\n                  }, function() {                                                                                    // 118\n                    return \"sortable \";                                                                              // 119\n                  }), Spacebars.mustache(view.lookup(\"getHeaderClass\")) ];                                           // 120\n                },                                                                                                   // 121\n                fieldid: function() {                                                                                // 122\n                  return Spacebars.mustache(view.lookup(\"getFieldFieldId\"));                                         // 123\n                }                                                                                                    // 124\n              }, \"\\n                    \", Blaze.If(function() {                                                     // 125\n                return Spacebars.call(view.lookup(\"labelIsTemplate\"));                                               // 126\n              }, function() {                                                                                        // 127\n                return Spacebars.With(function() {                                                                   // 128\n                  return Spacebars.call(view.lookup(\"labelData\"));                                                   // 129\n                }, function() {                                                                                      // 130\n                  return Spacebars.include(function() {                                                              // 131\n                    return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"label\"));                                // 132\n                  });                                                                                                // 133\n                }, function() {                                                                                      // 134\n                  return Spacebars.include(view.lookupTemplate(\"label\"));                                            // 135\n                });                                                                                                  // 136\n              }, function() {                                                                                        // 137\n                return Blaze.View(\"lookup:getLabel\", function() {                                                    // 138\n                  return Spacebars.mustache(view.lookup(\"getLabel\"));                                                // 139\n                });                                                                                                  // 140\n              }), HTML.CharRef({                                                                                     // 141\n                html: \"&nbsp;\",                                                                                      // 142\n                str: \" \"                                                                                             // 143\n              }), HTML.CharRef({                                                                                     // 144\n                html: \"&nbsp;\",                                                                                      // 145\n                str: \" \"                                                                                             // 146\n              }), \"\\n                    \", Blaze.If(function() {                                                    // 147\n                return Spacebars.call(view.lookup(\"isAscending\"));                                                   // 148\n              }, function() {                                                                                        // 149\n                return [ \"\\n                      \", Blaze.If(function() {                                           // 150\n                  return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"useFontAwesome\"));                         // 151\n                }, function() {                                                                                      // 152\n                  return [ \"\\n                        \", HTML.I({                                                    // 153\n                    \"class\": \"fa fa-sort-asc\"                                                                        // 154\n                  }), \"\\n                      \" ];                                                                  // 155\n                }, function() {                                                                                      // 156\n                  return [ \"\\n                        \", HTML.CharRef({                                              // 157\n                    html: \"&#x25B2;\",                                                                                // 158\n                    str: \"▲\"                                                                                         // 159\n                  }), \"\\n                      \" ];                                                                  // 160\n                }), \"\\n                    \" ];                                                                      // 161\n              }, function() {                                                                                        // 162\n                return [ \"\\n                      \", Blaze.If(function() {                                           // 163\n                  return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"useFontAwesome\"));                         // 164\n                }, function() {                                                                                      // 165\n                  return [ \"\\n                        \", HTML.I({                                                    // 166\n                    \"class\": \"fa fa-sort-desc\"                                                                       // 167\n                  }), \"\\n                      \" ];                                                                  // 168\n                }, function() {                                                                                      // 169\n                  return [ \"\\n                        \", HTML.CharRef({                                              // 170\n                    html: \"&#x25BC;\",                                                                                // 171\n                    str: \"▼\"                                                                                         // 172\n                  }), \"\\n                      \" ];                                                                  // 173\n                }), \"\\n                    \" ];                                                                      // 174\n              }), \"\\n                  \"), \"\\n                \" ];                                                   // 175\n            }, function() {                                                                                          // 176\n              return [ \"\\n                  \", Blaze.If(function() {                                                 // 177\n                return Spacebars.call(view.lookup(\"isSortable\"));                                                    // 178\n              }, function() {                                                                                        // 179\n                return [ \"\\n                    \", HTML.TH({                                                         // 180\n                  \"class\": function() {                                                                              // 181\n                    return [ Spacebars.mustache(view.lookup(\"getHeaderClass\")), \" sortable\" ];                       // 182\n                  },                                                                                                 // 183\n                  fieldid: function() {                                                                              // 184\n                    return Spacebars.mustache(view.lookup(\"getFieldFieldId\"));                                       // 185\n                  }                                                                                                  // 186\n                }, Blaze.If(function() {                                                                             // 187\n                  return Spacebars.call(view.lookup(\"labelIsTemplate\"));                                             // 188\n                }, function() {                                                                                      // 189\n                  return Spacebars.With(function() {                                                                 // 190\n                    return Spacebars.call(view.lookup(\"labelData\"));                                                 // 191\n                  }, function() {                                                                                    // 192\n                    return Spacebars.include(function() {                                                            // 193\n                      return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"label\"));                              // 194\n                    });                                                                                              // 195\n                  }, function() {                                                                                    // 196\n                    return Spacebars.include(view.lookupTemplate(\"label\"));                                          // 197\n                  });                                                                                                // 198\n                }, function() {                                                                                      // 199\n                  return Blaze.View(\"lookup:getLabel\", function() {                                                  // 200\n                    return Spacebars.mustache(view.lookup(\"getLabel\"));                                              // 201\n                  });                                                                                                // 202\n                })), \"\\n                  \" ];                                                                       // 203\n              }, function() {                                                                                        // 204\n                return [ \"\\n                    \", HTML.TH({                                                         // 205\n                  \"class\": function() {                                                                              // 206\n                    return Spacebars.mustache(view.lookup(\"getHeaderClass\"));                                        // 207\n                  },                                                                                                 // 208\n                  fieldid: function() {                                                                              // 209\n                    return Spacebars.mustache(view.lookup(\"getFieldFieldId\"));                                       // 210\n                  }                                                                                                  // 211\n                }, Blaze.If(function() {                                                                             // 212\n                  return Spacebars.call(view.lookup(\"labelIsTemplate\"));                                             // 213\n                }, function() {                                                                                      // 214\n                  return Spacebars.With(function() {                                                                 // 215\n                    return Spacebars.call(view.lookup(\"labelData\"));                                                 // 216\n                  }, function() {                                                                                    // 217\n                    return Spacebars.include(function() {                                                            // 218\n                      return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"label\"));                              // 219\n                    });                                                                                              // 220\n                  }, function() {                                                                                    // 221\n                    return Spacebars.include(view.lookupTemplate(\"label\"));                                          // 222\n                  });                                                                                                // 223\n                }, function() {                                                                                      // 224\n                  return Blaze.View(\"lookup:getLabel\", function() {                                                  // 225\n                    return Spacebars.mustache(view.lookup(\"getLabel\"));                                              // 226\n                  });                                                                                                // 227\n                })), \"\\n                  \" ];                                                                       // 228\n              }), \"\\n                \" ];                                                                            // 229\n            }), \"\\n              \" ];                                                                                // 230\n          }), \"\\n            \" ];                                                                                    // 231\n        }), \"\\n          \"), \"\\n        \"), \"\\n        \", HTML.TBODY(\"\\n          \", Blaze.Each(function() {         // 232\n          return Spacebars.call(view.lookup(\"sortedRows\"));                                                          // 233\n        }, function() {                                                                                              // 234\n          return [ \"\\n            \", HTML.TR({                                                                       // 235\n            \"class\": function() {                                                                                    // 236\n              return Spacebars.mustache(Spacebars.dot(view.lookup(\"..\"), \"rowClass\"), view.lookup(\".\"));             // 237\n            }                                                                                                        // 238\n          }, \"\\n              \", Blaze.Each(function() {                                                             // 239\n            return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"fields\"));                                       // 240\n          }, function() {                                                                                            // 241\n            return [ \"\\n                \", Blaze.If(function() {                                                     // 242\n              return Spacebars.call(view.lookup(\"isVisible\"));                                                       // 243\n            }, function() {                                                                                          // 244\n              return [ \"\\n                  \", HTML.TD({                                                             // 245\n                \"class\": function() {                                                                                // 246\n                  return Spacebars.mustache(view.lookup(\"getCellClass\"), view.lookup(\"..\"));                         // 247\n                }                                                                                                    // 248\n              }, Blaze.If(function() {                                                                               // 249\n                return Spacebars.call(view.lookup(\"tmpl\"));                                                          // 250\n              }, function() {                                                                                        // 251\n                return Spacebars.With(function() {                                                                   // 252\n                  return Spacebars.call(view.lookup(\"..\"));                                                          // 253\n                }, function() {                                                                                      // 254\n                  return Spacebars.include(function() {                                                              // 255\n                    return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"tmpl\"));                                 // 256\n                  });                                                                                                // 257\n                });                                                                                                  // 258\n              }, function() {                                                                                        // 259\n                return Blaze.View(\"lookup:getField\", function() {                                                    // 260\n                  return Spacebars.mustache(view.lookup(\"getField\"), view.lookup(\"..\"));                             // 261\n                });                                                                                                  // 262\n              })), \"\\n                \" ];                                                                           // 263\n            }), \"\\n              \" ];                                                                                // 264\n          }), \"\\n            \"), \"\\n          \" ];                                                                   // 265\n        }), \"\\n        \"), \"\\n      \"), \"\\n      \", Blaze.If(function() {                                            // 266\n          return Spacebars.call(view.lookup(\"showNavigation\"));                                                      // 267\n        }, function() {                                                                                              // 268\n          return [ \"\\n        \", HTML.DIV({                                                                          // 269\n            \"class\": \"reactive-table-navigation\"                                                                     // 270\n          }, \"\\n          \", Blaze.If(function() {                                                                   // 271\n            return Spacebars.call(view.lookup(\"showNavigationRowsPerPage\"));                                         // 272\n          }, function() {                                                                                            // 273\n            return [ \"\\n            \", HTML.DIV({                                                                    // 274\n              \"class\": \"form-inline form-group rows-per-page\"                                                        // 275\n            }, \"\\n              \", HTML.LABEL(\"\\n                \", HTML.SPAN(Blaze.View(\"lookup:i18n\", function() {\n              return Spacebars.mustache(view.lookup(\"i18n\"), \"reactiveTable.show\");                                  // 277\n            })), \"\\n                \", HTML.INPUT({                                                                  // 278\n              \"class\": \"form-control\",                                                                               // 279\n              type: \"text\",                                                                                          // 280\n              value: function() {                                                                                    // 281\n                return Spacebars.mustache(view.lookup(\"getRowsPerPage\"));                                            // 282\n              }                                                                                                      // 283\n            }), \"\\n                \", Blaze.If(function() {                                                          // 284\n              return Spacebars.call(view.lookup(\"showRowCount\"));                                                    // 285\n            }, function() {                                                                                          // 286\n              return [ \"\\n                  \", HTML.SPAN(Blaze.View(\"lookup:i18n\", function() {                      // 287\n                return Spacebars.mustache(view.lookup(\"i18n\"), \"reactiveTable.of\");                                  // 288\n              })), \"\\n                  \", HTML.SPAN({                                                               // 289\n                \"class\": \"rows-per-page-count\"                                                                       // 290\n              }, Blaze.View(\"lookup:getRowCount\", function() {                                                       // 291\n                return Spacebars.mustache(view.lookup(\"getRowCount\"));                                               // 292\n              })), \"\\n                \" ];                                                                           // 293\n            }), \"\\n                \", HTML.SPAN({                                                                    // 294\n              \"class\": \"rows-per-page-label\"                                                                         // 295\n            }, Blaze.View(\"lookup:i18n\", function() {                                                                // 296\n              return Spacebars.mustache(view.lookup(\"i18n\"), \"reactiveTable.rowsPerPage\");                           // 297\n            })), \"\\n              \"), \"\\n            \"), \"\\n          \" ];                                           // 298\n          }), \"\\n          \", HTML.DIV({                                                                             // 299\n            \"class\": \"form-inline form-group page-number\"                                                            // 300\n          }, \"\\n            \", Blaze.If(function() {                                                                 // 301\n            return Spacebars.call(view.lookup(\"isntFirstPage\"));                                                     // 302\n          }, function() {                                                                                            // 303\n            return [ \"\\n              \", Blaze.If(function() {                                                       // 304\n              return Spacebars.call(view.lookup(\"useFontAwesome\"));                                                  // 305\n            }, function() {                                                                                          // 306\n              return [ \"\\n                \", HTML.I({                                                                // 307\n                \"class\": \"previous-page fa fa-caret-left\"                                                            // 308\n              }), \"\\n              \" ];                                                                              // 309\n            }, function() {                                                                                          // 310\n              return [ \"\\n                \", HTML.LABEL({                                                            // 311\n                \"class\": \"previous-page\"                                                                             // 312\n              }, HTML.CharRef({                                                                                      // 313\n                html: \"&lt;\",                                                                                        // 314\n                str: \"<\"                                                                                             // 315\n              })), \"\\n              \" ];                                                                             // 316\n            }), \"\\n            \" ];                                                                                  // 317\n          }), \"\\n            \", HTML.LABEL(\"\\n              \", HTML.SPAN(Blaze.View(\"lookup:i18n\", function() {      // 318\n            return Spacebars.mustache(view.lookup(\"i18n\"), \"reactiveTable.page\");                                    // 319\n          })), \"\\n              \", HTML.INPUT({                                                                      // 320\n            \"class\": \"form-control\",                                                                                 // 321\n            type: \"text\",                                                                                            // 322\n            value: function() {                                                                                      // 323\n              return Spacebars.mustache(view.lookup(\"getCurrentPage\"));                                              // 324\n            }                                                                                                        // 325\n          }), \"\\n              \", HTML.SPAN(Blaze.View(\"lookup:i18n\", function() {                                   // 326\n            return Spacebars.mustache(view.lookup(\"i18n\"), \"reactiveTable.of\");                                      // 327\n          })), \"\\n              \", HTML.SPAN({                                                                       // 328\n            \"class\": \"page-number-count\"                                                                             // 329\n          }, Blaze.View(\"lookup:getPageCount\", function() {                                                          // 330\n            return Spacebars.mustache(view.lookup(\"getPageCount\"));                                                  // 331\n          })), \"\\n            \"), \"\\n            \", Blaze.If(function() {                                            // 332\n            return Spacebars.call(view.lookup(\"isntLastPage\"));                                                      // 333\n          }, function() {                                                                                            // 334\n            return [ \"\\n              \", Blaze.If(function() {                                                       // 335\n              return Spacebars.call(view.lookup(\"useFontAwesome\"));                                                  // 336\n            }, function() {                                                                                          // 337\n              return [ \"\\n                \", HTML.I({                                                                // 338\n                \"class\": \"next-page fa fa-caret-right\"                                                               // 339\n              }), \"\\n              \" ];                                                                              // 340\n            }, function() {                                                                                          // 341\n              return [ \"\\n                \", HTML.LABEL({                                                            // 342\n                \"class\": \"next-page\"                                                                                 // 343\n              }, HTML.CharRef({                                                                                      // 344\n                html: \"&gt;\",                                                                                        // 345\n                str: \">\"                                                                                             // 346\n              })), \"\\n              \" ];                                                                             // 347\n            }), \"\\n            \" ];                                                                                  // 348\n          }), \"\\n          \"), \"\\n        \"), \"\\n      \" ];                                                          // 349\n        }), \"\\n    \" ];                                                                                              // 350\n      }, function() {                                                                                                // 351\n        return [ \"\\n      \", Spacebars.include(view.lookupTemplate(\"noDataTmpl\")), \"\\n    \" ];                       // 352\n      }), \"\\n  \" ];                                                                                                  // 353\n    }), \"\\n  \" ];                                                                                                    // 354\n  });                                                                                                                // 355\n}));                                                                                                                 // 356\n                                                                                                                     // 357\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/aslagle_reactive-table/lib/template.filter.js                                                            //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n                                                                                                                     // 1\nTemplate.__checkName(\"reactiveTableFilter\");                                                                         // 2\nTemplate[\"reactiveTableFilter\"] = new Template(\"Template.reactiveTableFilter\", (function() {                         // 3\n  var view = this;                                                                                                   // 4\n  return HTML.DIV({                                                                                                  // 5\n    id: function() {                                                                                                 // 6\n      return Spacebars.mustache(view.lookup(\"id\"));                                                                  // 7\n    },                                                                                                               // 8\n    \"class\": function() {                                                                                            // 9\n      return Spacebars.mustache(view.lookup(\"class\"));                                                               // 10\n    }                                                                                                                // 11\n  }, \"\\n    \", HTML.SPAN({                                                                                           // 12\n    \"class\": \"input-group-addon\"                                                                                     // 13\n  }, \"\\n      \", Blaze.If(function() {                                                                               // 14\n    return Spacebars.call(view.lookup(\"useFontAwesome\"));                                                            // 15\n  }, function() {                                                                                                    // 16\n    return [ \"\\n        \", HTML.I({                                                                                  // 17\n      \"class\": \"fa fa-filter\"                                                                                        // 18\n    }), \"\\n      \" ];                                                                                                // 19\n  }, function() {                                                                                                    // 20\n    return [ \"\\n        \", Blaze.If(function() {                                                                     // 21\n      return Spacebars.call(view.lookup(\"label\"));                                                                   // 22\n    }, function() {                                                                                                  // 23\n      return [ \"\\n          \", HTML.SPAN(Blaze.View(\"lookup:label\", function() {                                     // 24\n        return Spacebars.mustache(view.lookup(\"label\"));                                                             // 25\n      })), \"\\n        \" ];                                                                                           // 26\n    }, function() {                                                                                                  // 27\n      return [ \"\\n          \", Blaze.View(\"lookup:i18n\", function() {                                                // 28\n        return Spacebars.mustache(view.lookup(\"i18n\"), \"reactiveTable.filter\");                                      // 29\n      }), \"\\n        \" ];                                                                                            // 30\n    }), \"\\n      \" ];                                                                                                // 31\n  }), \"\\n    \"), \"\\n    \", Blaze.If(function() {                                                                     // 32\n    return Spacebars.call(view.lookup(\"useFontAwesome\"));                                                            // 33\n  }, function() {                                                                                                    // 34\n    return [ \"\\n      \", Blaze.If(function() {                                                                       // 35\n      return Spacebars.call(view.lookup(\"label\"));                                                                   // 36\n    }, function() {                                                                                                  // 37\n      return [ \"\\n        \", HTML.INPUT({                                                                            // 38\n        \"class\": \"reactive-table-input form-control\",                                                                // 39\n        type: \"text\",                                                                                                // 40\n        value: function() {                                                                                          // 41\n          return Spacebars.mustache(view.lookup(\"filter\"));                                                          // 42\n        },                                                                                                           // 43\n        placeholder: function() {                                                                                    // 44\n          return Spacebars.mustache(view.lookup(\"label\"));                                                           // 45\n        }                                                                                                            // 46\n      }), \"\\n      \" ];                                                                                              // 47\n    }, function() {                                                                                                  // 48\n      return [ \"\\n        \", HTML.INPUT({                                                                            // 49\n        \"class\": \"reactive-table-input form-control\",                                                                // 50\n        type: \"text\",                                                                                                // 51\n        value: function() {                                                                                          // 52\n          return Spacebars.mustache(view.lookup(\"filter\"));                                                          // 53\n        },                                                                                                           // 54\n        placeholder: function() {                                                                                    // 55\n          return Spacebars.mustache(view.lookup(\"i18n\"), \"reactiveTable.filter\");                                    // 56\n        }                                                                                                            // 57\n      }), \"\\n      \" ];                                                                                              // 58\n    }), \"\\n    \" ];                                                                                                  // 59\n  }, function() {                                                                                                    // 60\n    return [ \"\\n      \", HTML.INPUT({                                                                                // 61\n      \"class\": \"reactive-table-input form-control\",                                                                  // 62\n      type: \"text\",                                                                                                  // 63\n      value: function() {                                                                                            // 64\n        return Spacebars.mustache(view.lookup(\"filter\"));                                                            // 65\n      }                                                                                                              // 66\n    }), \"\\n    \" ];                                                                                                  // 67\n  }), \"\\n  \");                                                                                                       // 68\n}));                                                                                                                 // 69\n                                                                                                                     // 70\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/aslagle_reactive-table/lib/reactive_table_i18n.js                                                        //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\ni18n.map('en', {                                                                                                     // 1\n    reactiveTable: {                                                                                                 // 2\n        filter: 'Filter',                                                                                            // 3\n        columns: 'Columns',                                                                                          // 4\n        show: 'Show',                                                                                                // 5\n        rowsPerPage: 'rows per page',                                                                                // 6\n        page: 'Page',                                                                                                // 7\n        of: 'of'                                                                                                     // 8\n    }                                                                                                                // 9\n});                                                                                                                  // 10\n                                                                                                                     // 11\ni18n.map('fr', {                                                                                                     // 12\n    reactiveTable: {                                                                                                 // 13\n        filter: 'Filtre',                                                                                            // 14\n        columns: 'Colonnes',                                                                                         // 15\n        show: 'Voir',                                                                                                // 16\n        rowsPerPage: 'lignes par page',                                                                              // 17\n        page: 'page',                                                                                                // 18\n        of: 'sur'                                                                                                    // 19\n    }                                                                                                                // 20\n});                                                                                                                  // 21\n                                                                                                                     // 22\ni18n.map('ru', {                                                                                                     // 23\n    reactiveTable: {                                                                                                 // 24\n        filter: 'Фильтр',                                                                                            // 25\n        columns: 'Колонка',                                                                                          // 26\n        show: 'Показать',                                                                                            // 27\n        rowsPerPage: 'линий на странице',                                                                            // 28\n        page: 'Страница',                                                                                            // 29\n        of: 'из'                                                                                                     // 30\n    }                                                                                                                // 31\n});                                                                                                                  // 32\n                                                                                                                     // 33\ni18n.map('es', {                                                                                                     // 34\n    reactiveTable: {                                                                                                 // 35\n        filter: 'Filtro',                                                                                            // 36\n        columns: 'Columnas',                                                                                         // 37\n        show:   'Mostrar',                                                                                           // 38\n        rowsPerPage: 'filas por página',                                                                             // 39\n        page: 'Página',                                                                                              // 40\n        of: 'de'                                                                                                     // 41\n    }                                                                                                                // 42\n});                                                                                                                  // 43\n                                                                                                                     // 44\ni18n.map('nl', {                                                                                                     // 45\n    reactiveTable: {                                                                                                 // 46\n        filter: 'Filter',                                                                                            // 47\n        show:   'Toon',                                                                                              // 48\n        rowsPerPage: 'regels per pagina',                                                                            // 49\n        page: 'Pagina',                                                                                              // 50\n        of: 'van'                                                                                                    // 51\n    }                                                                                                                // 52\n});                                                                                                                  // 53\n                                                                                                                     // 54\ni18n.map('pt-br', {                                                                                                  // 55\n    reactiveTable: {                                                                                                 // 56\n        filter: 'Filtro',                                                                                            // 57\n        show: 'Mostrar',                                                                                             // 58\n        rowsPerPage: 'linhas por página',                                                                            // 59\n        page: 'Página',                                                                                              // 60\n        of: 'de'                                                                                                     // 61\n    }                                                                                                                // 62\n});                                                                                                                  // 63\n                                                                                                                     // 64\ni18n.map('it', {                                                                                                     // 65\n    reactiveTable: {                                                                                                 // 66\n        filter: 'Filtra',                                                                                            // 67\n        show: 'Mostra',                                                                                              // 68\n        rowsPerPage: 'righe per pagina',                                                                             // 69\n        page: 'Pagina',                                                                                              // 70\n        of: 'di'                                                                                                     // 71\n    }                                                                                                                // 72\n});                                                                                                                  // 73\n                                                                                                                     // 74\ni18n.map('sv', {                                                                                                     // 75\n    reactiveTable: {                                                                                                 // 76\n        filter: 'Filter',                                                                                            // 77\n        show: 'Visa',                                                                                                // 78\n        rowsPerPage: 'rader per sida',                                                                               // 79\n        page: 'Sida',                                                                                                // 80\n        of: 'av'                                                                                                     // 81\n    }                                                                                                                // 82\n});                                                                                                                  // 83\n                                                                                                                     // 84\ni18n.map('ua', {                                                                                                     // 85\n    reactiveTable: {                                                                                                 // 86\n        filter: 'Фільтр',                                                                                            // 87\n        show: 'Показати',                                                                                            // 88\n        rowsPerPage: 'рядків на сторінці',                                                                           // 89\n        page: 'Сторінка',                                                                                            // 90\n        of: 'з'                                                                                                      // 91\n    }                                                                                                                // 92\n});                                                                                                                  // 93\n                                                                                                                     // 94\ni18n.map('tr', {                                                                                                     // 95\n    reactiveTable: {                                                                                                 // 96\n        filter: 'Süz',                                                                                               // 97\n        columns: 'Sütunlar',                                                                                         // 98\n        show: 'Sayfa başına',                                                                                        // 99\n        rowsPerPage: 'satır göster',                                                                                 // 100\n        page: 'Sayfa',                                                                                               // 101\n        of: ' / '                                                                                                    // 102\n    }                                                                                                                // 103\n});                                                                                                                  // 104\n                                                                                                                     // 105\ni18n.map('sk', {                                                                                                     // 106\n    reactiveTable: {                                                                                                 // 107\n        filter: 'Filter',                                                                                            // 108\n        show: 'Zobraz',                                                                                              // 109\n        rowsPerPage: 'riadkov na stranu',                                                                            // 110\n        page: 'Strana',                                                                                              // 111\n        of: 'z'                                                                                                      // 112\n    }                                                                                                                // 113\n});                                                                                                                  // 114\n                                                                                                                     // 115\ni18n.map('cs', {                                                                                                     // 116\n    reactiveTable: {                                                                                                 // 117\n        filter: 'Filter',                                                                                            // 118\n        show: 'Zobraz',                                                                                              // 119\n        rowsPerPage: 'řádků na stranu',                                                                              // 120\n        page: 'Strana',                                                                                              // 121\n        of: 'z'                                                                                                      // 122\n    }                                                                                                                // 123\n});                                                                                                                  // 124\n                                                                                                                     // 125\ni18n.map('he', {                                                                                                     // 126\n    reactiveTable: {                                                                                                 // 127\n        filter: 'פילטר',                                                                                             // 128\n        show: 'הצג',                                                                                                 // 129\n        rowsPerPage: 'שורות לעמוד',                                                                                  // 130\n        page: 'עמוד',                                                                                                // 131\n        of: 'מתוך'                                                                                                   // 132\n    }                                                                                                                // 133\n});                                                                                                                  // 134\n                                                                                                                     // 135\ni18n.map('da', {                                                                                                     // 136\n    reactiveTable: {                                                                                                 // 137\n        filter: 'Filter',                                                                                            // 138\n        columns: 'Kolonner',                                                                                         // 139\n        show: 'Vis',                                                                                                 // 140\n        rowsPerPage: 'rækker per side',                                                                              // 141\n        page: 'Side',                                                                                                // 142\n        of: 'af'                                                                                                     // 143\n    }                                                                                                                // 144\n});                                                                                                                  // 145\n                                                                                                                     // 146\ni18n.map('de', {                                                                                                     // 147\n    reactiveTable: {                                                                                                 // 148\n        filter: 'Filter',                                                                                            // 149\n        columns: 'Spalten',                                                                                          // 150\n        show: 'Zeige',                                                                                               // 151\n        rowsPerPage: 'Zeilen pro Seite',                                                                             // 152\n        page: 'Seite',                                                                                               // 153\n        of: 'von'                                                                                                    // 154\n    }                                                                                                                // 155\n});                                                                                                                  // 156\n                                                                                                                     // 157\ni18n.map('fi', {                                                                                                     // 158\n    reactiveTable: {                                                                                                 // 159\n        filter: 'Suodata',                                                                                           // 160\n        show: 'Näytä',                                                                                               // 161\n        rowsPerPage: 'riviä sivulla',                                                                                // 162\n        page: 'Sivu',                                                                                                // 163\n        of: ' / '                                                                                                    // 164\n    }                                                                                                                // 165\n});                                                                                                                  // 166\n                                                                                                                     // 167\ni18n.map('no', {                                                                                                     // 168\n    reactiveTable: {                                                                                                 // 169\n        filter: 'Filter',                                                                                            // 170\n        columns: 'Kolonner',                                                                                         // 171\n        show: 'Vis',                                                                                                 // 172\n        rowsPerPage: 'rader per side',                                                                               // 173\n        page: 'Side',                                                                                                // 174\n        of: 'av'                                                                                                     // 175\n    }                                                                                                                // 176\n});                                                                                                                  // 177\n                                                                                                                     // 178\ni18n.map('pl', {                                                                                                     // 179\n    reactiveTable: {                                                                                                 // 180\n        filter: 'Szukaj',                                                                                            // 181\n        columns: 'Kolumny',                                                                                          // 182\n        show: 'Pokaż',                                                                                               // 183\n        rowsPerPage: 'pozycji na stronie',                                                                           // 184\n        page: 'Strona',                                                                                              // 185\n        of: 'z'                                                                                                      // 186\n    }                                                                                                                // 187\n});                                                                                                                  // 188\n                                                                                                                     // 189\ni18n.map('hr', {                                                                                                     // 190\n    reactiveTable: {                                                                                                 // 191\n        filter: 'Filter',                                                                                            // 192\n        columns: 'Stupci',                                                                                           // 193\n        show: 'Prikaži',                                                                                             // 194\n        rowsPerPage: 'redova po stranici',                                                                           // 195\n        page: 'Stranica',                                                                                            // 196\n        of: 'od'                                                                                                     // 197\n    }                                                                                                                // 198\n});                                                                                                                  // 199\n                                                                                                                     // 200\ni18n.map('is', {                                                                                                     // 201\n    reactiveTable: {                                                                                                 // 202\n        filter: 'Sía',                                                                                               // 203\n        columns: 'Dálkar',                                                                                           // 204\n        show: 'Sýna',                                                                                                // 205\n        rowsPerPage: 'raðir á síðu',                                                                                 // 206\n        page: 'Síða',                                                                                                // 207\n        of: 'af'                                                                                                     // 208\n    }                                                                                                                // 209\n});                                                                                                                  // 210\n                                                                                                                     // 211\ni18n.map('zh', {                                                                                                     // 212\n    reactiveTable: {                                                                                                 // 213\n        filter: '过滤',                                                                                                // 214\n        columns: '列',                                                                                                // 215\n        show: '显示',                                                                                                  // 216\n        rowsPerPage: '每页行数',                                                                                         // 217\n        page: '页数',                                                                                                  // 218\n        of: '之'                                                                                                      // 219\n    }                                                                                                                // 220\n});                                                                                                                  // 221\n                                                                                                                     // 222\ni18n.map('fa', {                                                                                                     // 223\n    reactiveTable: {                                                                                                 // 224\n        filter: 'تزکیه',                                                                                             // 225\n        columns: 'ستون',                                                                                             // 226\n        show: 'ارائه',                                                                                               // 227\n        rowsPerPage: 'ردیف در هر صفحه',                                                                              // 228\n        page: 'صفحه',                                                                                                // 229\n        of: 'از'                                                                                                     // 230\n    }                                                                                                                // 231\n});                                                                                                                  // 232\n                                                                                                                     // 233\ni18n.map('gr', {                                                                                                     // 234\n    reactiveTable: {                                                                                                 // 235\n        filter: 'Φίλτρα',                                                                                            // 236\n        columns: 'Στήλες',                                                                                           // 237\n        show: 'Προβολή',                                                                                             // 238\n        rowsPerPage: 'γραμμές ανά σελίδα',                                                                           // 239\n        page: 'Σελίδα',                                                                                              // 240\n        of: 'από'                                                                                                    // 241\n    }                                                                                                                // 242\n});                                                                                                                  // 243\n                                                                                                                     // 244\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/aslagle_reactive-table/lib/reactive_table.js                                                             //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nvar ReactiveTableCounts = new Mongo.Collection(\"reactive-table-counts\");                                             // 1\n                                                                                                                     // 2\nget = function(obj, field) {                                                                                         // 3\n  var keys = field.split('.');                                                                                       // 4\n  var value = obj;                                                                                                   // 5\n                                                                                                                     // 6\n  _.each(keys, function (key) {                                                                                      // 7\n      if (_.isObject(value) && _.isFunction(value[key])) {                                                           // 8\n          value = value[key]();                                                                                      // 9\n      } else if (_.isObject(value) && !_.isUndefined(value[key])) {                                                  // 10\n          value = value[key];                                                                                        // 11\n      } else {                                                                                                       // 12\n          value = null;                                                                                              // 13\n      }                                                                                                              // 14\n  });                                                                                                                // 15\n                                                                                                                     // 16\n  return value;                                                                                                      // 17\n};                                                                                                                   // 18\n                                                                                                                     // 19\nvar updateHandle = function (set_context) {                                                                          // 20\n    var context = set_context;                                                                                       // 21\n    if (context.server) {                                                                                            // 22\n        var newHandle;                                                                                               // 23\n                                                                                                                     // 24\n        // Could use the table id, but this way we can wait to change the                                            // 25\n        // page until the new data is ready, so it doesn't move around                                               // 26\n        // while rows are added and removed                                                                          // 27\n        var publicationId = _.uniqueId();                                                                            // 28\n        var newPublishedRows = new Mongo.Collection('reactive-table-rows-' + publicationId);                         // 29\n        context.nextPublicationId.set(publicationId);                                                                // 30\n                                                                                                                     // 31\n        var rowsPerPage = context.rowsPerPage.get();                                                                 // 32\n        var currentPage = context.currentPage.get();                                                                 // 33\n        var currentIndex = currentPage * rowsPerPage;                                                                // 34\n                                                                                                                     // 35\n        var options = {                                                                                              // 36\n            skip: currentIndex,                                                                                      // 37\n            limit: rowsPerPage,                                                                                      // 38\n            sort: getSortQuery(context.fields, context.multiColumnSort)                                              // 39\n        };                                                                                                           // 40\n                                                                                                                     // 41\n        var filters = context.filters.get();                                                                         // 42\n                                                                                                                     // 43\n        var onReady = function () {                                                                                  // 44\n            if (publicationId === context.nextPublicationId.get()) {                                                 // 45\n                context.ready.set(true);                                                                             // 46\n                context.publicationId.set(publicationId);                                                            // 47\n                context.publishedRows = newPublishedRows;                                                            // 48\n                var oldHandle = context.handle;                                                                      // 49\n                context.handle = newHandle;                                                                          // 50\n                                                                                                                     // 51\n                if (oldHandle) {                                                                                     // 52\n                    oldHandle.stop();                                                                                // 53\n                }                                                                                                    // 54\n            } else {                                                                                                 // 55\n                // another handle was created after this one                                                         // 56\n                newHandle.stop();                                                                                    // 57\n            }                                                                                                        // 58\n        };                                                                                                           // 59\n        var onError = function (error) {                                                                             // 60\n            console.log(\"ReactiveTable subscription error: \" + error);                                               // 61\n        };                                                                                                           // 62\n        newHandle = Meteor.subscribe(                                                                                // 63\n            \"reactive-table-\" + context.collection,                                                                  // 64\n            publicationId,                                                                                           // 65\n            getFilterStrings(filters),                                                                               // 66\n            getFilterFields(filters, context.fields),                                                                // 67\n            options,                                                                                                 // 68\n            context.rowsPerPage.get(),                                                                               // 69\n            {onReady: onReady, onError: onError}                                                                     // 70\n        );                                                                                                           // 71\n    }                                                                                                                // 72\n};                                                                                                                   // 73\n                                                                                                                     // 74\n                                                                                                                     // 75\nvar getDefaultFalseSetting = function (key, templateData) {                                                          // 76\n    if (!_.isUndefined(templateData[key]) &&                                                                         // 77\n        templateData[key]) {                                                                                         // 78\n        return true;                                                                                                 // 79\n    }                                                                                                                // 80\n    if (!_.isUndefined(templateData.settings) &&                                                                     // 81\n        !_.isUndefined(templateData.settings[key]) &&                                                                // 82\n        templateData.settings[key]) {                                                                                // 83\n        return true;                                                                                                 // 84\n    }                                                                                                                // 85\n    return false;                                                                                                    // 86\n};                                                                                                                   // 87\n                                                                                                                     // 88\nvar getDefaultTrueSetting = function (key, templateData) {                                                           // 89\n    if (!_.isUndefined(templateData[key]) &&                                                                         // 90\n        !templateData[key]) {                                                                                        // 91\n        return false;                                                                                                // 92\n    }                                                                                                                // 93\n    if (!_.isUndefined(templateData.settings) &&                                                                     // 94\n        !_.isUndefined(templateData.settings[key]) &&                                                                // 95\n        !templateData.settings[key]) {                                                                               // 96\n        return false;                                                                                                // 97\n    }                                                                                                                // 98\n    return true;                                                                                                     // 99\n};                                                                                                                   // 100\n                                                                                                                     // 101\n                                                                                                                     // 102\n                                                                                                                     // 103\nvar setup = function () {                                                                                            // 104\n    var context = {};                                                                                                // 105\n    var oldContext = this.context || {};                                                                             // 106\n    context.templateData = this.data;                                                                                // 107\n    this.data.settings = this.data.settings || {};                                                                   // 108\n    var collection = this.data.collection || this.data.settings.collection || this.data;                             // 109\n                                                                                                                     // 110\n    if (!(collection instanceof Mongo.Collection)) {                                                                 // 111\n        if (_.isArray(collection)) {                                                                                 // 112\n            // collection is an array                                                                                // 113\n            // create a new collection from the data                                                                 // 114\n            var data = collection;                                                                                   // 115\n            collection = new Mongo.Collection(null);                                                                 // 116\n            _.each(data, function (doc) {                                                                            // 117\n                collection.insert(doc);                                                                              // 118\n            });                                                                                                      // 119\n        } else if (_.isFunction(collection.fetch)) {                                                                 // 120\n            // collection is a cursor                                                                                // 121\n            // create a new collection that will reactively update                                                   // 122\n            var cursor = collection;                                                                                 // 123\n            collection = new Mongo.Collection(null);                                                                 // 124\n                                                                                                                     // 125\n            // copy over transforms from collection-helper package                                                   // 126\n            collection._transform = cursor._transform;                                                               // 127\n            collection._name = cursor.collection._name;                                                              // 128\n                                                                                                                     // 129\n            var addedCallback = function (doc) {                                                                     // 130\n                collection.insert(doc);                                                                              // 131\n            };                                                                                                       // 132\n            var changedCallback = function (doc, oldDoc) {                                                           // 133\n                collection.update(oldDoc._id, doc);                                                                  // 134\n            };                                                                                                       // 135\n            var removedCallback = function (oldDoc) {                                                                // 136\n                collection.remove(oldDoc._id);                                                                       // 137\n            };                                                                                                       // 138\n            cursor.observe({added: addedCallback, changed: changedCallback, removed: removedCallback});              // 139\n        } else if (_.isString(collection)) {                                                                         // 140\n            // server side publication                                                                               // 141\n            context.server = true;                                                                                   // 142\n            context.publicationId = new ReactiveVar();                                                               // 143\n            context.nextPublicationId = new ReactiveVar();                                                           // 144\n            context.publishedRows = new Mongo.Collection(null);                                                      // 145\n        } else {                                                                                                     // 146\n            console.error(\"reactiveTable error: argument is not an instance of Mongo.Collection, a cursor, or an array\");\n            collection = new Mongo.Collection(null);                                                                 // 148\n        }                                                                                                            // 149\n    }                                                                                                                // 150\n    context.collection = collection;                                                                                 // 151\n                                                                                                                     // 152\n    context.multiColumnSort = getDefaultTrueSetting('multiColumnSort', this.data);                                   // 153\n                                                                                                                     // 154\n    var fields = this.data.fields || this.data.settings.fields || {};                                                // 155\n    if (_.keys(fields).length < 1 ||                                                                                 // 156\n        (_.keys(fields).length === 1 &&                                                                              // 157\n         _.keys(fields)[0] === 'hash')) {                                                                            // 158\n                                                                                                                     // 159\n        if (context.server) {                                                                                        // 160\n            console.error(\"reactiveTable error: fields option is required with server-side publications\");           // 161\n        } else {                                                                                                     // 162\n            fields = _.without(_.keys(collection.findOne() || {}), '_id');                                           // 163\n            if (fields.length < 1) {                                                                                 // 164\n                console.error(\"reactiveTable error: Couldn't get fields from an item in the collection on load, so there are no columns to display. Provide the fields option or ensure that the collection has at least one item and the subscription is ready when the table renders.\");\n            }                                                                                                        // 166\n        }                                                                                                            // 167\n    }                                                                                                                // 168\n                                                                                                                     // 169\n    var fieldIdsArePresentAndUnique = function (fields) {                                                            // 170\n        var uniqueFieldIds = _.chain(fields)                                                                         // 171\n            .filter(function (field) {                                                                               // 172\n                return !_.isUndefined(field.fieldId)                                                                 // 173\n            })                                                                                                       // 174\n            .map(function (field) {                                                                                  // 175\n                return field.fieldId;                                                                                // 176\n            })                                                                                                       // 177\n            .uniq()                                                                                                  // 178\n            .value();                                                                                                // 179\n        return uniqueFieldIds.length === fields.length;                                                              // 180\n    };                                                                                                               // 181\n                                                                                                                     // 182\n    // If at least one field specifies a fieldId, all fields must specify a                                          // 183\n    // fieldId with a unique value                                                                                   // 184\n    if (_.find(fields, function (field) {                                                                            // 185\n        return !_.isUndefined(field.fieldId)                                                                         // 186\n        }) && !fieldIdsArePresentAndUnique(fields)) {                                                                // 187\n        console.error(\"reactiveTable error: all fields must have a unique-valued fieldId if at least one has a fieldId attribute\");\n        fields = [];                                                                                                 // 189\n    }                                                                                                                // 190\n                                                                                                                     // 191\n    var normalizeField = function (field, i) {                                                                       // 192\n        if (typeof field === 'string') {                                                                             // 193\n            field = {key: field, label: field};                                                                      // 194\n        }                                                                                                            // 195\n        if (!_.has(field, 'fieldId')) {                                                                              // 196\n            // Default fieldId to index in fields array if not present                                               // 197\n            field.fieldId = i.toString();                                                                            // 198\n        }                                                                                                            // 199\n        if (!_.has(field, 'key')) {                                                                                  // 200\n            field.key = '';                                                                                          // 201\n        }                                                                                                            // 202\n        oldField = _.find(oldContext.fields, function (oldField) {                                                   // 203\n            return oldField.fieldId === field.fieldId;                                                               // 204\n        });                                                                                                          // 205\n        normalizeSort(field, oldField);                                                                              // 206\n        return field;                                                                                                // 207\n    };                                                                                                               // 208\n                                                                                                                     // 209\n    fields = _.map(fields, normalizeField);                                                                          // 210\n                                                                                                                     // 211\n    context.fields = fields;                                                                                         // 212\n                                                                                                                     // 213\n    var visibleFields = [];                                                                                          // 214\n    _.each(fields, function (field, i) {                                                                             // 215\n        visibleFields.push({fieldId:field.fieldId, isVisible: getDefaultFieldVisibility(field)});                    // 216\n    });                                                                                                              // 217\n    context.visibleFields = (!_.isUndefined(oldContext.visibleFields) && !_.isEmpty(oldContext.visibleFields)) ? oldContext.visibleFields : new ReactiveVar(visibleFields);\n                                                                                                                     // 219\n                                                                                                                     // 220\n    var rowClass = this.data.rowClass || this.data.settings.rowClass || function() {return '';};                     // 221\n    if (typeof rowClass === 'string') {                                                                              // 222\n        var tmp = rowClass;                                                                                          // 223\n        rowClass = function(obj) { return tmp; };                                                                    // 224\n    }                                                                                                                // 225\n    context.rowClass = rowClass;                                                                                     // 226\n                                                                                                                     // 227\n    context.class = this.data.class || this.data.settings.class || 'table table-striped table-hover col-sm-12';      // 228\n    context.id = this.data.id || this.data.settings.id || _.uniqueId('reactive-table-');                             // 229\n                                                                                                                     // 230\n    context.showNavigation = this.data.showNavigation || this.data.settings.showNavigation || 'always';              // 231\n    context.showNavigationRowsPerPage = getDefaultTrueSetting('showNavigationRowsPerPage', this.data);               // 232\n    context.showRowCount = getDefaultFalseSetting('showRowCount', this.data)                                         // 233\n                                                                                                                     // 234\n    var rowsPerPage;                                                                                                 // 235\n    if (!_.isUndefined(oldContext.rowsPerPage)) {                                                                    // 236\n        rowsPerPage = oldContext.rowsPerPage;                                                                        // 237\n    } else if (this.data.rowsPerPage && this.data.rowsPerPage instanceof ReactiveVar) {                              // 238\n        rowsPerPage = this.data.rowsPerPage;                                                                         // 239\n    } else if (this.data.settings.rowsPerPage && this.data.settings.rowsPerPage instanceof ReactiveVar) {            // 240\n        rowsPerPage = this.data.settings.rowsPerPage;                                                                // 241\n    } else {                                                                                                         // 242\n        rowsPerPage = new ReactiveVar(this.data.rowsPerPage || this.data.settings.rowsPerPage || 10);                // 243\n    }                                                                                                                // 244\n    context.rowsPerPage = rowsPerPage;                                                                               // 245\n                                                                                                                     // 246\n    var currentPage;                                                                                                 // 247\n    if (!_.isUndefined(oldContext.currentPage)) {                                                                    // 248\n        currentPage = oldContext.currentPage;                                                                        // 249\n    } else if (this.data.currentPage && this.data.currentPage instanceof ReactiveVar) {                              // 250\n        currentPage = this.data.currentPage;                                                                         // 251\n    } else if (this.data.settings.currentPage && this.data.settings.currentPage instanceof ReactiveVar) {            // 252\n        currentPage = this.data.settings.currentPage;                                                                // 253\n    } else {                                                                                                         // 254\n        currentPage = new ReactiveVar(0);                                                                            // 255\n    }                                                                                                                // 256\n    context.currentPage = currentPage;                                                                               // 257\n                                                                                                                     // 258\n    var filters = this.data.filters || this.data.settings.filters || [];                                             // 259\n    if (_.isEmpty(filters)) {                                                                                        // 260\n      context.showFilter = getDefaultTrueSetting('showFilter', this.data);                                           // 261\n    } else {                                                                                                         // 262\n      context.showFilter = getDefaultFalseSetting('showFilter', this.data);                                          // 263\n    }                                                                                                                // 264\n    if (context.showFilter) {                                                                                        // 265\n      filters.push(context.id + '-filter');                                                                          // 266\n    }                                                                                                                // 267\n    context.filters = new ReactiveVar(filters);                                                                      // 268\n                                                                                                                     // 269\n    dependOnFilters(context.filters.get(), function () {                                                             // 270\n      if (context.reactiveTableSetup) {                                                                              // 271\n        context.currentPage.set(0);                                                                                  // 272\n        updateHandle(context);                                                                                       // 273\n      }                                                                                                              // 274\n    });                                                                                                              // 275\n                                                                                                                     // 276\n    context.showColumnToggles = getDefaultFalseSetting('showColumnToggles', this.data);                              // 277\n                                                                                                                     // 278\n    if (_.isUndefined(this.data.useFontAwesome)) {                                                                   // 279\n        if (!_.isUndefined(this.data.settings.useFontAwesome)) {                                                     // 280\n            context.useFontAwesome = this.data.settings.useFontAwesome;                                              // 281\n        } else if (!_.isUndefined(Package['fortawesome:fontawesome'])) {                                             // 282\n            context.useFontAwesome = true;                                                                           // 283\n        } else {                                                                                                     // 284\n            context.useFontAwesome = false;                                                                          // 285\n        }                                                                                                            // 286\n    } else {                                                                                                         // 287\n        context.useFontAwesome = this.data.useFontAwesome;                                                           // 288\n    }                                                                                                                // 289\n    context.noDataTmpl = this.data.noDataTmpl || this.data.settings.noDataTmpl;                                      // 290\n    context.enableRegex = getDefaultFalseSetting('enableRegex', this.data);                                          // 291\n    context.filterOperator = this.data.filterOperator || this.data.settings.filterOperator || '$and';                // 292\n                                                                                                                     // 293\n    var ready;                                                                                                       // 294\n    if (!_.isUndefined(oldContext.ready)) {                                                                          // 295\n        ready = oldContext.ready;                                                                                    // 296\n    } else if (this.data.ready && this.data.ready instanceof ReactiveVar) {                                          // 297\n        ready = this.data.ready;                                                                                     // 298\n    } else if (this.data.settings.ready && this.data.settings.ready instanceof ReactiveVar) {                        // 299\n        ready = this.data.settings.ready;                                                                            // 300\n    } else {                                                                                                         // 301\n        ready = new ReactiveVar(true);                                                                               // 302\n    }                                                                                                                // 303\n    context.ready = ready;                                                                                           // 304\n                                                                                                                     // 305\n    if (context.server) {                                                                                            // 306\n        context.ready.set(false);                                                                                    // 307\n        updateHandle(context);                                                                                       // 308\n    }                                                                                                                // 309\n                                                                                                                     // 310\n    context.reactiveTableSetup = true;                                                                               // 311\n                                                                                                                     // 312\n    this.context = context;                                                                                          // 313\n};                                                                                                                   // 314\n                                                                                                                     // 315\nvar getDefaultFieldVisibility = function (field) {                                                                   // 316\n    if (field.isVisible && field.isVisible instanceof ReactiveVar) {                                                 // 317\n        return field.isVisible;                                                                                      // 318\n    }                                                                                                                // 319\n    return new ReactiveVar(!field.hidden || (_.isFunction(field.hidden) && !field.hidden()));                        // 320\n}                                                                                                                    // 321\n                                                                                                                     // 322\nvar getRowCount = function () {                                                                                      // 323\n    if (this.server) {                                                                                               // 324\n        var count = ReactiveTableCounts.findOne(this.publicationId.get());                                           // 325\n        return (count ? count.count : 0);                                                                            // 326\n    } else {                                                                                                         // 327\n        var filterQuery = getFilterQuery(getFilterStrings(this.filters.get()), getFilterFields(this.filters.get(), this.fields), {enableRegex: this.enableRegex, filterOperator: this.filterOperator});\n        return this.collection.find(filterQuery).count();                                                            // 329\n    }                                                                                                                // 330\n};                                                                                                                   // 331\n                                                                                                                     // 332\nvar getPageCount = function () {                                                                                     // 333\n    var count = getRowCount.call(this);                                                                              // 334\n    var rowsPerPage = this.rowsPerPage.get();                                                                        // 335\n    return Math.ceil(count / rowsPerPage);                                                                           // 336\n};                                                                                                                   // 337\n                                                                                                                     // 338\nTemplate.reactiveTable.onCreated(function() {                                                                        // 339\n   this.updateHandle = _.debounce(updateHandle, 200);                                                                // 340\n                                                                                                                     // 341\n   var rowsPerPage = this.data.rowsPerPage || (this.data.settings && this.data.settings.rowsPerPage);                // 342\n   var currentPage = this.data.currentPage || (this.data.settings && this.data.settings.currentPage);                // 343\n   var fields = this.data.fields || (this.data.settings && this.data.settings.fields) || [];                         // 344\n                                                                                                                     // 345\n   var template = this;                                                                                              // 346\n   Tracker.autorun(function(c) {                                                                                     // 347\n     if (rowsPerPage instanceof ReactiveVar) {                                                                       // 348\n       rowsPerPage.dep.depend();                                                                                     // 349\n     }                                                                                                               // 350\n     if (currentPage instanceof ReactiveVar) {                                                                       // 351\n       currentPage.dep.depend();                                                                                     // 352\n     }                                                                                                               // 353\n     _.each(fields, function (field) {                                                                               // 354\n       if (field.sortOrder && field.sortOrder instanceof ReactiveVar) {                                              // 355\n         field.sortOrder.dep.depend();                                                                               // 356\n       }                                                                                                             // 357\n       if (field.sortDirection && field.sortDirection instanceof ReactiveVar) {                                      // 358\n         field.sortDirection.dep.depend();                                                                           // 359\n       }                                                                                                             // 360\n     });                                                                                                             // 361\n     if (template.context) {                                                                                         // 362\n       template.updateHandle(template.context);                                                                      // 363\n     }                                                                                                               // 364\n   });                                                                                                               // 365\n});                                                                                                                  // 366\n                                                                                                                     // 367\nTemplate.reactiveTable.onDestroyed(function() {                                                                      // 368\n  if (this.context.server && this.context.handle) {                                                                  // 369\n    this.context.handle.stop();                                                                                      // 370\n  }                                                                                                                  // 371\n});                                                                                                                  // 372\n                                                                                                                     // 373\nTemplate.reactiveTable.helpers({                                                                                     // 374\n    'context': function () {                                                                                         // 375\n        if (!Template.instance().context ||                                                                          // 376\n            !_.isEqual(this, Template.instance().context.templateData)) {                                            // 377\n            setup.call(Template.instance());                                                                         // 378\n        }                                                                                                            // 379\n        return Template.instance().context;                                                                          // 380\n    },                                                                                                               // 381\n                                                                                                                     // 382\n    'ready' : function () {                                                                                          // 383\n        return this.ready.get();                                                                                     // 384\n    },                                                                                                               // 385\n                                                                                                                     // 386\n    'getFilterId': function () {                                                                                     // 387\n        return this.id + '-filter';                                                                                  // 388\n    },                                                                                                               // 389\n                                                                                                                     // 390\n    'getField': function (object) {                                                                                  // 391\n        var fn = this.fn || function (value) { return value; };                                                      // 392\n        var key = this.key;                                                                                          // 393\n        var value = get(object, key);                                                                                // 394\n        return fn(value, object, key);                                                                               // 395\n    },                                                                                                               // 396\n                                                                                                                     // 397\n    'getFieldIndex': function () {                                                                                   // 398\n        return _.indexOf(Template.parentData(1).fields, this);                                                       // 399\n    },                                                                                                               // 400\n                                                                                                                     // 401\n    'getFieldFieldId': function () {                                                                                 // 402\n        return this.fieldId;                                                                                         // 403\n    },                                                                                                               // 404\n                                                                                                                     // 405\n    'getKey': function () {                                                                                          // 406\n        return this.key;                                                                                             // 407\n    },                                                                                                               // 408\n                                                                                                                     // 409\n    'getHeaderClass': function () {                                                                                  // 410\n        if (_.isUndefined(this.headerClass)) {                                                                       // 411\n            return this.key;                                                                                         // 412\n        }                                                                                                            // 413\n        var css;                                                                                                     // 414\n        if (_.isFunction(this.headerClass)) {                                                                        // 415\n            css = this.headerClass();                                                                                // 416\n        } else {                                                                                                     // 417\n            css = this.headerClass;                                                                                  // 418\n        }                                                                                                            // 419\n        return css;                                                                                                  // 420\n    },                                                                                                               // 421\n                                                                                                                     // 422\n    'getCellClass': function (object) {                                                                              // 423\n        if (_.isUndefined(this.cellClass)) {                                                                         // 424\n            return this.key;                                                                                         // 425\n        }                                                                                                            // 426\n        var css;                                                                                                     // 427\n        if (_.isFunction(this.cellClass)) {                                                                          // 428\n            var value = get(object, this.key);                                                                       // 429\n            css = this.cellClass(value, object);                                                                     // 430\n        } else {                                                                                                     // 431\n            css = this.cellClass;                                                                                    // 432\n        }                                                                                                            // 433\n        return css;                                                                                                  // 434\n    },                                                                                                               // 435\n                                                                                                                     // 436\n    'labelIsTemplate': function () {                                                                                 // 437\n        return this.label && _.isObject(this.label) && this.label instanceof Blaze.Template;                         // 438\n    },                                                                                                               // 439\n                                                                                                                     // 440\n    'getLabel': function () {                                                                                        // 441\n        return _.isString(this.label) ? this.label : this.label();                                                   // 442\n    },                                                                                                               // 443\n                                                                                                                     // 444\n    'isPrimarySortField': function () {                                                                              // 445\n        var parentData = Template.parentData(1);                                                                     // 446\n        var primarySortField = getPrimarySortField(parentData.fields, parentData.multiColumnSort);                   // 447\n        return primarySortField && primarySortField.fieldId === this.fieldId;                                        // 448\n    },                                                                                                               // 449\n                                                                                                                     // 450\n    'isSortable': function () {                                                                                      // 451\n        return (this.sortable === undefined) ? true : this.sortable;                                                 // 452\n    },                                                                                                               // 453\n                                                                                                                     // 454\n    'isVisible': function () {                                                                                       // 455\n        var self = this; // is a field object                                                                        // 456\n        var topLevelData;                                                                                            // 457\n        if (Template.parentData(2) && Template.parentData(2).reactiveTableSetup) {                                   // 458\n          topLevelData = Template.parentData(2);                                                                     // 459\n        } else {                                                                                                     // 460\n          topLevelData = Template.parentData(1);                                                                     // 461\n        }                                                                                                            // 462\n        var visibleFields = topLevelData.visibleFields.get();                                                        // 463\n        var fields = topLevelData.fields;                                                                            // 464\n                                                                                                                     // 465\n        var visibleField = _.findWhere(visibleFields, {fieldId: self.fieldId});                                      // 466\n        if (visibleField) {                                                                                          // 467\n            return visibleField.isVisible.get();                                                                     // 468\n        } else {                                                                                                     // 469\n            // Add field to visibleFields list                                                                       // 470\n            var _isVisible = getDefaultFieldVisibility(self);                                                        // 471\n            visibleFields.push({fieldId:self.fieldId, isVisible:_isVisible});                                        // 472\n            topLevelData.visibleFields.set(visibleFields);                                                           // 473\n            return _isVisible.get();                                                                                 // 474\n        }                                                                                                            // 475\n    },                                                                                                               // 476\n                                                                                                                     // 477\n    'isAscending' : function () {                                                                                    // 478\n        var sortDirection = this.sortDirection.get();                                                                // 479\n        return (sortDirection === 1);                                                                                // 480\n    },                                                                                                               // 481\n                                                                                                                     // 482\n    'sortedRows': function () {                                                                                      // 483\n        if (this.server) {                                                                                           // 484\n            return this.publishedRows.find({                                                                         // 485\n              \"reactive-table-id\": this.publicationId.get()                                                          // 486\n            }, {                                                                                                     // 487\n              sort: {                                                                                                // 488\n                \"reactive-table-sort\": 1                                                                             // 489\n              }                                                                                                      // 490\n            });                                                                                                      // 491\n        } else  {                                                                                                    // 492\n            var sortByValue = _.all(getSortedFields(this.fields, this.multiColumnSort), function (field) {           // 493\n                return field.sortByValue || !field.fn;                                                               // 494\n            });                                                                                                      // 495\n            var filterQuery = getFilterQuery(getFilterStrings(this.filters.get()), getFilterFields(this.filters.get(), this.fields), {enableRegex: this.enableRegex, filterOperator: this.filterOperator});\n                                                                                                                     // 497\n            var limit = this.rowsPerPage.get();                                                                      // 498\n            var currentPage = this.currentPage.get();                                                                // 499\n            var skip = currentPage * limit;                                                                          // 500\n                                                                                                                     // 501\n            if (sortByValue) {                                                                                       // 502\n                                                                                                                     // 503\n                var sortQuery = getSortQuery(this.fields, this.multiColumnSort);                                     // 504\n                return this.collection.find(filterQuery, {                                                           // 505\n                    sort: sortQuery,                                                                                 // 506\n                    skip: skip,                                                                                      // 507\n                    limit: limit                                                                                     // 508\n                });                                                                                                  // 509\n                                                                                                                     // 510\n            } else {                                                                                                 // 511\n                                                                                                                     // 512\n                var rows = this.collection.find(filterQuery).fetch();                                                // 513\n                sortedRows = sortWithFunctions(rows, this.fields, this.multiColumnSort);                             // 514\n                return sortedRows.slice(skip, skip + limit);                                                         // 515\n                                                                                                                     // 516\n            }                                                                                                        // 517\n        }                                                                                                            // 518\n    },                                                                                                               // 519\n                                                                                                                     // 520\n    'noData': function () {                                                                                          // 521\n        var pageCount = getPageCount.call(this);                                                                     // 522\n        return (pageCount === 0) && this.noDataTmpl;                                                                 // 523\n    },                                                                                                               // 524\n                                                                                                                     // 525\n    'getPageCount' : getPageCount,                                                                                   // 526\n                                                                                                                     // 527\n    'getRowsPerPage' : function () {                                                                                 // 528\n        return this.rowsPerPage.get();                                                                               // 529\n    },                                                                                                               // 530\n                                                                                                                     // 531\n    'getCurrentPage' : function () {                                                                                 // 532\n        return 1 + this.currentPage.get();                                                                           // 533\n    },                                                                                                               // 534\n                                                                                                                     // 535\n    'isntFirstPage' : function () {                                                                                  // 536\n        return this.currentPage.get() > 0;                                                                           // 537\n    },                                                                                                               // 538\n                                                                                                                     // 539\n    'isntLastPage' : function () {                                                                                   // 540\n        var currentPage = 1 + this.currentPage.get();                                                                // 541\n        var pageCount = getPageCount.call(this);                                                                     // 542\n        return currentPage < pageCount;                                                                              // 543\n    },                                                                                                               // 544\n                                                                                                                     // 545\n    'showNavigation' : function () {                                                                                 // 546\n        if (this.showNavigation === 'always') return true;                                                           // 547\n        if (this.showNavigation === 'never') return false;                                                           // 548\n        return getPageCount.call(this) > 1;                                                                          // 549\n    },                                                                                                               // 550\n    'getRowCount': getRowCount                                                                                       // 551\n});                                                                                                                  // 552\n                                                                                                                     // 553\nTemplate.reactiveTable.events({                                                                                      // 554\n    'click .reactive-table .sortable': function (event) {                                                            // 555\n        var template = Template.instance();                                                                          // 556\n        var target = $(event.currentTarget);                                                                         // 557\n        var sortFieldId = target.attr('fieldid');                                                                    // 558\n        changePrimarySort(sortFieldId, template.context.fields, template.multiColumnSort);                           // 559\n        template.updateHandle(template.context);                                                                     // 560\n    },                                                                                                               // 561\n                                                                                                                     // 562\n    'click .reactive-table-columns-dropdown li': function (event) {                                                  // 563\n        var template = Template.instance();                                                                          // 564\n        var target = $(event.currentTarget);                                                                         // 565\n        var fieldId = target.find('input').attr('data-fieldid');                                                     // 566\n        var visibleFields = template.context.visibleFields.get();                                                    // 567\n        var visibleField = _.findWhere(visibleFields, {fieldId: fieldId});                                           // 568\n        if (visibleField) {                                                                                          // 569\n            // Toggle visibility                                                                                     // 570\n            visibleField.isVisible.set(!visibleField.isVisible.get());                                               // 571\n            template.context.visibleFields.set(visibleFields);                                                       // 572\n        }                                                                                                            // 573\n    },                                                                                                               // 574\n                                                                                                                     // 575\n    'change .reactive-table-navigation .rows-per-page input': function (event) {                                     // 576\n        var rowsPerPage = Math.max(~~$(event.target).val(), 1);                                                      // 577\n        var template = Template.instance();                                                                          // 578\n        template.context.rowsPerPage.set(rowsPerPage);                                                               // 579\n        $(event.target).val(rowsPerPage);                                                                            // 580\n                                                                                                                     // 581\n        var currentPage = template.context.currentPage.get() + 1;                                                    // 582\n        var pageCount = getPageCount.call(this);                                                                     // 583\n        if (currentPage > pageCount) {                                                                               // 584\n          template.context.currentPage.set(pageCount - 1);                                                           // 585\n        }                                                                                                            // 586\n        template.updateHandle(template.context);                                                                     // 587\n    },                                                                                                               // 588\n                                                                                                                     // 589\n    'change .reactive-table-navigation .page-number input': function (event) {                                       // 590\n        var currentPage = Math.max(~~$(event.target).val(), 1);                                                      // 591\n        var pageCount = getPageCount.call(this);                                                                     // 592\n        if (currentPage > pageCount) {                                                                               // 593\n          currentPage = pageCount;                                                                                   // 594\n        }                                                                                                            // 595\n        if (currentPage < 0) {                                                                                       // 596\n          currentPage = 1;                                                                                           // 597\n        }                                                                                                            // 598\n        var template = Template.instance();                                                                          // 599\n        template.context.currentPage.set(currentPage - 1);                                                           // 600\n        $(event.target).val(currentPage);                                                                            // 601\n        template.updateHandle(template.context);                                                                     // 602\n    },                                                                                                               // 603\n                                                                                                                     // 604\n    'click .reactive-table-navigation .previous-page': function (event) {                                            // 605\n        var template = Template.instance();                                                                          // 606\n        var currentPage = template.context.currentPage.get();                                                        // 607\n        template.context.currentPage.set(currentPage - 1);                                                           // 608\n        template.updateHandle(template.context);                                                                     // 609\n    },                                                                                                               // 610\n                                                                                                                     // 611\n    'click .reactive-table-navigation .next-page': function (event) {                                                // 612\n        var template = Template.instance();                                                                          // 613\n        var currentPage = template.context.currentPage.get();                                                        // 614\n        template.context.currentPage.set(currentPage + 1);                                                           // 615\n        template.updateHandle(template.context);                                                                     // 616\n    }                                                                                                                // 617\n});                                                                                                                  // 618\n                                                                                                                     // 619\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/aslagle_reactive-table/lib/sort.js                                                                       //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nnormalizeSort = function (field, oldField) {                                                                         // 1\n  // preserve user sort settings                                                                                     // 2\n  if (oldField && _.has(oldField, 'sortOrder')) {                                                                    // 3\n    field.sortOrder = oldField.sortOrder;                                                                            // 4\n  }                                                                                                                  // 5\n  if (oldField && _.has(oldField, 'sortDirection')) {                                                                // 6\n    field.sortDirection = oldField.sortDirection;                                                                    // 7\n  }                                                                                                                  // 8\n                                                                                                                     // 9\n  // backwards-compatibility                                                                                         // 10\n  if (!_.has(field, 'sortOrder') && _.has(field, 'sort')) {                                                          // 11\n    console.warn('reactiveTable warning: The \"sort\" option for fields is deprecated');                               // 12\n    field.sortOrder = 0;                                                                                             // 13\n    field.sortDirection = field.sort;                                                                                // 14\n  }                                                                                                                  // 15\n                                                                                                                     // 16\n                                                                                                                     // 17\n  var sortOrder;                                                                                                     // 18\n                                                                                                                     // 19\n  if (!_.has(field, 'sortOrder')) {                                                                                  // 20\n    sortOrder = Infinity;                                                                                            // 21\n    field.sortOrder = new ReactiveVar();                                                                             // 22\n  } else if (field.sortOrder instanceof ReactiveVar) {                                                               // 23\n    sortOrder = field.sortOrder.get()                                                                                // 24\n  } else {                                                                                                           // 25\n    sortOrder = field.sortOrder;                                                                                     // 26\n    field.sortOrder = new ReactiveVar();                                                                             // 27\n  }                                                                                                                  // 28\n                                                                                                                     // 29\n  if (!_.isNumber(sortOrder) || sortOrder < 0) {                                                                     // 30\n    console.error('reactiveTable error - sortOrder must be a postive number: ' + sortOrder);                         // 31\n    sortOrder = Infinity;                                                                                            // 32\n  }                                                                                                                  // 33\n  field.sortOrder.set(sortOrder);                                                                                    // 34\n                                                                                                                     // 35\n  var sortDirection;                                                                                                 // 36\n                                                                                                                     // 37\n  if (!_.has(field, 'sortDirection')) {                                                                              // 38\n    sortDirection = 1;                                                                                               // 39\n    field.sortDirection = new ReactiveVar()                                                                          // 40\n  } else if (field.sortDirection instanceof ReactiveVar) {                                                           // 41\n    sortDirection = field.sortDirection.get();                                                                       // 42\n  } else {                                                                                                           // 43\n    sortDirection = field.sortDirection;                                                                             // 44\n    field.sortDirection = new ReactiveVar();                                                                         // 45\n  }                                                                                                                  // 46\n                                                                                                                     // 47\n  if (sortDirection === 'desc' || sortDirection === 'descending' || sortDirection === -1) {                          // 48\n    sortDirection = -1;                                                                                              // 49\n  } else if (sortDirection) {                                                                                        // 50\n    sortDirection = 1;                                                                                               // 51\n  }                                                                                                                  // 52\n  field.sortDirection.set(sortDirection);                                                                            // 53\n};                                                                                                                   // 54\n                                                                                                                     // 55\ngetSortedFields = function (fields, multiColumnSort) {                                                               // 56\n  var filteredFields = _.filter(fields, function (field) {                                                           // 57\n    return field.sortOrder.get() < Infinity;                                                                         // 58\n  });                                                                                                                // 59\n  if (!filteredFields.length) {                                                                                      // 60\n    var firstSortableField = _.find(fields, function (field) {                                                       // 61\n      return _.isUndefined(field.sortable) || field.sortable !== false;                                              // 62\n    });                                                                                                              // 63\n    if (firstSortableField) {                                                                                        // 64\n      filteredFields = [firstSortableField];                                                                         // 65\n    }                                                                                                                // 66\n  }                                                                                                                  // 67\n  var sortedFields = _.sortBy(filteredFields, function (field) {                                                     // 68\n    return field.sortOrder.get();                                                                                    // 69\n  });                                                                                                                // 70\n  return multiColumnSort ? sortedFields : sortedFields.slice(0, 1);                                                  // 71\n}                                                                                                                    // 72\n                                                                                                                     // 73\ngetSortQuery = function (fields, multiColumnSort) {                                                                  // 74\n  var sortedFields = getSortedFields(fields, multiColumnSort);                                                       // 75\n  var sortQuery = {};                                                                                                // 76\n  _.each(sortedFields, function (field) {                                                                            // 77\n    sortQuery[field.key] = field.sortDirection.get();                                                                // 78\n  });                                                                                                                // 79\n  return sortQuery;                                                                                                  // 80\n};                                                                                                                   // 81\n                                                                                                                     // 82\nsortWithFunctions = function (rows, fields, multiColumnSort) {                                                       // 83\n  var sortedFields = getSortedFields(fields, multiColumnSort);                                                       // 84\n  var sortedRows = rows;                                                                                             // 85\n                                                                                                                     // 86\n  _.each(sortedFields.reverse(), function (field) {                                                                  // 87\n    if (field.sortByValue || !field.fn) {                                                                            // 88\n      sortedRows = _.sortBy(sortedRows, field.key);                                                                  // 89\n    } else {                                                                                                         // 90\n      sortedRows = _.sortBy(sortedRows, function (row) {                                                             // 91\n        return field.fn( get( row, field.key ), row );                                                               // 92\n      });                                                                                                            // 93\n    }                                                                                                                // 94\n    if (field.sortDirection.get() === -1) {                                                                          // 95\n      sortedRows.reverse();                                                                                          // 96\n    }                                                                                                                // 97\n  });                                                                                                                // 98\n  return sortedRows;                                                                                                 // 99\n};                                                                                                                   // 100\n                                                                                                                     // 101\ngetPrimarySortField = function (fields, multiColumnSort) {                                                           // 102\n  return getSortedFields(fields, multiColumnSort)[0];                                                                // 103\n};                                                                                                                   // 104\n                                                                                                                     // 105\nchangePrimarySort = function(fieldId, fields, multiColumnSort) {                                                     // 106\n  var primarySortField = getPrimarySortField(fields, multiColumnSort);                                               // 107\n  if (primarySortField && primarySortField.fieldId === fieldId) {                                                    // 108\n    var sortDirection = -1 * primarySortField.sortDirection.get();                                                   // 109\n    primarySortField.sortDirection.set(sortDirection);                                                               // 110\n    primarySortField.sortOrder.set(0);                                                                               // 111\n  } else {                                                                                                           // 112\n    _.each(fields, function (field) {                                                                                // 113\n      if (field.fieldId === fieldId) {                                                                               // 114\n        field.sortOrder.set(0);                                                                                      // 115\n        if (primarySortField) {                                                                                      // 116\n          field.sortDirection.set(primarySortField.sortDirection.get());                                             // 117\n        }                                                                                                            // 118\n      } else {                                                                                                       // 119\n        var sortOrder = 1 + field.sortOrder.get();                                                                   // 120\n        field.sortOrder.set(sortOrder);                                                                              // 121\n      }                                                                                                              // 122\n    });                                                                                                              // 123\n  }                                                                                                                  // 124\n};                                                                                                                   // 125\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/aslagle_reactive-table/lib/filter.js                                                                     //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nvar parseFilterString = function (filterString) {                                                                    // 1\n  var startQuoteRegExp = /^[\\'\\\"]/;                                                                                  // 2\n  var endQuoteRegExp = /[\\'\\\"]$/;                                                                                    // 3\n  var filters = [];                                                                                                  // 4\n  var words = filterString.split(' ');                                                                               // 5\n                                                                                                                     // 6\n  var inQuote = false;                                                                                               // 7\n  var quotedWord = '';                                                                                               // 8\n  _.each(words, function (word) {                                                                                    // 9\n    if (inQuote) {                                                                                                   // 10\n      if (endQuoteRegExp.test(word)) {                                                                               // 11\n        filters.push(quotedWord + ' ' + word.slice(0, word.length - 1));                                             // 12\n        inQuote = false;                                                                                             // 13\n        quotedWord = '';                                                                                             // 14\n      } else {                                                                                                       // 15\n        quotedWord = quotedWord + ' ' + word;                                                                        // 16\n      }                                                                                                              // 17\n    } else if (startQuoteRegExp.test(word)) {                                                                        // 18\n      if (endQuoteRegExp.test(word)) {                                                                               // 19\n        filters.push(word.slice(1, word.length - 1));                                                                // 20\n      } else {                                                                                                       // 21\n        inQuote = true;                                                                                              // 22\n        quotedWord = word.slice(1, word.length);                                                                     // 23\n      }                                                                                                              // 24\n    } else {                                                                                                         // 25\n      filters.push(word);                                                                                            // 26\n    }                                                                                                                // 27\n  });                                                                                                                // 28\n  return filters;                                                                                                    // 29\n};                                                                                                                   // 30\n                                                                                                                     // 31\nvar escapeRegex = function(text) {                                                                                   // 32\n  return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\");                                                           // 33\n};                                                                                                                   // 34\n                                                                                                                     // 35\nvar getFieldMatches = function (field) {                                                                             // 36\n  var fieldMatches = [];                                                                                             // 37\n  var keys = field.split('.');                                                                                       // 38\n  var previousKeys = '';                                                                                             // 39\n  _.each(keys, function (key) {                                                                                      // 40\n    fieldMatches.push(previousKeys + key);                                                                           // 41\n    previousKeys += key + '.';                                                                                       // 42\n  });                                                                                                                // 43\n  return fieldMatches;                                                                                               // 44\n};                                                                                                                   // 45\n                                                                                                                     // 46\ngetFilterQuery = function (filterInputs, filterFields, settings) {                                                   // 47\n  settings = settings || {};                                                                                         // 48\n  if (settings.enableRegex === undefined) {                                                                          // 49\n    settings.enableRegex = false;                                                                                    // 50\n  }                                                                                                                  // 51\n  if (settings.filterOperator === undefined) {                                                                       // 52\n    settings.filterOperator = \"$and\";                                                                                // 53\n  }                                                                                                                  // 54\n  if (settings.fields) {                                                                                             // 55\n    _.each(filterInputs, function (filter, index) {                                                                  // 56\n      if (_.any(settings.fields, function (include) { return include; })) {                                          // 57\n        filterFields[index] = _.filter(filterFields[index], function (field) {                                       // 58\n          return _.any(getFieldMatches(field), function (fieldMatch) {                                               // 59\n            return settings.fields[fieldMatch];                                                                      // 60\n          });                                                                                                        // 61\n        });                                                                                                          // 62\n      } else {                                                                                                       // 63\n        filterFields[index] = _.filter(filterFields[index], function (field) {                                       // 64\n          return _.all(getFieldMatches(field), function (fieldMatch) {                                               // 65\n            return _.isUndefined(settings.fields[fieldMatch]) || settings.fields[fieldMatch];                        // 66\n          });                                                                                                        // 67\n        });                                                                                                          // 68\n      }                                                                                                              // 69\n    });                                                                                                              // 70\n  }                                                                                                                  // 71\n  var numberRegExp = /^\\d+$/;                                                                                        // 72\n  var queryList = [];                                                                                                // 73\n  _.each(filterInputs, function (filter, index) {                                                                    // 74\n    if (filter) {                                                                                                    // 75\n      if (_.isObject(filter)) {                                                                                      // 76\n        var fieldQueries = _.map(filterFields[index], function (field) {                                             // 77\n          var query = {};                                                                                            // 78\n          query[field] = filter;                                                                                     // 79\n          return query;                                                                                              // 80\n        });                                                                                                          // 81\n        if (fieldQueries.length) {                                                                                   // 82\n            queryList.push({'$or': fieldQueries});                                                                   // 83\n          }                                                                                                          // 84\n      } else {                                                                                                       // 85\n        var filters = parseFilterString(filter);                                                                     // 86\n        _.each(filters, function (filterWord) {                                                                      // 87\n          if (settings.enableRegex === false) {                                                                      // 88\n            filterWord = escapeRegex(filterWord);                                                                    // 89\n          }                                                                                                          // 90\n          var filterQueryList = [];                                                                                  // 91\n          _.each(filterFields[index], function (field) {                                                             // 92\n            var filterRegExp = new RegExp(filterWord, 'i');                                                          // 93\n            var query = {};                                                                                          // 94\n            query[field] = filterRegExp;                                                                             // 95\n            filterQueryList.push(query);                                                                             // 96\n                                                                                                                     // 97\n            if (numberRegExp.test(filterWord)) {                                                                     // 98\n              var numberQuery = {};                                                                                  // 99\n              numberQuery[field] = parseInt(filterWord, 10);                                                         // 100\n              filterQueryList.push(numberQuery);                                                                     // 101\n            }                                                                                                        // 102\n                                                                                                                     // 103\n            if (filterWord === \"true\") {                                                                             // 104\n              var boolQuery = {};                                                                                    // 105\n              boolQuery[field] = true;                                                                               // 106\n              filterQueryList.push(boolQuery);                                                                       // 107\n            } else if (filterWord === \"false\") {                                                                     // 108\n              var boolQuery = {};                                                                                    // 109\n              boolQuery[field] = false;                                                                              // 110\n              filterQueryList.push(boolQuery);                                                                       // 111\n            }                                                                                                        // 112\n          });                                                                                                        // 113\n                                                                                                                     // 114\n          if (filterQueryList.length) {                                                                              // 115\n            var filterQuery = {'$or': filterQueryList};                                                              // 116\n            queryList.push(filterQuery);                                                                             // 117\n          }                                                                                                          // 118\n        });                                                                                                          // 119\n      }                                                                                                              // 120\n    }                                                                                                                // 121\n  });                                                                                                                // 122\n                                                                                                                     // 123\n  var query = {};                                                                                                    // 124\n                                                                                                                     // 125\n  if(queryList.length) {                                                                                             // 126\n    query[settings.filterOperator] = queryList;                                                                      // 127\n  }                                                                                                                  // 128\n                                                                                                                     // 129\n  return query;                                                                                                      // 130\n};                                                                                                                   // 131\n                                                                                                                     // 132\nif (Meteor.isClient) {                                                                                               // 133\n  ReactiveTable = ReactiveTable || {};                                                                               // 134\n                                                                                                                     // 135\n  var reactiveTableFilters = {};                                                                                     // 136\n  var callbacks = {};                                                                                                // 137\n                                                                                                                     // 138\n  ReactiveTable.Filter = function (id, fields) {                                                                     // 139\n    if (reactiveTableFilters[id]) {                                                                                  // 140\n        return reactiveTableFilters[id];                                                                             // 141\n    }                                                                                                                // 142\n                                                                                                                     // 143\n    var filter = new ReactiveVar();                                                                                  // 144\n                                                                                                                     // 145\n    this.fields = fields;                                                                                            // 146\n                                                                                                                     // 147\n    this.get = function () {                                                                                         // 148\n      return filter.get() || '';                                                                                     // 149\n    };                                                                                                               // 150\n                                                                                                                     // 151\n    this.set = function (filterString) {                                                                             // 152\n      filter.set(filterString);                                                                                      // 153\n      _.each(callbacks[id], function (callback) {                                                                    // 154\n        callback();                                                                                                  // 155\n      });                                                                                                            // 156\n    };                                                                                                               // 157\n                                                                                                                     // 158\n    reactiveTableFilters[id] = this;                                                                                 // 159\n  };                                                                                                                 // 160\n                                                                                                                     // 161\n  ReactiveTable.clearFilters = function (filterIds) {                                                                // 162\n    _.each(filterIds, function (filterId) {                                                                          // 163\n      if (reactiveTableFilters[filterId]) {                                                                          // 164\n        reactiveTableFilters[filterId].set('');                                                                      // 165\n      }                                                                                                              // 166\n    });                                                                                                              // 167\n  };                                                                                                                 // 168\n                                                                                                                     // 169\n  dependOnFilters = function (filterIds, callback) {                                                                 // 170\n    _.each(filterIds, function (filterId) {                                                                          // 171\n      if (_.isUndefined(callbacks[filterId])) {                                                                      // 172\n        callbacks[filterId] = [];                                                                                    // 173\n      }                                                                                                              // 174\n      callbacks[filterId].push(callback);                                                                            // 175\n    });                                                                                                              // 176\n  };                                                                                                                 // 177\n                                                                                                                     // 178\n  getFilterStrings = function (filterIds) {                                                                          // 179\n    return _.map(filterIds, function (filterId) {                                                                    // 180\n      if (_.isUndefined(reactiveTableFilters[filterId])) {                                                           // 181\n        reactiveTableFilters[filterId] = new ReactiveTable.Filter(filterId);                                         // 182\n      }                                                                                                              // 183\n      return reactiveTableFilters[filterId].get();                                                                   // 184\n    });                                                                                                              // 185\n  };                                                                                                                 // 186\n                                                                                                                     // 187\n  getFilterFields = function (filterIds, allFields) {                                                                // 188\n    return _.map(filterIds, function (filterId) {                                                                    // 189\n      if (_.isUndefined(reactiveTableFilters[filterId])) {                                                           // 190\n        return _.map(allFields, function (field) { return field.key; });                                             // 191\n      } else if (_.isEmpty(reactiveTableFilters[filterId].fields)) {                                                 // 192\n        return _.map(allFields, function (field) { return field.key; });                                             // 193\n      } else {                                                                                                       // 194\n        return reactiveTableFilters[filterId].fields;                                                                // 195\n      }                                                                                                              // 196\n    });                                                                                                              // 197\n  };                                                                                                                 // 198\n                                                                                                                     // 199\n  Template.reactiveTableFilter.helpers({                                                                             // 200\n    'class': function () {                                                                                           // 201\n      return this.class || 'input-group';                                                                            // 202\n    },                                                                                                               // 203\n                                                                                                                     // 204\n    'filter': function () {                                                                                          // 205\n      if (_.isUndefined(reactiveTableFilters[this.id])) {                                                            // 206\n        new ReactiveTable.Filter(this.id, this.fields);                                                              // 207\n      } else if (_.isUndefined(reactiveTableFilters[this.id].fields)) {                                              // 208\n        reactiveTableFilters[this.id].fields = this.fields;                                                          // 209\n      }                                                                                                              // 210\n      return reactiveTableFilters[this.id].get();                                                                    // 211\n    }                                                                                                                // 212\n  });                                                                                                                // 213\n                                                                                                                     // 214\n  var updateFilter = _.debounce(function (template, filterText) {                                                    // 215\n    reactiveTableFilters[template.data.id].set(filterText);                                                          // 216\n  }, 200);                                                                                                           // 217\n                                                                                                                     // 218\n  Template.reactiveTableFilter.events({                                                                              // 219\n    'keyup .reactive-table-input, input .reactive-table-input': function (event) {                                   // 220\n      var template = Template.instance();                                                                            // 221\n      var filterText = $(event.target).val();                                                                        // 222\n      updateFilter(template, filterText);                                                                            // 223\n    },                                                                                                               // 224\n  });                                                                                                                // 225\n}                                                                                                                    // 226\n                                                                                                                     // 227\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['aslagle:reactive-table'] = {}, {\n  ReactiveTable: ReactiveTable\n});\n\n})();\n","servePath":"/packages/aslagle_reactive-table.js"}]