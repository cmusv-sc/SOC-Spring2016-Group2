[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar EJSON = Package.ejson.EJSON;\n\n/* Package-scope variables */\nvar Iron;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                              //\n// packages/iron_core/lib/version_conflict_error.js                                             //\n//                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                //\nif (Package['cmather:iron-core']) {                                                             // 1\n  throw new Error(\"\\n\\n\\\n    Sorry! The cmather:iron-{x} packages were migrated to the new package system with the wrong name, and you have duplicate copies.\\n\\\n    You can see which cmather:iron-{x} packages have been installed by using this command:\\n\\n\\\n    > meteor list\\n\\n\\\n    Can you remove any installed cmather:iron-{x} packages like this:\\\n    \\n\\n\\\n    > meteor remove cmather:iron-core\\n\\\n    > meteor remove cmather:iron-router\\n\\\n    > meteor remove cmather:iron-dynamic-template\\n\\\n    > meteor remove cmather:iron-dynamic-layout\\n\\\n    \\n\\\n    The new packages are named iron:{x}. For example:\\n\\n\\\n    > meteor add iron:router\\n\\n\\\n    Sorry for the hassle, but thank you!\\\n    \\n\\n\\\n  \");                                                                                           // 17\n}                                                                                               // 18\n                                                                                                // 19\n//////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                              //\n// packages/iron_core/lib/iron_core.js                                                          //\n//                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                //\nIron = {};                                                                                      // 1\nIron.utils = {};                                                                                // 2\n                                                                                                // 3\n/**                                                                                             // 4\n * Assert that the given condition is truthy and throw an error if not.                         // 5\n */                                                                                             // 6\n                                                                                                // 7\nIron.utils.assert = function (condition, msg) {                                                 // 8\n  if (!condition)                                                                               // 9\n    throw new Error(msg);                                                                       // 10\n};                                                                                              // 11\n                                                                                                // 12\n/**                                                                                             // 13\n * Print a warning message to the console if the console is defined.                            // 14\n */                                                                                             // 15\nIron.utils.warn = function (condition, msg) {                                                   // 16\n  if (!condition)                                                                               // 17\n    console && console.warn && console.warn(msg);                                               // 18\n};                                                                                              // 19\n                                                                                                // 20\n/**                                                                                             // 21\n * Given a target object and a property name, if the value of that property is                  // 22\n * undefined, set a default value and return it. If the value is already                        // 23\n * defined, return the existing value.                                                          // 24\n */                                                                                             // 25\nIron.utils.defaultValue = function (target, prop, value) {                                      // 26\n  if (typeof target[prop] === 'undefined') {                                                    // 27\n    target[prop] = value;                                                                       // 28\n    return value;                                                                               // 29\n  } else {                                                                                      // 30\n    return target[prop]                                                                         // 31\n  }                                                                                             // 32\n};                                                                                              // 33\n                                                                                                // 34\n/**                                                                                             // 35\n * Make one constructor function inherit from another. Optionally provide                       // 36\n * prototype properties for the child.                                                          // 37\n *                                                                                              // 38\n * @param {Function} Child The child constructor function.                                      // 39\n * @param {Function} Parent The parent constructor function.                                    // 40\n * @param {Object} [props] Prototype properties to add to the child                             // 41\n */                                                                                             // 42\nIron.utils.inherits = function (Child, Parent, props) {                                         // 43\n  Iron.utils.assert(typeof Child !== \"undefined\", \"Child is undefined in inherits function\");   // 44\n  Iron.utils.assert(typeof Parent !== \"undefined\", \"Parent is undefined in inherits function\");\n                                                                                                // 46\n  // copy static fields                                                                         // 47\n  for (var key in Parent) {                                                                     // 48\n    if (_.has(Parent, key))                                                                     // 49\n      Child[key] = EJSON.clone(Parent[key]);                                                    // 50\n  }                                                                                             // 51\n                                                                                                // 52\n  var Middle = function () {                                                                    // 53\n    this.constructor = Child;                                                                   // 54\n  };                                                                                            // 55\n                                                                                                // 56\n  // hook up the proto chain                                                                    // 57\n  Middle.prototype = Parent.prototype;                                                          // 58\n  Child.prototype = new Middle;                                                                 // 59\n  Child.__super__ = Parent.prototype;                                                           // 60\n                                                                                                // 61\n  // copy over the prototype props                                                              // 62\n  if (_.isObject(props))                                                                        // 63\n    _.extend(Child.prototype, props);                                                           // 64\n                                                                                                // 65\n  return Child;                                                                                 // 66\n};                                                                                              // 67\n                                                                                                // 68\n/**                                                                                             // 69\n * Create a new constructor function that inherits from Parent and copy in the                  // 70\n * provided prototype properties.                                                               // 71\n *                                                                                              // 72\n * @param {Function} Parent The parent constructor function.                                    // 73\n * @param {Object} [props] Prototype properties to add to the child                             // 74\n */                                                                                             // 75\nIron.utils.extend = function (Parent, props) {                                                  // 76\n  props = props || {};                                                                          // 77\n                                                                                                // 78\n  var ctor = function () {                                                                      // 79\n    // automatically call the parent constructor if a new one                                   // 80\n    // isn't provided.                                                                          // 81\n    var constructor;                                                                            // 82\n    if (_.has(props, 'constructor'))                                                            // 83\n      constructor = props.constructor                                                           // 84\n    else                                                                                        // 85\n      constructor = ctor.__super__.constructor;                                                 // 86\n                                                                                                // 87\n    constructor.apply(this, arguments);                                                         // 88\n  };                                                                                            // 89\n                                                                                                // 90\n  return Iron.utils.inherits(ctor, Parent, props);                                              // 91\n};                                                                                              // 92\n                                                                                                // 93\n/**                                                                                             // 94\n * Either window in the browser or global in NodeJS.                                            // 95\n */                                                                                             // 96\nIron.utils.global = (function () {                                                              // 97\n  return Meteor.isClient ? window : global;                                                     // 98\n})();                                                                                           // 99\n                                                                                                // 100\n/**                                                                                             // 101\n * Ensure a given namespace exists and assign it to the given value or                          // 102\n * return the existing value.                                                                   // 103\n */                                                                                             // 104\nIron.utils.namespace = function (namespace, value) {                                            // 105\n  var global = Iron.utils.global;                                                               // 106\n  var parts;                                                                                    // 107\n  var part;                                                                                     // 108\n  var name;                                                                                     // 109\n  var ptr;                                                                                      // 110\n                                                                                                // 111\n  Iron.utils.assert(typeof namespace === 'string', \"namespace must be a string\");               // 112\n                                                                                                // 113\n  parts = namespace.split('.');                                                                 // 114\n  name = parts.pop();                                                                           // 115\n  ptr = global;                                                                                 // 116\n                                                                                                // 117\n  for (var i = 0; i < parts.length; i++) {                                                      // 118\n    part = parts[i];                                                                            // 119\n    ptr = ptr[part] = ptr[part] || {};                                                          // 120\n  }                                                                                             // 121\n                                                                                                // 122\n  if (arguments.length === 2) {                                                                 // 123\n    ptr[name] = value;                                                                          // 124\n    return value;                                                                               // 125\n  } else {                                                                                      // 126\n    return ptr[name];                                                                           // 127\n  }                                                                                             // 128\n};                                                                                              // 129\n                                                                                                // 130\n/**                                                                                             // 131\n * Returns the resolved value at the given namespace or the value itself if it's                // 132\n * not a string.                                                                                // 133\n *                                                                                              // 134\n * Example:                                                                                     // 135\n *                                                                                              // 136\n * var Iron = {};                                                                               // 137\n * Iron.foo = {};                                                                               // 138\n *                                                                                              // 139\n * var baz = Iron.foo.baz = {};                                                                 // 140\n * Iron.utils.resolve(\"Iron.foo.baz\") === baz                                                   // 141\n */                                                                                             // 142\nIron.utils.resolve = function (nameOrValue) {                                                   // 143\n  var global = Iron.utils.global;                                                               // 144\n  var parts;                                                                                    // 145\n  var ptr;                                                                                      // 146\n                                                                                                // 147\n  if (typeof nameOrValue === 'string') {                                                        // 148\n    parts = nameOrValue.split('.');                                                             // 149\n    ptr = global;                                                                               // 150\n    for (var i = 0; i < parts.length; i++) {                                                    // 151\n      ptr = ptr[parts[i]];                                                                      // 152\n      if (!ptr)                                                                                 // 153\n        return undefined;                                                                       // 154\n    }                                                                                           // 155\n  } else {                                                                                      // 156\n    ptr = nameOrValue;                                                                          // 157\n  }                                                                                             // 158\n                                                                                                // 159\n  // final position of ptr should be the resolved value                                         // 160\n  return ptr;                                                                                   // 161\n};                                                                                              // 162\n                                                                                                // 163\n/**                                                                                             // 164\n * Capitalize a string.                                                                         // 165\n */                                                                                             // 166\nIron.utils.capitalize = function (str) {                                                        // 167\n  return str.charAt(0).toUpperCase() + str.slice(1, str.length);                                // 168\n};                                                                                              // 169\n                                                                                                // 170\n/**                                                                                             // 171\n * Convert a string to class case.                                                              // 172\n */                                                                                             // 173\nIron.utils.classCase = function (str) {                                                         // 174\n  var re = /_|-|\\.|\\//;                                                                         // 175\n                                                                                                // 176\n  if (!str)                                                                                     // 177\n    return '';                                                                                  // 178\n                                                                                                // 179\n  return _.map(str.split(re), function (word) {                                                 // 180\n    return Iron.utils.capitalize(word);                                                         // 181\n  }).join('');                                                                                  // 182\n};                                                                                              // 183\n                                                                                                // 184\n/**                                                                                             // 185\n * Convert a string to camel case.                                                              // 186\n */                                                                                             // 187\nIron.utils.camelCase = function (str) {                                                         // 188\n  var output = Iron.utils.classCase(str);                                                       // 189\n  output = output.charAt(0).toLowerCase() + output.slice(1, output.length);                     // 190\n  return output;                                                                                // 191\n};                                                                                              // 192\n                                                                                                // 193\n/**                                                                                             // 194\n * deprecatation notice to the user which can be a string or object                             // 195\n * of the form:                                                                                 // 196\n *                                                                                              // 197\n * {                                                                                            // 198\n *  name: 'somePropertyOrMethod',                                                               // 199\n *  where: 'RouteController',                                                                   // 200\n *  instead: 'someOtherPropertyOrMethod',                                                       // 201\n *  message: ':name is deprecated. Please use :instead instead'                                 // 202\n * }                                                                                            // 203\n */                                                                                             // 204\nIron.utils.notifyDeprecated = function (info) {                                                 // 205\n  var name;                                                                                     // 206\n  var instead;                                                                                  // 207\n  var message;                                                                                  // 208\n  var where;                                                                                    // 209\n  var defaultMessage = \"[:where] ':name' is deprecated. Please use ':instead' instead.\";        // 210\n                                                                                                // 211\n  if (_.isObject(info)) {                                                                       // 212\n    name = info.name;                                                                           // 213\n    instead = info.instead;                                                                     // 214\n    message = info.message || defaultMessage;                                                   // 215\n    where = info.where || 'IronRouter';                                                         // 216\n  } else {                                                                                      // 217\n    message = info;                                                                             // 218\n    name = '';                                                                                  // 219\n    instead = '';                                                                               // 220\n    where = '';                                                                                 // 221\n  }                                                                                             // 222\n                                                                                                // 223\n  if (typeof console !== 'undefined' && console.warn) {                                         // 224\n    console.warn(                                                                               // 225\n      '<deprecated> ' +                                                                         // 226\n      message                                                                                   // 227\n      .replace(':name', name)                                                                   // 228\n      .replace(':instead', instead)                                                             // 229\n      .replace(':where', where) +                                                               // 230\n      ' ' +                                                                                     // 231\n      (new Error).stack                                                                         // 232\n    );                                                                                          // 233\n  }                                                                                             // 234\n};                                                                                              // 235\n                                                                                                // 236\nIron.utils.withDeprecatedNotice = function (info, fn, thisArg) {                                // 237\n  return function () {                                                                          // 238\n    Utils.notifyDeprecated(info);                                                               // 239\n    return fn && fn.apply(thisArg || this, arguments);                                          // 240\n  };                                                                                            // 241\n};                                                                                              // 242\n                                                                                                // 243\n// so we can do this:                                                                           // 244\n//   getController: function () {                                                               // 245\n//    ...                                                                                       // 246\n//   }.deprecate({...})                                                                         // 247\nFunction.prototype.deprecate = function (info) {                                                // 248\n  var fn = this;                                                                                // 249\n  return Iron.utils.withDeprecatedNotice(info, fn);                                             // 250\n};                                                                                              // 251\n                                                                                                // 252\n/**                                                                                             // 253\n * Returns a function that can be used to log debug messages for a given                        // 254\n * package.                                                                                     // 255\n */                                                                                             // 256\nIron.utils.debug = function (package) {                                                         // 257\n  Iron.utils.assert(typeof package === 'string', \"debug requires a package name\");              // 258\n                                                                                                // 259\n  return function debug (/* args */) {                                                          // 260\n    if (console && console.log && Iron.debug === true) {                                        // 261\n      var msg = _.toArray(arguments).join(' ');                                                 // 262\n      console.log(\"%c<\" + package + \"> %c\" + msg, \"color: #999;\", \"color: #000;\");              // 263\n    }                                                                                           // 264\n  };                                                                                            // 265\n};                                                                                              // 266\n                                                                                                // 267\n/*                                                                                              // 268\n * Meteor's version of this function is broke.                                                  // 269\n */                                                                                             // 270\nIron.utils.get = function (obj /*, arguments */) {                                              // 271\n  for (var i = 1; i < arguments.length; i++) {                                                  // 272\n    if (!obj || !(arguments[i] in obj))                                                         // 273\n      return undefined;                                                                         // 274\n    obj = obj[arguments[i]];                                                                    // 275\n  }                                                                                             // 276\n  return obj;                                                                                   // 277\n};                                                                                              // 278\n                                                                                                // 279\n// make sure Iron ends up in the global namespace                                               // 280\nIron.utils.global.Iron = Iron;                                                                  // 281\n                                                                                                // 282\n//////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['iron:core'] = {}, {\n  Iron: Iron\n});\n\n})();\n","servePath":"/packages/iron_core.js"}]