[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar OAuth = Package.oauth.OAuth;\nvar Oauth = Package.oauth.Oauth;\nvar HTTP = Package.http.HTTP;\nvar HTTPInternals = Package.http.HTTPInternals;\nvar _ = Package.underscore._;\nvar ServiceConfiguration = Package['service-configuration'].ServiceConfiguration;\n\n/* Package-scope variables */\nvar LinkedIn;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/pauli_linkedin/linkedin_common.js                                                //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nif (typeof LinkedIn === 'undefined') {\n  LinkedIn = {};\n}\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/pauli_linkedin/linkedin_server.js                                                //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nvar OAuth = Package.oauth.OAuth;\n\nOAuth.registerService('linkedin', 2, null, function(query) {\n\n  var response = getTokenResponse(query);\n  var accessToken = response.accessToken;\n  var identity = getIdentity(accessToken);\n\n  var id = identity.id;\n  if (!id) {\n    throw new Error(\"LinkedIn did not provide an id\");    \n  }\n  var serviceData = {\n    id: id,\n    accessToken: accessToken,\n    expiresAt: (+new Date) + (1000 * response.expiresIn)\n  };\n\n  var whiteListed = ['firstName', 'headline', 'lastName'];\n\n  // include all fields from linkedin\n  // https://developer.linkedin.com/documents/authentication\n  var fields = _.pick(identity, whiteListed);\n\n  // list of extra fields\n  // http://developer.linkedin.com/documents/profile-fields\n  var extraFields = 'email-address,location:(name),num-connections,picture-url,public-profile-url,skills,languages,three-current-positions,recommendations-received';\n\n  // remove the whitespaces which could break the request\n  extraFields = extraFields.replace(/\\s+/g, '');\n\n  fields = getExtraData(accessToken, extraFields, fields);\n\n  _.extend(serviceData, fields);\n\n  return {\n    serviceData: serviceData,\n    options: {\n      profile: fields\n    }\n  };\n});\n\nvar getExtraData = function(accessToken, extraFields, fields) {\n  var url = 'https://api.linkedin.com/v1/people/~:(' + extraFields + ')';\n  var response = Meteor.http.get(url, {\n    params: {\n      oauth2_access_token: accessToken,\n      format: 'json'\n    }\n  }).data;\n  return _.extend(fields, response);\n}\n\n// checks whether a string parses as JSON\nvar isJSON = function (str) {\n  try {\n    JSON.parse(str);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n// returns an object containing:\n// - accessToken\n// - expiresIn: lifetime of token in seconds\nvar getTokenResponse = function (query) {\n  var config = ServiceConfiguration.configurations.findOne({service: 'linkedin'});\n  if (!config)\n    throw new ServiceConfiguration.ConfigError(\"Service not configured\");\n\n  var responseContent;\n  try {\n    //Request an access token\n    responseContent = Meteor.http.post(\n       \"https://api.linkedin.com/uas/oauth2/accessToken\", {\n         params: {\n           grant_type: 'authorization_code',\n           client_id: config.clientId,\n           client_secret: OAuth.openSecret(config.secret),\n           code: query.code,\n           redirect_uri: OAuth._redirectUri('linkedin', config)\n         }\n       }).content;\n  } catch (err) {\n    throw new Error(\"Failed to complete OAuth handshake with LinkedIn. \" + err.message);\n  }\n\n  // If 'responseContent' does not parse as JSON, it is an error.\n  if (!isJSON(responseContent)) {\n    throw new Error(\"Failed to complete OAuth handshake with LinkedIn. \" + responseContent);\n  }\n\n  // Success! Extract access token and expiration\n  var parsedResponse = JSON.parse(responseContent);\n  var accessToken = parsedResponse.access_token;\n  var expiresIn = parsedResponse.expires_in;\n\n  if (!accessToken) {\n    throw new Error(\"Failed to complete OAuth handshake with LinkedIn \" +\n      \"-- can't find access token in HTTP response. \" + responseContent);\n  }\n\n  return {\n    accessToken: accessToken,\n    expiresIn: expiresIn\n  };\n};\n\nvar getIdentity = function (accessToken) {\n  try {\n    return Meteor.http.get(\"https://www.linkedin.com/v1/people/~\", {\n      params: {oauth2_access_token: accessToken, format: 'json'}}).data;\n  } catch (err) {\n    throw new Error(\"Failed to fetch identity from LinkedIn. \" + err.message);\n  }\n};\n\nLinkedIn.retrieveCredential = function(credentialToken, credentialSecret) {\n  return OAuth.retrieveCredential(credentialToken, credentialSecret);\n};\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['pauli:linkedin'] = {}, {\n  LinkedIn: LinkedIn\n});\n\n})();\n","servePath":"/packages/pauli_linkedin.js"}]