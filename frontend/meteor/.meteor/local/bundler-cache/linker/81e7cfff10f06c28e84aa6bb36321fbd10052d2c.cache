[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar OAuth = Package.oauth.OAuth;\nvar Oauth = Package.oauth.Oauth;\nvar HTTP = Package.http.HTTP;\nvar HTTPInternals = Package.http.HTTPInternals;\nvar ServiceConfiguration = Package['service-configuration'].ServiceConfiguration;\n\n/* Package-scope variables */\nvar Meetup;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                 //\n// packages/meetup/meetup_server.js                                                                //\n//                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                   //\nMeetup = {};\n\nOAuth.registerService('meetup', 2, null, function(query) {\n\n  var accessToken = getAccessToken(query);\n  var identity = getIdentity(accessToken);\n\n  return {\n    serviceData: {\n      id: identity.id,\n      accessToken: accessToken\n    },\n    options: {profile: {name: identity.name}}\n  };\n});\n\nvar getAccessToken = function (query) {\n  var config = ServiceConfiguration.configurations.findOne({service: 'meetup'});\n  if (!config)\n    throw new ServiceConfiguration.ConfigError();\n\n  var response;\n  try {\n    response = HTTP.post(\n      \"https://secure.meetup.com/oauth2/access\", {headers: {Accept: 'application/json'}, params: {\n        code: query.code,\n        client_id: config.clientId,\n        client_secret: OAuth.openSecret(config.secret),\n        grant_type: 'authorization_code',\n        redirect_uri: OAuth._redirectUri('meetup', config),\n        state: query.state\n      }});\n  } catch (err) {\n    throw _.extend(new Error(\"Failed to complete OAuth handshake with Meetup. \" + err.message),\n                   {response: err.response});\n  }\n\n  if (response.data.error) { // if the http response was a json object with an error attribute\n    throw new Error(\"Failed to complete OAuth handshake with Meetup. \" + response.data.error);\n  } else {\n    return response.data.access_token;\n  }\n};\n\nvar getIdentity = function (accessToken) {\n  try {\n    var response = HTTP.get(\n      \"https://api.meetup.com/2/members\",\n      {params: {member_id: 'self', access_token: accessToken}});\n    return response.data.results && response.data.results[0];\n  } catch (err) {\n    throw _.extend(new Error(\"Failed to fetch identity from Meetup. \" + err.message),\n                   {response: err.response});\n  }\n};\n\n\nMeetup.retrieveCredential = function(credentialToken, credentialSecret) {\n  return OAuth.retrieveCredential(credentialToken, credentialSecret);\n};\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package.meetup = {}, {\n  Meetup: Meetup\n});\n\n})();\n","servePath":"/packages/meetup.js"}]