[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar SimpleSchema = Package['aldeed:simple-schema'].SimpleSchema;\nvar MongoObject = Package['aldeed:simple-schema'].MongoObject;\nvar _ = Package.underscore._;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar Mongo = Package.mongo.Mongo;\nvar LocalCollection = Package.minimongo.LocalCollection;\nvar Minimongo = Package.minimongo.Minimongo;\nvar EJSON = Package.ejson.EJSON;\nvar EventEmitter = Package['raix:eventemitter'].EventEmitter;\n\n/* Package-scope variables */\nvar Collection2;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/aldeed_collection2-core/lib/collection2.js                                                               //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n// Exported only for listening to events                                                                             // 1\nCollection2 = new EventEmitter();                                                                                    // 2\n                                                                                                                     // 3\n// backwards compatibility                                                                                           // 4\nif (typeof Mongo === \"undefined\") {                                                                                  // 5\n  Mongo = {};                                                                                                        // 6\n  Mongo.Collection = Meteor.Collection;                                                                              // 7\n}                                                                                                                    // 8\n                                                                                                                     // 9\n/**                                                                                                                  // 10\n * Mongo.Collection.prototype.attachSchema                                                                           // 11\n * @param {SimpleSchema|Object} ss - SimpleSchema instance or a schema definition object                             // 12\n *    from which to create a new SimpleSchema instance                                                               // 13\n * @param {Object} [options]                                                                                         // 14\n * @param {Boolean} [options.transform=false] Set to `true` if your document must be passed                          // 15\n *    through the collection's transform to properly validate.                                                       // 16\n * @param {Boolean} [options.replace=false] Set to `true` to replace any existing schema instead of combining        // 17\n * @return {undefined}                                                                                               // 18\n *                                                                                                                   // 19\n * Use this method to attach a schema to a collection created by another package,                                    // 20\n * such as Meteor.users. It is most likely unsafe to call this method more than                                      // 21\n * once for a single collection, or to call this for a collection that had a                                         // 22\n * schema object passed to its constructor.                                                                          // 23\n */                                                                                                                  // 24\nMongo.Collection.prototype.attachSchema = function c2AttachSchema(ss, options) {                                     // 25\n  var self = this;                                                                                                   // 26\n  options = options || {};                                                                                           // 27\n                                                                                                                     // 28\n  // Allow passing just the schema object                                                                            // 29\n  if (!(ss instanceof SimpleSchema)) {                                                                               // 30\n    ss = new SimpleSchema(ss);                                                                                       // 31\n  }                                                                                                                  // 32\n                                                                                                                     // 33\n  self._c2 = self._c2 || {};                                                                                         // 34\n                                                                                                                     // 35\n  // If we've already attached one schema, we combine both into a new schema unless options.replace is `true`        // 36\n  if (self._c2._simpleSchema && options.replace !== true) {                                                          // 37\n    ss = new SimpleSchema([self._c2._simpleSchema, ss]);                                                             // 38\n  }                                                                                                                  // 39\n                                                                                                                     // 40\n  var selector = options.selector;                                                                                   // 41\n                                                                                                                     // 42\n  function attachTo(obj) {                                                                                           // 43\n    if (typeof selector === \"object\") {                                                                              // 44\n      // Index of existing schema with identical selector                                                            // 45\n      var schemaIndex = -1;                                                                                          // 46\n                                                                                                                     // 47\n      // we need an array to hold multiple schemas                                                                   // 48\n      obj._c2._simpleSchemas = obj._c2._simpleSchemas || [];                                                         // 49\n                                                                                                                     // 50\n      // Loop through existing schemas with selectors                                                                // 51\n      obj._c2._simpleSchemas.forEach(function (schema, index) {                                                      // 52\n        // if we find a schema with an identical selector, save it's index                                           // 53\n        if(_.isEqual(schema.selector, selector)) {                                                                   // 54\n          schemaIndex = index;                                                                                       // 55\n        }                                                                                                            // 56\n      });                                                                                                            // 57\n      if (schemaIndex === -1) {                                                                                      // 58\n        // We didn't find the schema in our array - push it into the array                                           // 59\n        obj._c2._simpleSchemas.push({                                                                                // 60\n          schema: new SimpleSchema(ss),                                                                              // 61\n          selector: selector,                                                                                        // 62\n        });                                                                                                          // 63\n      } else {                                                                                                       // 64\n        // We found a schema with an identical selector in our array,                                                // 65\n        if (options.replace !== true) {                                                                              // 66\n          // Merge with existing schema unless options.replace is `true`                                             // 67\n          obj._c2._simpleSchemas[schemaIndex].schema = new SimpleSchema([obj._c2._simpleSchemas[schemaIndex].schema, ss]);\n        } else {                                                                                                     // 69\n          // If options.repalce is `true` replace existing schema with new schema                                    // 70\n          obj._c2._simpleSchemas[schemaIndex].schema = ss;                                                           // 71\n        }                                                                                                            // 72\n                                                                                                                     // 73\n      }                                                                                                              // 74\n                                                                                                                     // 75\n      // Remove existing schemas without selector                                                                    // 76\n      delete obj._c2._simpleSchema;                                                                                  // 77\n    } else {                                                                                                         // 78\n      // Track the schema in the collection                                                                          // 79\n      obj._c2._simpleSchema = ss;                                                                                    // 80\n                                                                                                                     // 81\n      // Remove existing schemas with selector                                                                       // 82\n      delete obj._c2._simpleSchemas;                                                                                 // 83\n    }                                                                                                                // 84\n  }                                                                                                                  // 85\n                                                                                                                     // 86\n  attachTo(self);                                                                                                    // 87\n  // Attach the schema to the underlying LocalCollection, too                                                        // 88\n  if (self._collection instanceof LocalCollection) {                                                                 // 89\n    self._collection._c2 = self._collection._c2 || {};                                                               // 90\n    attachTo(self._collection);                                                                                      // 91\n  }                                                                                                                  // 92\n                                                                                                                     // 93\n  defineDeny(self, options);                                                                                         // 94\n  keepInsecure(self);                                                                                                // 95\n                                                                                                                     // 96\n  Collection2.emit('schema.attached', self, ss, options);                                                            // 97\n};                                                                                                                   // 98\n                                                                                                                     // 99\n_.each([Mongo.Collection, LocalCollection], function (obj) {                                                         // 100\n  /**                                                                                                                // 101\n   * simpleSchema                                                                                                    // 102\n   * @description function detect the correct schema by given params. If it                                          // 103\n   * detect multi-schema presence in `self`, then it made an attempt to find a                                       // 104\n   * `selector` in args                                                                                              // 105\n   * @param {Object} doc - It could be <update> on update/upsert or document                                         // 106\n   * itself on insert/remove                                                                                         // 107\n   * @param {Object} [options] - It could be <update> on update/upsert etc                                           // 108\n   * @param {Object} [query] - it could be <query> on update/upsert                                                  // 109\n   * @return {Object} Schema                                                                                         // 110\n   */                                                                                                                // 111\n  obj.prototype.simpleSchema = function (doc, options, query) {                                                      // 112\n    if (!this._c2) return null;                                                                                      // 113\n    if (this._c2._simpleSchema) return this._c2._simpleSchema;                                                       // 114\n                                                                                                                     // 115\n    var schemas = this._c2._simpleSchemas;                                                                           // 116\n    if (schemas && schemas.length > 0) {                                                                             // 117\n      if (!doc) throw new Error('collection.simpleSchema() requires doc argument when there are multiple schemas');  // 118\n                                                                                                                     // 119\n      var schema, selector, target;                                                                                  // 120\n      for (var i = 0; i < schemas.length; i++) {                                                                     // 121\n        schema = schemas[i];                                                                                         // 122\n        selector = Object.keys(schema.selector)[0];                                                                  // 123\n                                                                                                                     // 124\n        // We will set this to undefined because in theory you might want to select                                  // 125\n        // on a null value.                                                                                          // 126\n        target = undefined;                                                                                          // 127\n                                                                                                                     // 128\n        // here we are looking for selector in different places                                                      // 129\n        // $set should have more priority here                                                                       // 130\n        if (doc.$set && typeof doc.$set[selector] !== 'undefined') {                                                 // 131\n          target = doc.$set[selector];                                                                               // 132\n        } else if (typeof doc[selector] !== 'undefined') {                                                           // 133\n          target = doc[selector];                                                                                    // 134\n        } else if (options && options.selector) {                                                                    // 135\n          target = options.selector[selector];                                                                       // 136\n        } else if (query && query[selector]) { // on upsert/update operations                                        // 137\n          target = query[selector];                                                                                  // 138\n        }                                                                                                            // 139\n                                                                                                                     // 140\n        // we need to compare given selector with doc property or option to                                          // 141\n        // find right schema                                                                                         // 142\n        if (target !== undefined && target === schema.selector[selector]) {                                          // 143\n          return schema.schema;                                                                                      // 144\n        }                                                                                                            // 145\n      }                                                                                                              // 146\n    }                                                                                                                // 147\n                                                                                                                     // 148\n    return null;                                                                                                     // 149\n  };                                                                                                                 // 150\n});                                                                                                                  // 151\n                                                                                                                     // 152\n// Wrap DB write operation methods                                                                                   // 153\n_.each(['insert', 'update'], function(methodName) {                                                                  // 154\n  var _super = Mongo.Collection.prototype[methodName];                                                               // 155\n  Mongo.Collection.prototype[methodName] = function() {                                                              // 156\n    var self = this, options,                                                                                        // 157\n        args = _.toArray(arguments);                                                                                 // 158\n                                                                                                                     // 159\n    options = (methodName === \"insert\") ? args[1] : args[2];                                                         // 160\n                                                                                                                     // 161\n    // Support missing options arg                                                                                   // 162\n    if (!options || typeof options === \"function\") {                                                                 // 163\n      options = {};                                                                                                  // 164\n    }                                                                                                                // 165\n                                                                                                                     // 166\n    if (self._c2 && options.bypassCollection2 !== true) {                                                            // 167\n      var userId = null;                                                                                             // 168\n      try { // https://github.com/aldeed/meteor-collection2/issues/175                                               // 169\n        userId = Meteor.userId();                                                                                    // 170\n      } catch (err) {}                                                                                               // 171\n                                                                                                                     // 172\n      args = doValidate.call(                                                                                        // 173\n        self,                                                                                                        // 174\n        methodName,                                                                                                  // 175\n        args,                                                                                                        // 176\n        true, // getAutoValues                                                                                       // 177\n        userId,                                                                                                      // 178\n        Meteor.isServer // isFromTrustedCode                                                                         // 179\n      );                                                                                                             // 180\n      if (!args) {                                                                                                   // 181\n        // doValidate already called the callback or threw the error so we're done.                                  // 182\n        // But insert should always return an ID to match core behavior.                                             // 183\n        return methodName === \"insert\" ? self._makeNewID() : undefined;                                              // 184\n      }                                                                                                              // 185\n    } else {                                                                                                         // 186\n      // We still need to adjust args because insert does not take options                                           // 187\n      if (methodName === \"insert\" && typeof args[1] !== 'function') args.splice(1, 1);                               // 188\n    }                                                                                                                // 189\n                                                                                                                     // 190\n    return _super.apply(self, args);                                                                                 // 191\n  };                                                                                                                 // 192\n});                                                                                                                  // 193\n                                                                                                                     // 194\n/*                                                                                                                   // 195\n * Private                                                                                                           // 196\n */                                                                                                                  // 197\n                                                                                                                     // 198\nfunction doValidate(type, args, getAutoValues, userId, isFromTrustedCode) {                                          // 199\n  var self = this, doc, callback, error, options, isUpsert, selector, last, hasCallback;                             // 200\n                                                                                                                     // 201\n  if (!args.length) {                                                                                                // 202\n    throw new Error(type + \" requires an argument\");                                                                 // 203\n  }                                                                                                                  // 204\n                                                                                                                     // 205\n  // Gather arguments and cache the selector                                                                         // 206\n  if (type === \"insert\") {                                                                                           // 207\n    doc = args[0];                                                                                                   // 208\n    options = args[1];                                                                                               // 209\n    callback = args[2];                                                                                              // 210\n                                                                                                                     // 211\n    // The real insert doesn't take options                                                                          // 212\n    if (typeof options === \"function\") {                                                                             // 213\n      args = [doc, options];                                                                                         // 214\n    } else if (typeof callback === \"function\") {                                                                     // 215\n      args = [doc, callback];                                                                                        // 216\n    } else {                                                                                                         // 217\n      args = [doc];                                                                                                  // 218\n    }                                                                                                                // 219\n  } else if (type === \"update\") {                                                                                    // 220\n    selector = args[0];                                                                                              // 221\n    doc = args[1];                                                                                                   // 222\n    options = args[2];                                                                                               // 223\n    callback = args[3];                                                                                              // 224\n  } else {                                                                                                           // 225\n    throw new Error(\"invalid type argument\");                                                                        // 226\n  }                                                                                                                  // 227\n                                                                                                                     // 228\n  var validatedObjectWasInitiallyEmpty = _.isEmpty(doc);                                                             // 229\n                                                                                                                     // 230\n  // Support missing options arg                                                                                     // 231\n  if (!callback && typeof options === \"function\") {                                                                  // 232\n    callback = options;                                                                                              // 233\n    options = {};                                                                                                    // 234\n  }                                                                                                                  // 235\n  options = options || {};                                                                                           // 236\n                                                                                                                     // 237\n  last = args.length - 1;                                                                                            // 238\n                                                                                                                     // 239\n  hasCallback = (typeof args[last] === 'function');                                                                  // 240\n                                                                                                                     // 241\n  // If update was called with upsert:true, flag as an upsert                                                        // 242\n  isUpsert = (type === \"update\" && options.upsert === true);                                                         // 243\n                                                                                                                     // 244\n  // we need to pass `doc` and `options` to `simpleSchema` method, that's why                                        // 245\n  // schema declaration moved here                                                                                   // 246\n  var schema = self.simpleSchema(doc, options, selector);                                                            // 247\n  var isLocalCollection = (self._connection === null);                                                               // 248\n                                                                                                                     // 249\n  // On the server and for local collections, we allow passing `getAutoValues: false` to disable autoValue functions\n  if ((Meteor.isServer || isLocalCollection) && options.getAutoValues === false) {                                   // 251\n    getAutoValues = false;                                                                                           // 252\n  }                                                                                                                  // 253\n                                                                                                                     // 254\n  // Determine validation context                                                                                    // 255\n  var validationContext = options.validationContext;                                                                 // 256\n  if (validationContext) {                                                                                           // 257\n    if (typeof validationContext === 'string') {                                                                     // 258\n      validationContext = schema.namedContext(validationContext);                                                    // 259\n    }                                                                                                                // 260\n  } else {                                                                                                           // 261\n    validationContext = schema.namedContext();                                                                       // 262\n  }                                                                                                                  // 263\n                                                                                                                     // 264\n  // Add a default callback function if we're on the client and no callback was given                                // 265\n  if (Meteor.isClient && !callback) {                                                                                // 266\n    // Client can't block, so it can't report errors by exception,                                                   // 267\n    // only by callback. If they forget the callback, give them a                                                    // 268\n    // default one that logs the error, so they aren't totally                                                       // 269\n    // baffled if their writes don't work because their database is                                                  // 270\n    // down.                                                                                                         // 271\n    callback = function(err) {                                                                                       // 272\n      if (err) {                                                                                                     // 273\n        Meteor._debug(type + \" failed: \" + (err.reason || err.stack));                                               // 274\n      }                                                                                                              // 275\n    };                                                                                                               // 276\n  }                                                                                                                  // 277\n                                                                                                                     // 278\n  // If client validation is fine or is skipped but then something                                                   // 279\n  // is found to be invalid on the server, we get that error back                                                    // 280\n  // as a special Meteor.Error that we need to parse.                                                                // 281\n  if (Meteor.isClient && hasCallback) {                                                                              // 282\n    callback = args[last] = wrapCallbackForParsingServerErrors(validationContext, callback);                         // 283\n  }                                                                                                                  // 284\n                                                                                                                     // 285\n  var schemaAllowsId = schema.allowsKey(\"_id\");                                                                      // 286\n  if (type === \"insert\" && !doc._id && schemaAllowsId) {                                                             // 287\n    doc._id = self._makeNewID();                                                                                     // 288\n  }                                                                                                                  // 289\n                                                                                                                     // 290\n  // Get the docId for passing in the autoValue/custom context                                                       // 291\n  var docId;                                                                                                         // 292\n  if (type === 'insert') {                                                                                           // 293\n    docId = doc._id; // might be undefined                                                                           // 294\n  } else if (type === \"update\" && selector) {                                                                        // 295\n    docId = typeof selector === 'string' || selector instanceof Mongo.ObjectID ? selector : selector._id;            // 296\n  }                                                                                                                  // 297\n                                                                                                                     // 298\n  // If _id has already been added, remove it temporarily if it's                                                    // 299\n  // not explicitly defined in the schema.                                                                           // 300\n  var cachedId;                                                                                                      // 301\n  if (doc._id && !schemaAllowsId) {                                                                                  // 302\n    cachedId = doc._id;                                                                                              // 303\n    delete doc._id;                                                                                                  // 304\n  }                                                                                                                  // 305\n                                                                                                                     // 306\n  function doClean(docToClean, getAutoValues, filter, autoConvert, removeEmptyStrings, trimStrings) {                // 307\n    // Clean the doc/modifier in place                                                                               // 308\n    schema.clean(docToClean, {                                                                                       // 309\n      filter: filter,                                                                                                // 310\n      autoConvert: autoConvert,                                                                                      // 311\n      getAutoValues: getAutoValues,                                                                                  // 312\n      isModifier: (type !== \"insert\"),                                                                               // 313\n      removeEmptyStrings: removeEmptyStrings,                                                                        // 314\n      trimStrings: trimStrings,                                                                                      // 315\n      extendAutoValueContext: _.extend({                                                                             // 316\n        isInsert: (type === \"insert\"),                                                                               // 317\n        isUpdate: (type === \"update\" && options.upsert !== true),                                                    // 318\n        isUpsert: isUpsert,                                                                                          // 319\n        userId: userId,                                                                                              // 320\n        isFromTrustedCode: isFromTrustedCode,                                                                        // 321\n        docId: docId,                                                                                                // 322\n        isLocalCollection: isLocalCollection                                                                         // 323\n      }, options.extendAutoValueContext || {})                                                                       // 324\n    });                                                                                                              // 325\n  }                                                                                                                  // 326\n                                                                                                                     // 327\n  // Preliminary cleaning on both client and server. On the server and for local                                     // 328\n  // collections, automatic values will also be set at this point.                                                   // 329\n  doClean(                                                                                                           // 330\n    doc,                                                                                                             // 331\n    getAutoValues,                                                                                                   // 332\n    options.filter !== false,                                                                                        // 333\n    options.autoConvert !== false,                                                                                   // 334\n    options.removeEmptyStrings !== false,                                                                            // 335\n    options.trimStrings !== false                                                                                    // 336\n  );                                                                                                                 // 337\n                                                                                                                     // 338\n  // We clone before validating because in some cases we need to adjust the                                          // 339\n  // object a bit before validating it. If we adjusted `doc` itself, our                                             // 340\n  // changes would persist into the database.                                                                        // 341\n  var docToValidate = {};                                                                                            // 342\n  for (var prop in doc) {                                                                                            // 343\n    // We omit prototype properties when cloning because they will not be valid                                      // 344\n    // and mongo omits them when saving to the database anyway.                                                      // 345\n    if (doc.hasOwnProperty(prop)) {                                                                                  // 346\n      docToValidate[prop] = doc[prop];                                                                               // 347\n    }                                                                                                                // 348\n  }                                                                                                                  // 349\n                                                                                                                     // 350\n  // On the server, upserts are possible; SimpleSchema handles upserts pretty                                        // 351\n  // well by default, but it will not know about the fields in the selector,                                         // 352\n  // which are also stored in the database if an insert is performed. So we                                          // 353\n  // will allow these fields to be considered for validation by adding them                                          // 354\n  // to the $set in the modifier. This is no doubt prone to errors, but there                                        // 355\n  // probably isn't any better way right now.                                                                        // 356\n  if (Meteor.isServer && isUpsert && _.isObject(selector)) {                                                         // 357\n    var set = docToValidate.$set || {};                                                                              // 358\n    docToValidate.$set = _.clone(selector);                                                                          // 359\n    if (!schemaAllowsId) delete docToValidate.$set._id;                                                              // 360\n    _.extend(docToValidate.$set, set);                                                                               // 361\n  }                                                                                                                  // 362\n                                                                                                                     // 363\n  // Set automatic values for validation on the client.                                                              // 364\n  // On the server, we already updated doc with auto values, but on the client,                                      // 365\n  // we will add them to docToValidate for validation purposes only.                                                 // 366\n  // This is because we want all actual values generated on the server.                                              // 367\n  if (Meteor.isClient && !isLocalCollection) {                                                                       // 368\n    doClean(docToValidate, true, false, false, false, false);                                                        // 369\n  }                                                                                                                  // 370\n                                                                                                                     // 371\n  // XXX Maybe move this into SimpleSchema                                                                           // 372\n  if (!validatedObjectWasInitiallyEmpty && _.isEmpty(docToValidate)) {                                               // 373\n    throw new Error('After filtering out keys not in the schema, your ' +                                            // 374\n      (type === 'update' ? 'modifier' : 'object') +                                                                  // 375\n      ' is now empty');                                                                                              // 376\n  }                                                                                                                  // 377\n                                                                                                                     // 378\n  // Validate doc                                                                                                    // 379\n  var isValid;                                                                                                       // 380\n  if (options.validate === false) {                                                                                  // 381\n    isValid = true;                                                                                                  // 382\n  } else {                                                                                                           // 383\n    isValid = validationContext.validate(docToValidate, {                                                            // 384\n      modifier: (type === \"update\" || type === \"upsert\"),                                                            // 385\n      upsert: isUpsert,                                                                                              // 386\n      extendedCustomContext: _.extend({                                                                              // 387\n        isInsert: (type === \"insert\"),                                                                               // 388\n        isUpdate: (type === \"update\" && options.upsert !== true),                                                    // 389\n        isUpsert: isUpsert,                                                                                          // 390\n        userId: userId,                                                                                              // 391\n        isFromTrustedCode: isFromTrustedCode,                                                                        // 392\n        docId: docId,                                                                                                // 393\n        isLocalCollection: isLocalCollection                                                                         // 394\n      }, options.extendedCustomContext || {})                                                                        // 395\n    });                                                                                                              // 396\n  }                                                                                                                  // 397\n                                                                                                                     // 398\n  if (isValid) {                                                                                                     // 399\n    // Add the ID back                                                                                               // 400\n    if (cachedId) {                                                                                                  // 401\n      doc._id = cachedId;                                                                                            // 402\n    }                                                                                                                // 403\n                                                                                                                     // 404\n    // Update the args to reflect the cleaned doc                                                                    // 405\n    // XXX not sure this is necessary since we mutate                                                                // 406\n    if (type === \"insert\") {                                                                                         // 407\n      args[0] = doc;                                                                                                 // 408\n    } else {                                                                                                         // 409\n      args[1] = doc;                                                                                                 // 410\n    }                                                                                                                // 411\n                                                                                                                     // 412\n    // If callback, set invalidKey when we get a mongo unique error                                                  // 413\n    if (Meteor.isServer && hasCallback) {                                                                            // 414\n      args[last] = wrapCallbackForParsingMongoValidationErrors(validationContext, args[last]);                       // 415\n    }                                                                                                                // 416\n                                                                                                                     // 417\n    return args;                                                                                                     // 418\n  } else {                                                                                                           // 419\n    error = getErrorObject(validationContext);                                                                       // 420\n    if (callback) {                                                                                                  // 421\n      // insert/update/upsert pass `false` when there's an error, so we do that                                      // 422\n      callback(error, false);                                                                                        // 423\n    } else {                                                                                                         // 424\n      throw error;                                                                                                   // 425\n    }                                                                                                                // 426\n  }                                                                                                                  // 427\n}                                                                                                                    // 428\n                                                                                                                     // 429\nfunction getErrorObject(context) {                                                                                   // 430\n  var message, invalidKeys = context.invalidKeys();                                                                  // 431\n  if (invalidKeys.length) {                                                                                          // 432\n    message = context.keyErrorMessage(invalidKeys[0].name);                                                          // 433\n  } else {                                                                                                           // 434\n    message = \"Failed validation\";                                                                                   // 435\n  }                                                                                                                  // 436\n  var error = new Error(message);                                                                                    // 437\n  error.invalidKeys = invalidKeys;                                                                                   // 438\n  error.validationContext = context;                                                                                 // 439\n  // If on the server, we add a sanitized error, too, in case we're                                                  // 440\n  // called from a method.                                                                                           // 441\n  if (Meteor.isServer) {                                                                                             // 442\n    error.sanitizedError = new Meteor.Error(400, message, EJSON.stringify(error.invalidKeys));                       // 443\n  }                                                                                                                  // 444\n  return error;                                                                                                      // 445\n}                                                                                                                    // 446\n                                                                                                                     // 447\nfunction addUniqueError(context, errorMessage) {                                                                     // 448\n  var name = errorMessage.split('c2_')[1].split(' ')[0];                                                             // 449\n  var val = errorMessage.split('dup key:')[1].split('\"')[1];                                                         // 450\n  context.addInvalidKeys([{                                                                                          // 451\n    name: name,                                                                                                      // 452\n    type: 'notUnique',                                                                                               // 453\n    value: val                                                                                                       // 454\n  }]);                                                                                                               // 455\n}                                                                                                                    // 456\n                                                                                                                     // 457\nfunction wrapCallbackForParsingMongoValidationErrors(validationContext, cb) {                                        // 458\n  return function wrappedCallbackForParsingMongoValidationErrors(error) {                                            // 459\n    var args = _.toArray(arguments);                                                                                 // 460\n    if (error &&                                                                                                     // 461\n        ((error.name === \"MongoError\" && error.code === 11001) || error.message.indexOf('MongoError: E11000' !== -1)) &&\n        error.message.indexOf('c2_') !== -1) {                                                                       // 463\n      addUniqueError(validationContext, error.message);                                                              // 464\n      args[0] = getErrorObject(validationContext);                                                                   // 465\n    }                                                                                                                // 466\n    return cb.apply(this, args);                                                                                     // 467\n  };                                                                                                                 // 468\n}                                                                                                                    // 469\n                                                                                                                     // 470\nfunction wrapCallbackForParsingServerErrors(validationContext, cb) {                                                 // 471\n  return function wrappedCallbackForParsingServerErrors(error) {                                                     // 472\n    var args = _.toArray(arguments);                                                                                 // 473\n    // Handle our own validation errors                                                                              // 474\n    if (error instanceof Meteor.Error &&                                                                             // 475\n        error.error === 400 &&                                                                                       // 476\n        error.reason === \"INVALID\" &&                                                                                // 477\n        typeof error.details === \"string\") {                                                                         // 478\n      var invalidKeysFromServer = EJSON.parse(error.details);                                                        // 479\n      validationContext.addInvalidKeys(invalidKeysFromServer);                                                       // 480\n      args[0] = getErrorObject(validationContext);                                                                   // 481\n    }                                                                                                                // 482\n    // Handle Mongo unique index errors, which are forwarded to the client as 409 errors                             // 483\n    else if (error instanceof Meteor.Error &&                                                                        // 484\n             error.error === 409 &&                                                                                  // 485\n             error.reason &&                                                                                         // 486\n             error.reason.indexOf('E11000') !== -1 &&                                                                // 487\n             error.reason.indexOf('c2_') !== -1) {                                                                   // 488\n      addUniqueError(validationContext, error.reason);                                                               // 489\n      args[0] = getErrorObject(validationContext);                                                                   // 490\n    }                                                                                                                // 491\n    return cb.apply(this, args);                                                                                     // 492\n  };                                                                                                                 // 493\n}                                                                                                                    // 494\n                                                                                                                     // 495\nvar alreadyInsecured = {};                                                                                           // 496\nfunction keepInsecure(c) {                                                                                           // 497\n  // If insecure package is in use, we need to add allow rules that return                                           // 498\n  // true. Otherwise, it would seemingly turn off insecure mode.                                                     // 499\n  if (Package && Package.insecure && !alreadyInsecured[c._name]) {                                                   // 500\n    c.allow({                                                                                                        // 501\n      insert: function() {                                                                                           // 502\n        return true;                                                                                                 // 503\n      },                                                                                                             // 504\n      update: function() {                                                                                           // 505\n        return true;                                                                                                 // 506\n      },                                                                                                             // 507\n      remove: function () {                                                                                          // 508\n        return true;                                                                                                 // 509\n      },                                                                                                             // 510\n      fetch: [],                                                                                                     // 511\n      transform: null                                                                                                // 512\n    });                                                                                                              // 513\n    alreadyInsecured[c._name] = true;                                                                                // 514\n  }                                                                                                                  // 515\n  // If insecure package is NOT in use, then adding the two deny functions                                           // 516\n  // does not have any effect on the main app's security paradigm. The                                               // 517\n  // user will still be required to add at least one allow function of her                                           // 518\n  // own for each operation for this collection. And the user may still add                                          // 519\n  // additional deny functions, but does not have to.                                                                // 520\n}                                                                                                                    // 521\n                                                                                                                     // 522\nvar alreadyDefined = {};                                                                                             // 523\nfunction defineDeny(c, options) {                                                                                    // 524\n  if (!alreadyDefined[c._name]) {                                                                                    // 525\n                                                                                                                     // 526\n    var isLocalCollection = (c._connection === null);                                                                // 527\n                                                                                                                     // 528\n    // First define deny functions to extend doc with the results of clean                                           // 529\n    // and autovalues. This must be done with \"transform: null\" or we would be                                       // 530\n    // extending a clone of doc and therefore have no effect.                                                        // 531\n    c.deny({                                                                                                         // 532\n      insert: function(userId, doc) {                                                                                // 533\n        // Referenced doc is cleaned in place                                                                        // 534\n        c.simpleSchema(doc).clean(doc, {                                                                             // 535\n          isModifier: false,                                                                                         // 536\n          // We don't do these here because they are done on the client if desired                                   // 537\n          filter: false,                                                                                             // 538\n          autoConvert: false,                                                                                        // 539\n          removeEmptyStrings: false,                                                                                 // 540\n          trimStrings: false,                                                                                        // 541\n          extendAutoValueContext: {                                                                                  // 542\n            isInsert: true,                                                                                          // 543\n            isUpdate: false,                                                                                         // 544\n            isUpsert: false,                                                                                         // 545\n            userId: userId,                                                                                          // 546\n            isFromTrustedCode: false,                                                                                // 547\n            docId: doc._id,                                                                                          // 548\n            isLocalCollection: isLocalCollection                                                                     // 549\n          }                                                                                                          // 550\n        });                                                                                                          // 551\n                                                                                                                     // 552\n        return false;                                                                                                // 553\n      },                                                                                                             // 554\n      update: function(userId, doc, fields, modifier) {                                                              // 555\n        // Referenced modifier is cleaned in place                                                                   // 556\n        c.simpleSchema(modifier).clean(modifier, {                                                                   // 557\n          isModifier: true,                                                                                          // 558\n          // We don't do these here because they are done on the client if desired                                   // 559\n          filter: false,                                                                                             // 560\n          autoConvert: false,                                                                                        // 561\n          removeEmptyStrings: false,                                                                                 // 562\n          trimStrings: false,                                                                                        // 563\n          extendAutoValueContext: {                                                                                  // 564\n            isInsert: false,                                                                                         // 565\n            isUpdate: true,                                                                                          // 566\n            isUpsert: false,                                                                                         // 567\n            userId: userId,                                                                                          // 568\n            isFromTrustedCode: false,                                                                                // 569\n            docId: doc && doc._id,                                                                                   // 570\n            isLocalCollection: isLocalCollection                                                                     // 571\n          }                                                                                                          // 572\n        });                                                                                                          // 573\n                                                                                                                     // 574\n        return false;                                                                                                // 575\n      },                                                                                                             // 576\n      fetch: ['_id'],                                                                                                // 577\n      transform: null                                                                                                // 578\n    });                                                                                                              // 579\n                                                                                                                     // 580\n    // Second define deny functions to validate again on the server                                                  // 581\n    // for client-initiated inserts and updates. These should be                                                     // 582\n    // called after the clean/autovalue functions since we're adding                                                 // 583\n    // them after. These must *not* have \"transform: null\" if options.transform is true because                      // 584\n    // we need to pass the doc through any transforms to be sure                                                     // 585\n    // that custom types are properly recognized for type validation.                                                // 586\n    c.deny(_.extend({                                                                                                // 587\n      insert: function(userId, doc) {                                                                                // 588\n        // We pass the false options because we will have done them on client if desired                             // 589\n        doValidate.call(                                                                                             // 590\n          c,                                                                                                         // 591\n          \"insert\",                                                                                                  // 592\n          [                                                                                                          // 593\n            doc,                                                                                                     // 594\n            {                                                                                                        // 595\n              trimStrings: false,                                                                                    // 596\n              removeEmptyStrings: false,                                                                             // 597\n              filter: false,                                                                                         // 598\n              autoConvert: false                                                                                     // 599\n            },                                                                                                       // 600\n            function(error) {                                                                                        // 601\n              if (error) {                                                                                           // 602\n                throw new Meteor.Error(400, 'INVALID', EJSON.stringify(error.invalidKeys));                          // 603\n              }                                                                                                      // 604\n            }                                                                                                        // 605\n          ],                                                                                                         // 606\n          false, // getAutoValues                                                                                    // 607\n          userId,                                                                                                    // 608\n          false // isFromTrustedCode                                                                                 // 609\n        );                                                                                                           // 610\n                                                                                                                     // 611\n        return false;                                                                                                // 612\n      },                                                                                                             // 613\n      update: function(userId, doc, fields, modifier) {                                                              // 614\n        // NOTE: This will never be an upsert because client-side upserts                                            // 615\n        // are not allowed once you define allow/deny functions.                                                     // 616\n        // We pass the false options because we will have done them on client if desired                             // 617\n        doValidate.call(                                                                                             // 618\n          c,                                                                                                         // 619\n          \"update\",                                                                                                  // 620\n          [                                                                                                          // 621\n            {_id: doc && doc._id},                                                                                   // 622\n            modifier,                                                                                                // 623\n            {                                                                                                        // 624\n              trimStrings: false,                                                                                    // 625\n              removeEmptyStrings: false,                                                                             // 626\n              filter: false,                                                                                         // 627\n              autoConvert: false                                                                                     // 628\n            },                                                                                                       // 629\n            function(error) {                                                                                        // 630\n              if (error) {                                                                                           // 631\n                throw new Meteor.Error(400, 'INVALID', EJSON.stringify(error.invalidKeys));                          // 632\n              }                                                                                                      // 633\n            }                                                                                                        // 634\n          ],                                                                                                         // 635\n          false, // getAutoValues                                                                                    // 636\n          userId,                                                                                                    // 637\n          false // isFromTrustedCode                                                                                 // 638\n        );                                                                                                           // 639\n                                                                                                                     // 640\n        return false;                                                                                                // 641\n      },                                                                                                             // 642\n      fetch: ['_id']                                                                                                 // 643\n    }, options.transform === true ? {} : {transform: null}));                                                        // 644\n                                                                                                                     // 645\n    // note that we've already done this collection so that we don't do it again                                     // 646\n    // if attachSchema is called again                                                                               // 647\n    alreadyDefined[c._name] = true;                                                                                  // 648\n  }                                                                                                                  // 649\n}                                                                                                                    // 650\n                                                                                                                     // 651\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['aldeed:collection2-core'] = {}, {\n  Collection2: Collection2\n});\n\n})();\n","servePath":"/packages/aldeed_collection2-core.js"}]