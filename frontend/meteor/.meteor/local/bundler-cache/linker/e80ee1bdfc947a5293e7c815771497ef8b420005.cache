[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Accounts = Package['accounts-base'].Accounts;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar _ = Package.underscore._;\nvar ReactiveVar = Package['reactive-var'].ReactiveVar;\nvar Blaze = Package.blaze.Blaze;\nvar UI = Package.blaze.UI;\nvar Handlebars = Package.blaze.Handlebars;\nvar ReactiveDict = Package['reactive-dict'].ReactiveDict;\nvar Template = Package.templating.Template;\nvar $ = Package.jquery.$;\nvar jQuery = Package.jquery.jQuery;\nvar HTML = Package.htmljs.HTML;\nvar Spacebars = Package.spacebars.Spacebars;\n\n/* Package-scope variables */\nvar capitalize, signedInAs, Field, STATE_PAT, ERRORS_PAT, INFO_PAT, INPUT_ICONS_PAT, ObjWithStringValues, TEXTS_PAT, CONFIG_PAT, FIELD_SUB_PAT, FIELD_PAT, AT, AccountsTemplates, markIfMissing, options;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/useraccounts_core/lib/utils.js                                                                          //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\ncapitalize = function(str) {                                                                                        // 1\n  return str.charAt(0).toUpperCase() + str.slice(1);                                                                // 2\n};                                                                                                                  // 3\n                                                                                                                    // 4\nsignedInAs =  function() {                                                                                          // 5\n  var user = Meteor.user();                                                                                         // 6\n                                                                                                                    // 7\n  if (user) {                                                                                                       // 8\n    if (user.username) {                                                                                            // 9\n      return user.username;                                                                                         // 10\n    } else if (user.profile && user.profile.name) {                                                                 // 11\n      return user.profile.name;                                                                                     // 12\n    } else if (user.emails && user.emails[0]) {                                                                     // 13\n      return user.emails[0].address;                                                                                // 14\n    } else {                                                                                                        // 15\n      return \"Signed In\";                                                                                           // 16\n    }                                                                                                               // 17\n  }                                                                                                                 // 18\n};                                                                                                                  // 19\n                                                                                                                    // 20\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/useraccounts_core/lib/field.js                                                                          //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n// ---------------------------------------------------------------------------------                                // 1\n// Field object                                                                                                     // 2\n// ---------------------------------------------------------------------------------                                // 3\n                                                                                                                    // 4\nField = function(field) {                                                                                           // 5\n  check(field, FIELD_PAT);                                                                                          // 6\n  _.defaults(this, field);                                                                                          // 7\n                                                                                                                    // 8\n  this.validating = new ReactiveVar(false);                                                                         // 9\n  this.status = new ReactiveVar(null);                                                                              // 10\n};                                                                                                                  // 11\n                                                                                                                    // 12\nif (Meteor.isClient) {                                                                                              // 13\n  Field.prototype.clearStatus = function() {                                                                        // 14\n    return this.status.set(null);                                                                                   // 15\n  };                                                                                                                // 16\n}                                                                                                                   // 17\n                                                                                                                    // 18\nif (Meteor.isServer) {                                                                                              // 19\n  Field.prototype.clearStatus = function() {                                                                        // 20\n    // Nothing to do server-side                                                                                    // 21\n    return;                                                                                                         // 22\n  };                                                                                                                // 23\n}                                                                                                                   // 24\n                                                                                                                    // 25\nField.prototype.fixValue = function(value) {                                                                        // 26\n  if (this.type === \"checkbox\") {                                                                                   // 27\n    return !!value;                                                                                                 // 28\n  }                                                                                                                 // 29\n                                                                                                                    // 30\n  if (this.type === \"select\") {                                                                                     // 31\n    // TODO: something working...                                                                                   // 32\n    return value;                                                                                                   // 33\n  }                                                                                                                 // 34\n                                                                                                                    // 35\n  if (this.type === \"radio\") {                                                                                      // 36\n    // TODO: something working...                                                                                   // 37\n    return value;                                                                                                   // 38\n  }                                                                                                                 // 39\n                                                                                                                    // 40\n  // Possibly applies required transformations to the input value                                                   // 41\n  if (this.trim) {                                                                                                  // 42\n    value = value.trim();                                                                                           // 43\n  }                                                                                                                 // 44\n                                                                                                                    // 45\n  if (this.lowercase) {                                                                                             // 46\n    value = value.toLowerCase();                                                                                    // 47\n  }                                                                                                                 // 48\n                                                                                                                    // 49\n  if (this.uppercase) {                                                                                             // 50\n    value = value.toUpperCase();                                                                                    // 51\n  }                                                                                                                 // 52\n                                                                                                                    // 53\n  if (!!this.transform) {                                                                                           // 54\n    value = this.transform(value);                                                                                  // 55\n  }                                                                                                                 // 56\n                                                                                                                    // 57\n  return value;                                                                                                     // 58\n};                                                                                                                  // 59\n                                                                                                                    // 60\nif (Meteor.isClient) {                                                                                              // 61\n  Field.prototype.getDisplayName = function(state) {                                                                // 62\n    var displayName = this.displayName;                                                                             // 63\n                                                                                                                    // 64\n    if (_.isFunction(displayName)) {                                                                                // 65\n      displayName = displayName();                                                                                  // 66\n    } else if (_.isObject(displayName)) {                                                                           // 67\n      displayName = displayName[state] || displayName[\"default\"];                                                   // 68\n    }                                                                                                               // 69\n                                                                                                                    // 70\n    if (!displayName) {                                                                                             // 71\n      displayName = capitalize(this._id);                                                                           // 72\n    }                                                                                                               // 73\n                                                                                                                    // 74\n    return displayName;                                                                                             // 75\n  };                                                                                                                // 76\n}                                                                                                                   // 77\n                                                                                                                    // 78\nif (Meteor.isClient) {                                                                                              // 79\n  Field.prototype.getPlaceholder = function(state) {                                                                // 80\n    var placeholder = this.placeholder;                                                                             // 81\n                                                                                                                    // 82\n    if (_.isObject(placeholder)) {                                                                                  // 83\n      placeholder = placeholder[state] || placeholder[\"default\"];                                                   // 84\n    }                                                                                                               // 85\n                                                                                                                    // 86\n    if (!placeholder) {                                                                                             // 87\n      placeholder = capitalize(this._id);                                                                           // 88\n    }                                                                                                               // 89\n                                                                                                                    // 90\n    return placeholder;                                                                                             // 91\n  };                                                                                                                // 92\n}                                                                                                                   // 93\n                                                                                                                    // 94\nField.prototype.getStatus = function() {                                                                            // 95\n  return this.status.get();                                                                                         // 96\n};                                                                                                                  // 97\n                                                                                                                    // 98\nif (Meteor.isClient) {                                                                                              // 99\n  Field.prototype.getValue = function(tempalteInstance) {                                                           // 100\n    if (this.type === \"checkbox\") {                                                                                 // 101\n      return !!(tempalteInstance.$(\"#at-field-\" + this._id + \":checked\").val());                                    // 102\n    }                                                                                                               // 103\n                                                                                                                    // 104\n    if (this.type === \"radio\") {                                                                                    // 105\n      return tempalteInstance.$(\"[name=at-field-\"+ this._id + \"]:checked\").val();                                   // 106\n    }                                                                                                               // 107\n                                                                                                                    // 108\n    return tempalteInstance.$(\"#at-field-\" + this._id).val();                                                       // 109\n  };                                                                                                                // 110\n}                                                                                                                   // 111\n                                                                                                                    // 112\nif (Meteor.isClient) {                                                                                              // 113\n  Field.prototype.hasError = function() {                                                                           // 114\n    return this.negativeValidation && this.status.get();                                                            // 115\n  };                                                                                                                // 116\n}                                                                                                                   // 117\n                                                                                                                    // 118\nif (Meteor.isClient) {                                                                                              // 119\n  Field.prototype.hasIcon = function() {                                                                            // 120\n    if (this.showValidating && this.isValidating()) {                                                               // 121\n      return true;                                                                                                  // 122\n    }                                                                                                               // 123\n                                                                                                                    // 124\n    if (this.negativeFeedback && this.hasError()) {                                                                 // 125\n      return true;                                                                                                  // 126\n    }                                                                                                               // 127\n                                                                                                                    // 128\n    if (this.positiveFeedback && this.hasSuccess()) {                                                               // 129\n      return true;                                                                                                  // 130\n    }                                                                                                               // 131\n  };                                                                                                                // 132\n}                                                                                                                   // 133\n                                                                                                                    // 134\nif (Meteor.isClient) {                                                                                              // 135\n  Field.prototype.hasSuccess = function() {                                                                         // 136\n    return this.positiveValidation && this.status.get() === false;                                                  // 137\n  };                                                                                                                // 138\n}                                                                                                                   // 139\n                                                                                                                    // 140\nif (Meteor.isClient)                                                                                                // 141\n  Field.prototype.iconClass = function() {                                                                          // 142\n    if (this.isValidating()) {                                                                                      // 143\n      return AccountsTemplates.texts.inputIcons[\"isValidating\"];                                                    // 144\n    }                                                                                                               // 145\n                                                                                                                    // 146\n    if (this.hasError()) {                                                                                          // 147\n      return AccountsTemplates.texts.inputIcons[\"hasError\"];                                                        // 148\n    }                                                                                                               // 149\n                                                                                                                    // 150\n    if (this.hasSuccess()) {                                                                                        // 151\n      return AccountsTemplates.texts.inputIcons[\"hasSuccess\"];                                                      // 152\n    }                                                                                                               // 153\n  };                                                                                                                // 154\n                                                                                                                    // 155\nif (Meteor.isClient) {                                                                                              // 156\n  Field.prototype.isValidating = function() {                                                                       // 157\n    return this.validating.get();                                                                                   // 158\n  };                                                                                                                // 159\n}                                                                                                                   // 160\n                                                                                                                    // 161\nif (Meteor.isClient) {                                                                                              // 162\n  Field.prototype.setError = function(err) {                                                                        // 163\n    check(err, Match.OneOf(String, undefined, Boolean));                                                            // 164\n                                                                                                                    // 165\n    if (err === false) {                                                                                            // 166\n      return this.status.set(false);                                                                                // 167\n    }                                                                                                               // 168\n                                                                                                                    // 169\n    return this.status.set(err || true);                                                                            // 170\n  };                                                                                                                // 171\n}                                                                                                                   // 172\n                                                                                                                    // 173\nif (Meteor.isServer) {                                                                                              // 174\n  Field.prototype.setError = function(err) {                                                                        // 175\n    // Nothing to do server-side                                                                                    // 176\n    return;                                                                                                         // 177\n  };                                                                                                                // 178\n}                                                                                                                   // 179\n                                                                                                                    // 180\nif (Meteor.isClient) {                                                                                              // 181\n  Field.prototype.setSuccess = function() {                                                                         // 182\n    return this.status.set(false);                                                                                  // 183\n  };                                                                                                                // 184\n}                                                                                                                   // 185\n                                                                                                                    // 186\nif (Meteor.isServer) {                                                                                              // 187\n  Field.prototype.setSuccess = function() {                                                                         // 188\n    // Nothing to do server-side                                                                                    // 189\n    return;                                                                                                         // 190\n  };                                                                                                                // 191\n}                                                                                                                   // 192\n                                                                                                                    // 193\nif (Meteor.isClient) {                                                                                              // 194\n  Field.prototype.setValidating = function(state) {                                                                 // 195\n    check(state, Boolean);                                                                                          // 196\n    return this.validating.set(state);                                                                              // 197\n  };                                                                                                                // 198\n}                                                                                                                   // 199\n                                                                                                                    // 200\nif (Meteor.isServer) {                                                                                              // 201\n  Field.prototype.setValidating = function(state) {                                                                 // 202\n    // Nothing to do server-side                                                                                    // 203\n    return;                                                                                                         // 204\n  };                                                                                                                // 205\n}                                                                                                                   // 206\n                                                                                                                    // 207\nif (Meteor.isClient) {                                                                                              // 208\n  Field.prototype.setValue = function(tempalteInstance, value) {                                                    // 209\n    if (this.type === \"checkbox\") {                                                                                 // 210\n      tempalteInstance.$(\"#at-field-\" + this._id).prop('checked', true);                                            // 211\n      return;                                                                                                       // 212\n    }                                                                                                               // 213\n                                                                                                                    // 214\n    if (this.type === \"radio\") {                                                                                    // 215\n      tempalteInstance.$(\"[name=at-field-\"+ this._id + \"]\").prop('checked', true);                                  // 216\n      return;                                                                                                       // 217\n    }                                                                                                               // 218\n                                                                                                                    // 219\n    tempalteInstance.$(\"#at-field-\" + this._id).val(value);                                                         // 220\n  };                                                                                                                // 221\n}                                                                                                                   // 222\n                                                                                                                    // 223\nField.prototype.validate = function(value, strict) {                                                                // 224\n  check(value, Match.OneOf(undefined, String, Boolean));                                                            // 225\n  this.setValidating(true);                                                                                         // 226\n  this.clearStatus();                                                                                               // 227\n                                                                                                                    // 228\n  if (_.isUndefined(value) || value === '') {                                                                       // 229\n    if (!!strict) {                                                                                                 // 230\n      if (this.required) {                                                                                          // 231\n        this.setError(AccountsTemplates.texts.requiredField);                                                       // 232\n        this.setValidating(false);                                                                                  // 233\n                                                                                                                    // 234\n        return AccountsTemplates.texts.requiredField;                                                               // 235\n      } else {                                                                                                      // 236\n        this.setSuccess();                                                                                          // 237\n        this.setValidating(false);                                                                                  // 238\n                                                                                                                    // 239\n        return false;                                                                                               // 240\n      }                                                                                                             // 241\n    } else {                                                                                                        // 242\n      this.clearStatus();                                                                                           // 243\n      this.setValidating(false);                                                                                    // 244\n                                                                                                                    // 245\n      return null;                                                                                                  // 246\n    }                                                                                                               // 247\n  }                                                                                                                 // 248\n                                                                                                                    // 249\n  var valueLength = value.length;                                                                                   // 250\n  var minLength = this.minLength;                                                                                   // 251\n  if (minLength && valueLength < minLength) {                                                                       // 252\n    this.setError(AccountsTemplates.texts.minRequiredLength + \": \" + minLength);                                    // 253\n    this.setValidating(false);                                                                                      // 254\n                                                                                                                    // 255\n    return AccountsTemplates.texts.minRequiredLength + \": \" + minLength;                                            // 256\n  }                                                                                                                 // 257\n                                                                                                                    // 258\n  var maxLength = this.maxLength;                                                                                   // 259\n  if (maxLength && valueLength > maxLength) {                                                                       // 260\n    this.setError(AccountsTemplates.texts.maxAllowedLength + \": \" + maxLength);                                     // 261\n    this.setValidating(false);                                                                                      // 262\n                                                                                                                    // 263\n    return AccountsTemplates.texts.maxAllowedLength + \": \" + maxLength;                                             // 264\n  }                                                                                                                 // 265\n                                                                                                                    // 266\n  if (this.re && valueLength && !value.match(this.re)) {                                                            // 267\n    this.setError(this.errStr);                                                                                     // 268\n    this.setValidating(false);                                                                                      // 269\n                                                                                                                    // 270\n    return this.errStr;                                                                                             // 271\n  }                                                                                                                 // 272\n                                                                                                                    // 273\n  if (this.func) {                                                                                                  // 274\n    var result = this.func(value);                                                                                  // 275\n    var err = result === true ? this.errStr || true : result;                                                       // 276\n                                                                                                                    // 277\n    if (_.isUndefined(result)) {                                                                                    // 278\n      return err;                                                                                                   // 279\n    }                                                                                                               // 280\n                                                                                                                    // 281\n    this.status.set(err);                                                                                           // 282\n    this.setValidating(false);                                                                                      // 283\n                                                                                                                    // 284\n    return err;                                                                                                     // 285\n  }                                                                                                                 // 286\n                                                                                                                    // 287\n  this.setSuccess();                                                                                                // 288\n  this.setValidating(false);                                                                                        // 289\n                                                                                                                    // 290\n  return false;                                                                                                     // 291\n};                                                                                                                  // 292\n                                                                                                                    // 293\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/useraccounts_core/lib/core.js                                                                           //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n// ---------------------------------------------------------------------------------                                // 1\n// Patterns for methods\" parameters                                                                                 // 2\n// ---------------------------------------------------------------------------------                                // 3\n                                                                                                                    // 4\nSTATE_PAT = {                                                                                                       // 5\n  changePwd: Match.Optional(String),                                                                                // 6\n  enrollAccount: Match.Optional(String),                                                                            // 7\n  forgotPwd: Match.Optional(String),                                                                                // 8\n  resetPwd: Match.Optional(String),                                                                                 // 9\n  signIn: Match.Optional(String),                                                                                   // 10\n  signUp: Match.Optional(String),                                                                                   // 11\n  verifyEmail: Match.Optional(String),                                                                              // 12\n  resendVerificationEmail: Match.Optional(String),                                                                  // 13\n};                                                                                                                  // 14\n                                                                                                                    // 15\nERRORS_PAT = {                                                                                                      // 16\n  accountsCreationDisabled: Match.Optional(String),                                                                 // 17\n  cannotRemoveService: Match.Optional(String),                                                                      // 18\n  captchaVerification: Match.Optional(String),                                                                      // 19\n  loginForbidden: Match.Optional(String),                                                                           // 20\n  mustBeLoggedIn: Match.Optional(String),                                                                           // 21\n  pwdMismatch: Match.Optional(String),                                                                              // 22\n  validationErrors: Match.Optional(String),                                                                         // 23\n  verifyEmailFirst: Match.Optional(String),                                                                         // 24\n};                                                                                                                  // 25\n                                                                                                                    // 26\nINFO_PAT = {                                                                                                        // 27\n  emailSent: Match.Optional(String),                                                                                // 28\n  emailVerified: Match.Optional(String),                                                                            // 29\n  pwdChanged: Match.Optional(String),                                                                               // 30\n  pwdReset: Match.Optional(String),                                                                                 // 31\n  pwdSet: Match.Optional(String),                                                                                   // 32\n  signUpVerifyEmail: Match.Optional(String),                                                                        // 33\n  verificationEmailSent: Match.Optional(String),                                                                    // 34\n};                                                                                                                  // 35\n                                                                                                                    // 36\nINPUT_ICONS_PAT = {                                                                                                 // 37\n  hasError: Match.Optional(String),                                                                                 // 38\n  hasSuccess: Match.Optional(String),                                                                               // 39\n  isValidating: Match.Optional(String),                                                                             // 40\n};                                                                                                                  // 41\n                                                                                                                    // 42\nObjWithStringValues = Match.Where(function (x) {                                                                    // 43\n  check(x, Object);                                                                                                 // 44\n  _.each(_.values(x), function(value) {                                                                             // 45\n      check(value, String);                                                                                         // 46\n  });                                                                                                               // 47\n  return true;                                                                                                      // 48\n});                                                                                                                 // 49\n                                                                                                                    // 50\nTEXTS_PAT = {                                                                                                       // 51\n  button: Match.Optional(STATE_PAT),                                                                                // 52\n  errors: Match.Optional(ERRORS_PAT),                                                                               // 53\n  info: Match.Optional(INFO_PAT),                                                                                   // 54\n  inputIcons: Match.Optional(INPUT_ICONS_PAT),                                                                      // 55\n  maxAllowedLength: Match.Optional(String),                                                                         // 56\n  minRequiredLength: Match.Optional(String),                                                                        // 57\n  navSignIn: Match.Optional(String),                                                                                // 58\n  navSignOut: Match.Optional(String),                                                                               // 59\n  optionalField: Match.Optional(String),                                                                            // 60\n  pwdLink_link: Match.Optional(String),                                                                             // 61\n  pwdLink_pre: Match.Optional(String),                                                                              // 62\n  pwdLink_suff: Match.Optional(String),                                                                             // 63\n  requiredField: Match.Optional(String),                                                                            // 64\n  resendVerificationEmailLink_pre: Match.Optional(String),                                                          // 65\n  resendVerificationEmailLink_link: Match.Optional(String),                                                         // 66\n  resendVerificationEmailLink_suff: Match.Optional(String),                                                         // 67\n  sep: Match.Optional(String),                                                                                      // 68\n  signInLink_link: Match.Optional(String),                                                                          // 69\n  signInLink_pre: Match.Optional(String),                                                                           // 70\n  signInLink_suff: Match.Optional(String),                                                                          // 71\n  signUpLink_link: Match.Optional(String),                                                                          // 72\n  signUpLink_pre: Match.Optional(String),                                                                           // 73\n  signUpLink_suff: Match.Optional(String),                                                                          // 74\n  socialAdd: Match.Optional(String),                                                                                // 75\n  socialConfigure: Match.Optional(String),                                                                          // 76\n  socialIcons: Match.Optional(ObjWithStringValues),                                                                 // 77\n  socialRemove: Match.Optional(String),                                                                             // 78\n  socialSignIn: Match.Optional(String),                                                                             // 79\n  socialSignUp: Match.Optional(String),                                                                             // 80\n  socialWith: Match.Optional(String),                                                                               // 81\n  termsAnd: Match.Optional(String),                                                                                 // 82\n  termsPreamble: Match.Optional(String),                                                                            // 83\n  termsPrivacy: Match.Optional(String),                                                                             // 84\n  termsTerms: Match.Optional(String),                                                                               // 85\n  title: Match.Optional(STATE_PAT),                                                                                 // 86\n};                                                                                                                  // 87\n                                                                                                                    // 88\n// Configuration pattern to be checked with check                                                                   // 89\nCONFIG_PAT = {                                                                                                      // 90\n  // Behaviour                                                                                                      // 91\n  confirmPassword: Match.Optional(Boolean),                                                                         // 92\n  defaultState: Match.Optional(String),                                                                             // 93\n  enablePasswordChange: Match.Optional(Boolean),                                                                    // 94\n  enforceEmailVerification: Match.Optional(Boolean),                                                                // 95\n  focusFirstInput: Match.Optional(Boolean),                                                                         // 96\n  forbidClientAccountCreation: Match.Optional(Boolean),                                                             // 97\n  lowercaseUsername: Match.Optional(Boolean),                                                                       // 98\n  overrideLoginErrors: Match.Optional(Boolean),                                                                     // 99\n  sendVerificationEmail: Match.Optional(Boolean),                                                                   // 100\n  socialLoginStyle: Match.Optional(Match.OneOf(\"popup\", \"redirect\")),                                               // 101\n                                                                                                                    // 102\n  // Appearance                                                                                                     // 103\n  defaultLayout: Match.Optional(String),                                                                            // 104\n  hideSignInLink: Match.Optional(Boolean),                                                                          // 105\n  hideSignUpLink: Match.Optional(Boolean),                                                                          // 106\n  showAddRemoveServices: Match.Optional(Boolean),                                                                   // 107\n  showForgotPasswordLink: Match.Optional(Boolean),                                                                  // 108\n  showResendVerificationEmailLink: Match.Optional(Boolean),                                                         // 109\n  showLabels: Match.Optional(Boolean),                                                                              // 110\n  showPlaceholders: Match.Optional(Boolean),                                                                        // 111\n                                                                                                                    // 112\n  // Client-side Validation                                                                                         // 113\n  continuousValidation: Match.Optional(Boolean),                                                                    // 114\n  negativeFeedback: Match.Optional(Boolean),                                                                        // 115\n  negativeValidation: Match.Optional(Boolean),                                                                      // 116\n  positiveFeedback: Match.Optional(Boolean),                                                                        // 117\n  positiveValidation: Match.Optional(Boolean),                                                                      // 118\n  showValidating: Match.Optional(Boolean),                                                                          // 119\n                                                                                                                    // 120\n  // Privacy Policy and Terms of Use                                                                                // 121\n  privacyUrl: Match.Optional(String),                                                                               // 122\n  termsUrl: Match.Optional(String),                                                                                 // 123\n                                                                                                                    // 124\n  // Redirects                                                                                                      // 125\n  homeRoutePath: Match.Optional(String),                                                                            // 126\n  redirectTimeout: Match.Optional(Number),                                                                          // 127\n                                                                                                                    // 128\n  // Hooks                                                                                                          // 129\n  onLogoutHook: Match.Optional(Function),                                                                           // 130\n  onSubmitHook: Match.Optional(Function),                                                                           // 131\n  preSignUpHook: Match.Optional(Function),                                                                          // 132\n  postSignUpHook: Match.Optional(Function),                                                                         // 133\n                                                                                                                    // 134\n  texts: Match.Optional(TEXTS_PAT),                                                                                 // 135\n                                                                                                                    // 136\n  //reCaptcha config                                                                                                // 137\n  reCaptcha: Match.Optional({                                                                                       // 138\n    data_type: Match.Optional(Match.OneOf(\"audio\", \"image\")),                                                       // 139\n    secretKey: Match.Optional(String),                                                                              // 140\n    siteKey: Match.Optional(String),                                                                                // 141\n    theme: Match.Optional(Match.OneOf(\"dark\", \"light\")),                                                            // 142\n  }),                                                                                                               // 143\n                                                                                                                    // 144\n  showReCaptcha: Match.Optional(Boolean),                                                                           // 145\n};                                                                                                                  // 146\n                                                                                                                    // 147\n                                                                                                                    // 148\nFIELD_SUB_PAT = {                                                                                                   // 149\n  \"default\": Match.Optional(String),                                                                                // 150\n  changePwd: Match.Optional(String),                                                                                // 151\n  enrollAccount: Match.Optional(String),                                                                            // 152\n  forgotPwd: Match.Optional(String),                                                                                // 153\n  resetPwd: Match.Optional(String),                                                                                 // 154\n  signIn: Match.Optional(String),                                                                                   // 155\n  signUp: Match.Optional(String),                                                                                   // 156\n};                                                                                                                  // 157\n                                                                                                                    // 158\n                                                                                                                    // 159\n// Field pattern                                                                                                    // 160\nFIELD_PAT = {                                                                                                       // 161\n  _id: String,                                                                                                      // 162\n  type: String,                                                                                                     // 163\n  required: Match.Optional(Boolean),                                                                                // 164\n  displayName: Match.Optional(Match.OneOf(String, Match.Where(_.isFunction), FIELD_SUB_PAT)),                       // 165\n  placeholder: Match.Optional(Match.OneOf(String, FIELD_SUB_PAT)),                                                  // 166\n  select: Match.Optional([{text: String, value: Match.Any}]),                                                       // 167\n  minLength: Match.Optional(Match.Integer),                                                                         // 168\n  maxLength: Match.Optional(Match.Integer),                                                                         // 169\n  re: Match.Optional(RegExp),                                                                                       // 170\n  func: Match.Optional(Match.Where(_.isFunction)),                                                                  // 171\n  errStr: Match.Optional(String),                                                                                   // 172\n                                                                                                                    // 173\n  // Client-side Validation                                                                                         // 174\n  continuousValidation: Match.Optional(Boolean),                                                                    // 175\n  negativeFeedback: Match.Optional(Boolean),                                                                        // 176\n  negativeValidation: Match.Optional(Boolean),                                                                      // 177\n  positiveValidation: Match.Optional(Boolean),                                                                      // 178\n  positiveFeedback: Match.Optional(Boolean),                                                                        // 179\n                                                                                                                    // 180\n  // Transforms                                                                                                     // 181\n  trim: Match.Optional(Boolean),                                                                                    // 182\n  lowercase: Match.Optional(Boolean),                                                                               // 183\n  uppercase: Match.Optional(Boolean),                                                                               // 184\n  transform: Match.Optional(Match.Where(_.isFunction)),                                                             // 185\n                                                                                                                    // 186\n  // Custom options                                                                                                 // 187\n  options: Match.Optional(Object),                                                                                  // 188\n  template: Match.Optional(String),                                                                                 // 189\n};                                                                                                                  // 190\n                                                                                                                    // 191\n// -----------------------------------------------------------------------------                                    // 192\n// AccountsTemplates object                                                                                         // 193\n// -----------------------------------------------------------------------------                                    // 194\n                                                                                                                    // 195\n// -------------------                                                                                              // 196\n// Client/Server stuff                                                                                              // 197\n// -------------------                                                                                              // 198\n                                                                                                                    // 199\n// Constructor                                                                                                      // 200\nAT = function() {                                                                                                   // 201\n                                                                                                                    // 202\n};                                                                                                                  // 203\n                                                                                                                    // 204\nAT.prototype.CONFIG_PAT = CONFIG_PAT;                                                                               // 205\n                                                                                                                    // 206\n/*                                                                                                                  // 207\n  Each field object is represented by the following properties:                                                     // 208\n    _id:         String   (required)  // A unique field\"s id / name                                                 // 209\n    type:        String   (required)  // Displayed input type                                                       // 210\n    required:    Boolean  (optional)  // Specifies Whether to fail or not when field is left empty                  // 211\n    displayName: String   (optional)  // The field\"s name to be displayed as a label above the input element        // 212\n    placeholder: String   (optional)  // The placeholder text to be displayed inside the input element              // 213\n    minLength:   Integer  (optional)  // Possibly specifies the minimum allowed length                              // 214\n    maxLength:   Integer  (optional)  // Possibly specifies the maximum allowed length                              // 215\n    re:          RegExp   (optional)  // Regular expression for validation                                          // 216\n    func:        Function (optional)  // Custom function for validation                                             // 217\n    errStr:      String   (optional)  // Error message to be displayed in case re validation fails                  // 218\n*/                                                                                                                  // 219\n                                                                                                                    // 220\n                                                                                                                    // 221\n// Allowed input types                                                                                              // 222\nAT.prototype.INPUT_TYPES = [                                                                                        // 223\n  \"checkbox\",                                                                                                       // 224\n  \"email\",                                                                                                          // 225\n  \"hidden\",                                                                                                         // 226\n  \"password\",                                                                                                       // 227\n  \"radio\",                                                                                                          // 228\n  \"select\",                                                                                                         // 229\n  \"tel\",                                                                                                            // 230\n  \"text\",                                                                                                           // 231\n  \"url\",                                                                                                            // 232\n];                                                                                                                  // 233\n                                                                                                                    // 234\n// Current configuration values                                                                                     // 235\nAT.prototype.options = {                                                                                            // 236\n  // Appearance                                                                                                     // 237\n  //defaultLayout: undefined,                                                                                       // 238\n  showAddRemoveServices: false,                                                                                     // 239\n  showForgotPasswordLink: false,                                                                                    // 240\n  showResendVerificationEmailLink: false,                                                                           // 241\n  showLabels: true,                                                                                                 // 242\n  showPlaceholders: true,                                                                                           // 243\n                                                                                                                    // 244\n  // Behaviour                                                                                                      // 245\n  confirmPassword: true,                                                                                            // 246\n  defaultState: \"signIn\",                                                                                           // 247\n  enablePasswordChange: false,                                                                                      // 248\n  focusFirstInput: !Meteor.isCordova,                                                                               // 249\n  forbidClientAccountCreation: false,                                                                               // 250\n  lowercaseUsername: false,                                                                                         // 251\n  overrideLoginErrors: true,                                                                                        // 252\n  sendVerificationEmail: false,                                                                                     // 253\n  socialLoginStyle: \"popup\",                                                                                        // 254\n                                                                                                                    // 255\n  // Client-side Validation                                                                                         // 256\n  //continuousValidation: false,                                                                                    // 257\n  //negativeFeedback: false,                                                                                        // 258\n  //negativeValidation: false,                                                                                      // 259\n  //positiveValidation: false,                                                                                      // 260\n  //positiveFeedback: false,                                                                                        // 261\n  //showValidating: false,                                                                                          // 262\n                                                                                                                    // 263\n  // Privacy Policy and Terms of Use                                                                                // 264\n  privacyUrl: undefined,                                                                                            // 265\n  termsUrl: undefined,                                                                                              // 266\n                                                                                                                    // 267\n  // Hooks                                                                                                          // 268\n  onSubmitHook: undefined,                                                                                          // 269\n};                                                                                                                  // 270\n                                                                                                                    // 271\nAT.prototype.texts = {                                                                                              // 272\n  button: {                                                                                                         // 273\n    changePwd: \"updateYourPassword\",                                                                                // 274\n    //enrollAccount: \"createAccount\",                                                                               // 275\n    enrollAccount: \"signUp\",                                                                                        // 276\n    forgotPwd: \"emailResetLink\",                                                                                    // 277\n    resetPwd: \"setPassword\",                                                                                        // 278\n    signIn: \"signIn\",                                                                                               // 279\n    signUp: \"signUp\",                                                                                               // 280\n    resendVerificationEmail: \"Send email again\",                                                                    // 281\n  },                                                                                                                // 282\n  errors: {                                                                                                         // 283\n    accountsCreationDisabled: \"Client side accounts creation is disabled!!!\",                                       // 284\n    cannotRemoveService: \"Cannot remove the only active service!\",                                                  // 285\n    captchaVerification: \"Captcha verification failed!\",                                                            // 286\n    loginForbidden: \"error.accounts.Login forbidden\",                                                               // 287\n    mustBeLoggedIn: \"error.accounts.Must be logged in\",                                                             // 288\n    pwdMismatch: \"error.pwdsDontMatch\",                                                                             // 289\n    validationErrors: \"Validation Errors\",                                                                          // 290\n    verifyEmailFirst: \"Please verify your email first. Check the email and follow the link!\",                       // 291\n  },                                                                                                                // 292\n  navSignIn: 'signIn',                                                                                              // 293\n  navSignOut: 'signOut',                                                                                            // 294\n  info: {                                                                                                           // 295\n    emailSent: \"info.emailSent\",                                                                                    // 296\n    emailVerified: \"info.emailVerified\",                                                                            // 297\n    pwdChanged: \"info.passwordChanged\",                                                                             // 298\n    pwdReset: \"info.passwordReset\",                                                                                 // 299\n    pwdSet: \"Password Set\",                                                                                         // 300\n    signUpVerifyEmail: \"Successful Registration! Please check your email and follow the instructions.\",             // 301\n    verificationEmailSent: \"A new email has been sent to you. If the email doesn't show up in your inbox, be sure to check your spam folder.\",\n  },                                                                                                                // 303\n  inputIcons: {                                                                                                     // 304\n    isValidating: \"fa fa-spinner fa-spin\",                                                                          // 305\n    hasSuccess: \"fa fa-check\",                                                                                      // 306\n    hasError: \"fa fa-times\",                                                                                        // 307\n  },                                                                                                                // 308\n  maxAllowedLength: \"Maximum allowed length\",                                                                       // 309\n  minRequiredLength: \"Minimum required length\",                                                                     // 310\n  optionalField: \"optional\",                                                                                        // 311\n  pwdLink_pre: \"\",                                                                                                  // 312\n  pwdLink_link: \"forgotPassword\",                                                                                   // 313\n  pwdLink_suff: \"\",                                                                                                 // 314\n  requiredField: \"Required Field\",                                                                                  // 315\n  resendVerificationEmailLink_pre: \"Verification email lost?\",                                                      // 316\n  resendVerificationEmailLink_link: \"Send again\",                                                                   // 317\n  resendVerificationEmailLink_suff: \"\",                                                                             // 318\n  sep: \"OR\",                                                                                                        // 319\n  signInLink_pre: \"ifYouAlreadyHaveAnAccount\",                                                                      // 320\n  signInLink_link: \"signin\",                                                                                        // 321\n  signInLink_suff: \"\",                                                                                              // 322\n  signUpLink_pre: \"dontHaveAnAccount\",                                                                              // 323\n  signUpLink_link: \"signUp\",                                                                                        // 324\n  signUpLink_suff: \"\",                                                                                              // 325\n  socialAdd: \"add\",                                                                                                 // 326\n  socialConfigure: \"configure\",                                                                                     // 327\n  socialIcons: {                                                                                                    // 328\n      \"meteor-developer\": \"fa fa-rocket\"                                                                            // 329\n  },                                                                                                                // 330\n  socialRemove: \"remove\",                                                                                           // 331\n  socialSignIn: \"signIn\",                                                                                           // 332\n  socialSignUp: \"signUp\",                                                                                           // 333\n  socialWith: \"with\",                                                                                               // 334\n  termsPreamble: \"clickAgree\",                                                                                      // 335\n  termsPrivacy: \"privacyPolicy\",                                                                                    // 336\n  termsAnd: \"and\",                                                                                                  // 337\n  termsTerms: \"terms\",                                                                                              // 338\n  title: {                                                                                                          // 339\n    changePwd: \"changePassword\",                                                                                    // 340\n    enrollAccount: \"createAccount\",                                                                                 // 341\n    forgotPwd: \"resetYourPassword\",                                                                                 // 342\n    resetPwd: \"resetYourPassword\",                                                                                  // 343\n    signIn: \"signIn\",                                                                                               // 344\n    signUp: \"createAccount\",                                                                                        // 345\n    verifyEmail: \"\",                                                                                                // 346\n    resendVerificationEmail: \"Send the verification email again\",                                                   // 347\n  },                                                                                                                // 348\n};                                                                                                                  // 349\n                                                                                                                    // 350\nAT.prototype.SPECIAL_FIELDS = [                                                                                     // 351\n  \"password_again\",                                                                                                 // 352\n  \"username_and_email\",                                                                                             // 353\n];                                                                                                                  // 354\n                                                                                                                    // 355\n// SignIn / SignUp fields                                                                                           // 356\nAT.prototype._fields = [                                                                                            // 357\n  new Field({                                                                                                       // 358\n    _id: \"email\",                                                                                                   // 359\n    type: \"email\",                                                                                                  // 360\n    required: true,                                                                                                 // 361\n    lowercase: true,                                                                                                // 362\n    trim: true,                                                                                                     // 363\n    func: function(email) {                                                                                         // 364\n        return !_.contains(email, '@');                                                                             // 365\n    },                                                                                                              // 366\n    errStr: 'Invalid email',                                                                                        // 367\n  }),                                                                                                               // 368\n  new Field({                                                                                                       // 369\n    _id: \"password\",                                                                                                // 370\n    type: \"password\",                                                                                               // 371\n    required: true,                                                                                                 // 372\n    minLength: 6,                                                                                                   // 373\n    displayName: {                                                                                                  // 374\n        \"default\": \"password\",                                                                                      // 375\n        changePwd: \"newPassword\",                                                                                   // 376\n        resetPwd: \"newPassword\",                                                                                    // 377\n    },                                                                                                              // 378\n    placeholder: {                                                                                                  // 379\n        \"default\": \"password\",                                                                                      // 380\n        changePwd: \"newPassword\",                                                                                   // 381\n        resetPwd: \"newPassword\",                                                                                    // 382\n    },                                                                                                              // 383\n  }),                                                                                                               // 384\n];                                                                                                                  // 385\n                                                                                                                    // 386\n                                                                                                                    // 387\nAT.prototype._initialized = false;                                                                                  // 388\n                                                                                                                    // 389\n// Input type validation                                                                                            // 390\nAT.prototype._isValidInputType = function(value) {                                                                  // 391\n    return _.indexOf(this.INPUT_TYPES, value) !== -1;                                                               // 392\n};                                                                                                                  // 393\n                                                                                                                    // 394\nAT.prototype.addField = function(field) {                                                                           // 395\n    // Fields can be added only before initialization                                                               // 396\n    if (this._initialized) {                                                                                        // 397\n      throw new Error(\"AccountsTemplates.addField should strictly be called before AccountsTemplates.init!\");       // 398\n    }                                                                                                               // 399\n                                                                                                                    // 400\n    field = _.pick(field, _.keys(FIELD_PAT));                                                                       // 401\n    check(field, FIELD_PAT);                                                                                        // 402\n    // Checks there\"s currently no field called field._id                                                           // 403\n    if (_.indexOf(_.pluck(this._fields, \"_id\"), field._id) !== -1) {                                                // 404\n      throw new Error(\"A field called \" + field._id + \" already exists!\");                                          // 405\n    }                                                                                                               // 406\n    // Validates field.type                                                                                         // 407\n    if (!this._isValidInputType(field.type)) {                                                                      // 408\n      throw new Error(\"field.type is not valid!\");                                                                  // 409\n    }                                                                                                               // 410\n    // Checks field.minLength is strictly positive                                                                  // 411\n    if (typeof field.minLength !== \"undefined\" && field.minLength <= 0) {                                           // 412\n      throw new Error(\"field.minLength should be greater than zero!\");                                              // 413\n    }                                                                                                               // 414\n    // Checks field.maxLength is strictly positive                                                                  // 415\n    if (typeof field.maxLength !== \"undefined\" && field.maxLength <= 0) {                                           // 416\n      throw new Error(\"field.maxLength should be greater than zero!\");                                              // 417\n    }                                                                                                               // 418\n    // Checks field.maxLength is greater than field.minLength                                                       // 419\n    if (typeof field.minLength !== \"undefined\" && typeof field.minLength !== \"undefined\" && field.maxLength < field.minLength) {\n      throw new Error(\"field.maxLength should be greater than field.maxLength!\");                                   // 421\n    }                                                                                                               // 422\n                                                                                                                    // 423\n    if (!(Meteor.isServer && _.contains(this.SPECIAL_FIELDS, field._id))) {                                         // 424\n      this._fields.push(new Field(field));                                                                          // 425\n    }                                                                                                               // 426\n                                                                                                                    // 427\n    return this._fields;                                                                                            // 428\n};                                                                                                                  // 429\n                                                                                                                    // 430\nAT.prototype.addFields = function(fields) {                                                                         // 431\n  var ok;                                                                                                           // 432\n                                                                                                                    // 433\n  try { // don\"t bother with `typeof` - just access `length` and `catch`                                            // 434\n    ok = fields.length > 0 && \"0\" in Object(fields);                                                                // 435\n  } catch (e) {                                                                                                     // 436\n    throw new Error(\"field argument should be an array of valid field objects!\");                                   // 437\n  }                                                                                                                 // 438\n  if (ok) {                                                                                                         // 439\n    _.map(fields, function(field) {                                                                                 // 440\n      this.addField(field);                                                                                         // 441\n    }, this);                                                                                                       // 442\n  } else {                                                                                                          // 443\n    throw new Error(\"field argument should be an array of valid field objects!\");                                   // 444\n  }                                                                                                                 // 445\n                                                                                                                    // 446\n  return this._fields;                                                                                              // 447\n};                                                                                                                  // 448\n                                                                                                                    // 449\nAT.prototype.configure = function(config) {                                                                         // 450\n  // Configuration options can be set only before initialization                                                    // 451\n  if (this._initialized) {                                                                                          // 452\n    throw new Error(\"Configuration options must be set before AccountsTemplates.init!\");                            // 453\n  }                                                                                                                 // 454\n                                                                                                                    // 455\n  // Updates the current configuration                                                                              // 456\n  check(config, CONFIG_PAT);                                                                                        // 457\n  var options = _.omit(config, \"texts\", \"reCaptcha\");                                                               // 458\n  this.options = _.defaults(options, this.options);                                                                 // 459\n                                                                                                                    // 460\n  // Possibly sets up reCaptcha options                                                                             // 461\n  var reCaptcha = config.reCaptcha;                                                                                 // 462\n  if (reCaptcha) {                                                                                                  // 463\n    // Updates the current button object                                                                            // 464\n    this.options.reCaptcha = _.defaults(reCaptcha, this.options.reCaptcha || {});                                   // 465\n  }                                                                                                                 // 466\n                                                                                                                    // 467\n  // Possibly sets up texts...                                                                                      // 468\n  if (config.texts) {                                                                                               // 469\n    var texts = config.texts;                                                                                       // 470\n    var simpleTexts = _.omit(texts, \"button\", \"errors\", \"info\", \"inputIcons\", \"socialIcons\", \"title\");              // 471\n                                                                                                                    // 472\n    this.texts = _.defaults(simpleTexts, this.texts);                                                               // 473\n                                                                                                                    // 474\n    if (texts.button) {                                                                                             // 475\n      // Updates the current button object                                                                          // 476\n      this.texts.button = _.defaults(texts.button, this.texts.button);                                              // 477\n    }                                                                                                               // 478\n                                                                                                                    // 479\n    if (texts.errors) {                                                                                             // 480\n      // Updates the current errors object                                                                          // 481\n      this.texts.errors = _.defaults(texts.errors, this.texts.errors);                                              // 482\n    }                                                                                                               // 483\n                                                                                                                    // 484\n    if (texts.info) {                                                                                               // 485\n      // Updates the current info object                                                                            // 486\n      this.texts.info = _.defaults(texts.info, this.texts.info);                                                    // 487\n    }                                                                                                               // 488\n                                                                                                                    // 489\n    if (texts.inputIcons) {                                                                                         // 490\n      // Updates the current inputIcons object                                                                      // 491\n      this.texts.inputIcons = _.defaults(texts.inputIcons, this.texts.inputIcons);                                  // 492\n    }                                                                                                               // 493\n                                                                                                                    // 494\n    if (texts.socialIcons) {                                                                                        // 495\n      // Updates the current socialIcons object                                                                     // 496\n      this.texts.socialIcons = _.defaults(texts.socialIcons, this.texts.socialIcons);                               // 497\n    }                                                                                                               // 498\n                                                                                                                    // 499\n    if (texts.title) {                                                                                              // 500\n      // Updates the current title object                                                                           // 501\n      this.texts.title = _.defaults(texts.title, this.texts.title);                                                 // 502\n    }                                                                                                               // 503\n  }                                                                                                                 // 504\n};                                                                                                                  // 505\n                                                                                                                    // 506\n                                                                                                                    // 507\nAT.prototype.configureRoute = function(route, options) {                                                            // 508\n  console.warn('You now need a routing package like useraccounts:iron-routing or useraccounts:flow-routing to be able to configure routes!');\n};                                                                                                                  // 510\n                                                                                                                    // 511\n                                                                                                                    // 512\nAT.prototype.hasField = function(fieldId) {                                                                         // 513\n  return !!this.getField(fieldId);                                                                                  // 514\n};                                                                                                                  // 515\n                                                                                                                    // 516\nAT.prototype.getField = function(fieldId) {                                                                         // 517\n  var field = _.filter(this._fields, function(field) {                                                              // 518\n    return field._id === fieldId;                                                                                   // 519\n  });                                                                                                               // 520\n                                                                                                                    // 521\n  return (field.length === 1) ? field[0] : undefined;                                                               // 522\n};                                                                                                                  // 523\n                                                                                                                    // 524\nAT.prototype.getFields = function() {                                                                               // 525\n    return this._fields;                                                                                            // 526\n};                                                                                                                  // 527\n                                                                                                                    // 528\nAT.prototype.getFieldIds = function() {                                                                             // 529\n    return _.pluck(this._fields, \"_id\");                                                                            // 530\n};                                                                                                                  // 531\n                                                                                                                    // 532\nAT.prototype.getRoutePath = function(route) {                                                                       // 533\n    return \"#\";                                                                                                     // 534\n};                                                                                                                  // 535\n                                                                                                                    // 536\nAT.prototype.oauthServices = function() {                                                                           // 537\n  // Extracts names of available services                                                                           // 538\n  var names;                                                                                                        // 539\n                                                                                                                    // 540\n  if (Meteor.isServer) {                                                                                            // 541\n    names = (Accounts.oauth && Accounts.oauth.serviceNames()) || [];                                                // 542\n  } else {                                                                                                          // 543\n    names = (Accounts.oauth && Accounts.loginServicesConfigured() && Accounts.oauth.serviceNames()) || [];          // 544\n  }                                                                                                                 // 545\n  // Extracts names of configured services                                                                          // 546\n  var configuredServices = [];                                                                                      // 547\n                                                                                                                    // 548\n  if (Accounts.loginServiceConfiguration) {                                                                         // 549\n    configuredServices = _.pluck(Accounts.loginServiceConfiguration.find().fetch(), \"service\");                     // 550\n  }                                                                                                                 // 551\n                                                                                                                    // 552\n  // Builds a list of objects containing service name as _id and its configuration status                           // 553\n  var services = _.map(names, function(name) {                                                                      // 554\n    return {                                                                                                        // 555\n      _id : name,                                                                                                   // 556\n      configured: _.contains(configuredServices, name),                                                             // 557\n    };                                                                                                              // 558\n  });                                                                                                               // 559\n                                                                                                                    // 560\n  // Checks whether there is a UI to configure services...                                                          // 561\n  // XXX: this only works with the accounts-ui package                                                              // 562\n  var showUnconfigured = typeof Accounts._loginButtonsSession !== \"undefined\";                                      // 563\n                                                                                                                    // 564\n  // Filters out unconfigured services in case they\"re not to be displayed                                          // 565\n  if (!showUnconfigured) {                                                                                          // 566\n    services = _.filter(services, function(service) {                                                               // 567\n      return service.configured;                                                                                    // 568\n    });                                                                                                             // 569\n  }                                                                                                                 // 570\n                                                                                                                    // 571\n  // Sorts services by name                                                                                         // 572\n  services = _.sortBy(services, function(service) {                                                                 // 573\n    return service._id;                                                                                             // 574\n  });                                                                                                               // 575\n                                                                                                                    // 576\n  return services;                                                                                                  // 577\n};                                                                                                                  // 578\n                                                                                                                    // 579\nAT.prototype.removeField = function(fieldId) {                                                                      // 580\n  // Fields can be removed only before initialization                                                               // 581\n  if (this._initialized) {                                                                                          // 582\n    throw new Error(\"AccountsTemplates.removeField should strictly be called before AccountsTemplates.init!\");      // 583\n  }                                                                                                                 // 584\n  // Tries to look up the field with given _id                                                                      // 585\n  var index = _.indexOf(_.pluck(this._fields, \"_id\"), fieldId);                                                     // 586\n                                                                                                                    // 587\n  if (index !== -1) {                                                                                               // 588\n    return this._fields.splice(index, 1)[0];                                                                        // 589\n  } else if (!(Meteor.isServer && _.contains(this.SPECIAL_FIELDS, fieldId))) {                                      // 590\n    throw new Error(\"A field called \" + fieldId + \" does not exist!\");                                              // 591\n  }                                                                                                                 // 592\n};                                                                                                                  // 593\n                                                                                                                    // 594\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/useraccounts_core/lib/client.js                                                                         //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n/* global                                                                                                           // 1\n  AT: false                                                                                                         // 2\n*/                                                                                                                  // 3\n\"use strict\";                                                                                                       // 4\n                                                                                                                    // 5\n// Allowed Internal (client-side) States                                                                            // 6\nAT.prototype.STATES = [                                                                                             // 7\n  \"changePwd\", // Change Password                                                                                   // 8\n  \"enrollAccount\", // Account Enrollment                                                                            // 9\n  \"forgotPwd\", // Forgot Password                                                                                   // 10\n  \"hide\", // Nothing displayed                                                                                      // 11\n  \"resetPwd\", // Reset Password                                                                                     // 12\n  \"signIn\", // Sign In                                                                                              // 13\n  \"signUp\", // Sign Up                                                                                              // 14\n  \"verifyEmail\", // Email verification                                                                              // 15\n  \"resendVerificationEmail\", // Resend verification email                                                           // 16\n];                                                                                                                  // 17\n                                                                                                                    // 18\nAT.prototype._loginType = \"\";                                                                                       // 19\n                                                                                                                    // 20\n// Flag telling whether the whole form should appear disabled                                                       // 21\nAT.prototype._disabled = false;                                                                                     // 22\n                                                                                                                    // 23\n// State validation                                                                                                 // 24\nAT.prototype._isValidState = function(value) {                                                                      // 25\n  return _.contains(this.STATES, value);                                                                            // 26\n};                                                                                                                  // 27\n                                                                                                                    // 28\n// Flags used to avoid clearing errors and redirecting to previous route when                                       // 29\n// signing in/up as a results of a call to ensureSignedIn                                                           // 30\nAT.prototype.avoidRedirect = false;                                                                                 // 31\nAT.prototype.avoidClearError = false;                                                                               // 32\n                                                                                                                    // 33\n// Token to be provided for routes like reset-password and enroll-account                                           // 34\nAT.prototype.paramToken = null;                                                                                     // 35\n                                                                                                                    // 36\nAT.prototype.loginType = function () {                                                                              // 37\n  return this._loginType;                                                                                           // 38\n};                                                                                                                  // 39\n                                                                                                                    // 40\nAT.prototype.getparamToken = function() {                                                                           // 41\n  return this.paramToken;                                                                                           // 42\n};                                                                                                                  // 43\n                                                                                                                    // 44\n// Getter for current state                                                                                         // 45\nAT.prototype.getState = function() {                                                                                // 46\n  return this.state.form.get(\"state\");                                                                              // 47\n};                                                                                                                  // 48\n                                                                                                                    // 49\n// Getter for disabled state                                                                                        // 50\nAT.prototype.disabled = function() {                                                                                // 51\n  return this.state.form.equals(\"disabled\", true) ? \"disabled\" : undefined;                                         // 52\n};                                                                                                                  // 53\n                                                                                                                    // 54\n// Setter for disabled state                                                                                        // 55\nAT.prototype.setDisabled = function(value) {                                                                        // 56\n  check(value, Boolean);                                                                                            // 57\n  return this.state.form.set(\"disabled\", value);                                                                    // 58\n};                                                                                                                  // 59\n                                                                                                                    // 60\n// Setter for current state                                                                                         // 61\nAT.prototype.setState = function(state, callback) {                                                                 // 62\n  check(state, String);                                                                                             // 63\n                                                                                                                    // 64\n  if (!this._isValidState(state) || (this.options.forbidClientAccountCreation && state === 'signUp')) {             // 65\n    throw new Meteor.Error(500, \"Internal server error\", \"accounts-templates-core package got an invalid state value!\");\n  }                                                                                                                 // 67\n                                                                                                                    // 68\n  this.state.form.set(\"state\", state);                                                                              // 69\n  if (!this.avoidClearError) {                                                                                      // 70\n    this.clearState();                                                                                              // 71\n  }                                                                                                                 // 72\n  this.avoidClearError = false;                                                                                     // 73\n                                                                                                                    // 74\n  if (_.isFunction(callback)) {                                                                                     // 75\n    callback();                                                                                                     // 76\n  }                                                                                                                 // 77\n};                                                                                                                  // 78\n                                                                                                                    // 79\nAT.prototype.clearState = function() {                                                                              // 80\n  _.each(this._fields, function(field) {                                                                            // 81\n    field.clearStatus();                                                                                            // 82\n  });                                                                                                               // 83\n                                                                                                                    // 84\n  var form = this.state.form;                                                                                       // 85\n                                                                                                                    // 86\n  form.set(\"error\", null);                                                                                          // 87\n  form.set(\"result\", null);                                                                                         // 88\n  form.set(\"message\", null);                                                                                        // 89\n                                                                                                                    // 90\n  AccountsTemplates.setDisabled(false);                                                                             // 91\n};                                                                                                                  // 92\n                                                                                                                    // 93\nAT.prototype.clearError = function() {                                                                              // 94\n  this.state.form.set(\"error\", null);                                                                               // 95\n};                                                                                                                  // 96\n                                                                                                                    // 97\nAT.prototype.clearResult = function() {                                                                             // 98\n  this.state.form.set(\"result\", null);                                                                              // 99\n};                                                                                                                  // 100\n                                                                                                                    // 101\nAT.prototype.clearMessage = function() {                                                                            // 102\n  this.state.form.set(\"message\", null);                                                                             // 103\n};                                                                                                                  // 104\n                                                                                                                    // 105\n// Initialization                                                                                                   // 106\nAT.prototype.init = function() {                                                                                    // 107\n  console.warn(\"[AccountsTemplates] There is no more need to call AccountsTemplates.init()! Simply remove the call ;-)\");\n};                                                                                                                  // 109\n                                                                                                                    // 110\nAT.prototype._init = function() {                                                                                   // 111\n  if (this._initialized) {                                                                                          // 112\n    return;                                                                                                         // 113\n  }                                                                                                                 // 114\n                                                                                                                    // 115\n  var usernamePresent = this.hasField(\"username\");                                                                  // 116\n  var emailPresent = this.hasField(\"email\");                                                                        // 117\n                                                                                                                    // 118\n  if (usernamePresent && emailPresent) {                                                                            // 119\n    this._loginType = \"username_and_email\";                                                                         // 120\n  } else {                                                                                                          // 121\n    this._loginType = usernamePresent ? \"username\" : \"email\";                                                       // 122\n  }                                                                                                                 // 123\n                                                                                                                    // 124\n  if (this._loginType === \"username_and_email\") {                                                                   // 125\n    // Possibly adds the field username_and_email in case                                                           // 126\n    // it was not configured                                                                                        // 127\n    if (!this.hasField(\"username_and_email\")) {                                                                     // 128\n      this.addField({                                                                                               // 129\n        _id: \"username_and_email\",                                                                                  // 130\n        type: \"text\",                                                                                               // 131\n        displayName: \"usernameOrEmail\",                                                                             // 132\n        placeholder: \"usernameOrEmail\",                                                                             // 133\n        required: true,                                                                                             // 134\n      });                                                                                                           // 135\n    }                                                                                                               // 136\n  }                                                                                                                 // 137\n                                                                                                                    // 138\n  // Only in case password confirmation is required                                                                 // 139\n  if (this.options.confirmPassword) {                                                                               // 140\n    // Possibly adds the field password_again in case                                                               // 141\n    // it was not configured                                                                                        // 142\n    if (!this.hasField(\"password_again\")) {                                                                         // 143\n      var pwdAgain = _.clone(this.getField(\"password\"));                                                            // 144\n                                                                                                                    // 145\n      pwdAgain._id = \"password_again\";                                                                              // 146\n      pwdAgain.displayName = {                                                                                      // 147\n        \"default\": \"passwordAgain\",                                                                                 // 148\n        changePwd: \"newPasswordAgain\",                                                                              // 149\n        resetPwd: \"newPasswordAgain\",                                                                               // 150\n      };                                                                                                            // 151\n      pwdAgain.placeholder = {                                                                                      // 152\n        \"default\": \"passwordAgain\",                                                                                 // 153\n        changePwd: \"newPasswordAgain\",                                                                              // 154\n        resetPwd: \"newPasswordAgain\",                                                                               // 155\n      };                                                                                                            // 156\n      this.addField(pwdAgain);                                                                                      // 157\n    }                                                                                                               // 158\n  } else {                                                                                                          // 159\n    if (this.hasField(\"password_again\")) {                                                                          // 160\n      throw new Error(\"AccountsTemplates: a field password_again was added but confirmPassword is set to false!\");  // 161\n    }                                                                                                               // 162\n  }                                                                                                                 // 163\n                                                                                                                    // 164\n  // Possibly adds the field current_password in case                                                               // 165\n  // it was not configured                                                                                          // 166\n  if (this.options.enablePasswordChange) {                                                                          // 167\n    if (!this.hasField(\"current_password\")) {                                                                       // 168\n      this.addField({                                                                                               // 169\n        _id: \"current_password\",                                                                                    // 170\n        type: \"password\",                                                                                           // 171\n        displayName: \"currentPassword\",                                                                             // 172\n        placeholder: \"currentPassword\",                                                                             // 173\n        required: true,                                                                                             // 174\n      });                                                                                                           // 175\n    }                                                                                                               // 176\n  }                                                                                                                 // 177\n                                                                                                                    // 178\n  // Ensuser the right order of special fields                                                                      // 179\n  var moveFieldAfter = function(fieldName, referenceFieldName) {                                                    // 180\n    var fieldIds = AccountsTemplates.getFieldIds();                                                                 // 181\n    var refFieldId = _.indexOf(fieldIds, referenceFieldName);                                                       // 182\n    // In case the reference field is not present, just return...                                                   // 183\n    if (refFieldId === -1) {                                                                                        // 184\n      return;                                                                                                       // 185\n    }                                                                                                               // 186\n                                                                                                                    // 187\n    var fieldId = _.indexOf(fieldIds, fieldName);                                                                   // 188\n    // In case the sought field is not present, just return...                                                      // 189\n    if (fieldId === -1) {                                                                                           // 190\n      return;                                                                                                       // 191\n    }                                                                                                               // 192\n                                                                                                                    // 193\n    if (fieldId !== -1 && fieldId !== (refFieldId + 1)) {                                                           // 194\n      // removes the field                                                                                          // 195\n      var field = AccountsTemplates._fields.splice(fieldId, 1)[0];                                                  // 196\n      // push the field right after the reference field position                                                    // 197\n      var newFieldIds = AccountsTemplates.getFieldIds();                                                            // 198\n      var newReferenceFieldId = _.indexOf(newFieldIds, referenceFieldName);                                         // 199\n      AccountsTemplates._fields.splice(newReferenceFieldId + 1, 0, field);                                          // 200\n    }                                                                                                               // 201\n  };                                                                                                                // 202\n                                                                                                                    // 203\n  // Ensuser the right order of special fields                                                                      // 204\n  var moveFieldBefore = function(fieldName, referenceFieldName) {                                                   // 205\n    var fieldIds = AccountsTemplates.getFieldIds();                                                                 // 206\n    var refFieldId = _.indexOf(fieldIds, referenceFieldName);                                                       // 207\n    // In case the reference field is not present, just return...                                                   // 208\n    if (refFieldId === -1) {                                                                                        // 209\n      return;                                                                                                       // 210\n    }                                                                                                               // 211\n                                                                                                                    // 212\n    var fieldId = _.indexOf(fieldIds, fieldName);                                                                   // 213\n    // In case the sought field is not present, just return...                                                      // 214\n    if (fieldId === -1) {                                                                                           // 215\n      return;                                                                                                       // 216\n    }                                                                                                               // 217\n                                                                                                                    // 218\n    if (fieldId !== -1 && fieldId !== (refFieldId - 1)) {                                                           // 219\n      // removes the field                                                                                          // 220\n      var field = AccountsTemplates._fields.splice(fieldId, 1)[0];                                                  // 221\n      // push the field right after the reference field position                                                    // 222\n      var newFieldIds = AccountsTemplates.getFieldIds();                                                            // 223\n      var newReferenceFieldId = _.indexOf(newFieldIds, referenceFieldName);                                         // 224\n      AccountsTemplates._fields.splice(newReferenceFieldId, 0, field);                                              // 225\n    }                                                                                                               // 226\n  };                                                                                                                // 227\n                                                                                                                    // 228\n  // The final order should be something like:                                                                      // 229\n  // - username                                                                                                     // 230\n  // - email                                                                                                        // 231\n  // - username_and_email                                                                                           // 232\n  // - password                                                                                                     // 233\n  // - password_again                                                                                               // 234\n  //                                                                                                                // 235\n  // ...so lets do it in reverse order...                                                                           // 236\n  moveFieldAfter(\"username_and_email\", \"username\");                                                                 // 237\n  moveFieldAfter(\"username_and_email\", \"email\");                                                                    // 238\n  moveFieldBefore(\"current_password\", \"password\");                                                                  // 239\n  moveFieldAfter(\"password\", \"current_password\");                                                                   // 240\n  moveFieldAfter(\"password_again\", \"password\");                                                                     // 241\n                                                                                                                    // 242\n                                                                                                                    // 243\n  // Sets visibility condition and validation flags for each field                                                  // 244\n  var gPositiveValidation = !!AccountsTemplates.options.positiveValidation;                                         // 245\n  var gNegativeValidation = !!AccountsTemplates.options.negativeValidation;                                         // 246\n  var gShowValidating = !!AccountsTemplates.options.showValidating;                                                 // 247\n  var gContinuousValidation = !!AccountsTemplates.options.continuousValidation;                                     // 248\n  var gNegativeFeedback = !!AccountsTemplates.options.negativeFeedback;                                             // 249\n  var gPositiveFeedback = !!AccountsTemplates.options.positiveFeedback;                                             // 250\n                                                                                                                    // 251\n  _.each(this._fields, function(field) {                                                                            // 252\n    // Visibility                                                                                                   // 253\n    switch(field._id) {                                                                                             // 254\n      case \"current_password\":                                                                                      // 255\n        field.visible = [\"changePwd\"];                                                                              // 256\n        break;                                                                                                      // 257\n      case \"email\":                                                                                                 // 258\n        field.visible = [\"forgotPwd\", \"signUp\", \"resendVerificationEmail\"];                                         // 259\n        if (AccountsTemplates.loginType() === \"email\") {                                                            // 260\n          field.visible.push(\"signIn\");                                                                             // 261\n        }                                                                                                           // 262\n        break;                                                                                                      // 263\n      case \"password\":                                                                                              // 264\n        field.visible = [\"changePwd\", \"enrollAccount\", \"resetPwd\", \"signIn\", \"signUp\"];                             // 265\n        break;                                                                                                      // 266\n      case \"password_again\":                                                                                        // 267\n        field.visible = [\"changePwd\", \"enrollAccount\", \"resetPwd\", \"signUp\"];                                       // 268\n        break;                                                                                                      // 269\n      case \"username\":                                                                                              // 270\n        field.visible = [\"signUp\"];                                                                                 // 271\n        if (AccountsTemplates.loginType() === \"username\") {                                                         // 272\n          field.visible.push(\"signIn\");                                                                             // 273\n        }                                                                                                           // 274\n        break;                                                                                                      // 275\n      case \"username_and_email\":                                                                                    // 276\n        field.visible = [];                                                                                         // 277\n        if (AccountsTemplates.loginType() === \"username_and_email\") {                                               // 278\n          field.visible.push(\"signIn\");                                                                             // 279\n        }                                                                                                           // 280\n        break;                                                                                                      // 281\n      default:                                                                                                      // 282\n        field.visible = [\"signUp\"];                                                                                 // 283\n    }                                                                                                               // 284\n                                                                                                                    // 285\n      // Validation                                                                                                 // 286\n      var positiveValidation = field.positiveValidation;                                                            // 287\n      if (_.isUndefined(positiveValidation)) {                                                                      // 288\n        field.positiveValidation = gPositiveValidation;                                                             // 289\n      }                                                                                                             // 290\n                                                                                                                    // 291\n      var negativeValidation = field.negativeValidation;                                                            // 292\n      if (_.isUndefined(negativeValidation)) {                                                                      // 293\n        field.negativeValidation = gNegativeValidation;                                                             // 294\n      }                                                                                                             // 295\n                                                                                                                    // 296\n      field.validation = field.positiveValidation || field.negativeValidation;                                      // 297\n      if (_.isUndefined(field.continuousValidation)) {                                                              // 298\n        field.continuousValidation = gContinuousValidation;                                                         // 299\n      }                                                                                                             // 300\n                                                                                                                    // 301\n      field.continuousValidation = field.validation && field.continuousValidation;                                  // 302\n      if (_.isUndefined(field.negativeFeedback)) {                                                                  // 303\n        field.negativeFeedback = gNegativeFeedback;                                                                 // 304\n      }                                                                                                             // 305\n                                                                                                                    // 306\n      if (_.isUndefined(field.positiveFeedback)) {                                                                  // 307\n        field.positiveFeedback = gPositiveFeedback;                                                                 // 308\n      }                                                                                                             // 309\n                                                                                                                    // 310\n      field.feedback = field.negativeFeedback || field.positiveFeedback;                                            // 311\n      // Validating icon                                                                                            // 312\n      var showValidating = field.showValidating;                                                                    // 313\n      if (_.isUndefined(showValidating)) {                                                                          // 314\n        field.showValidating = gShowValidating;                                                                     // 315\n      }                                                                                                             // 316\n                                                                                                                    // 317\n      // Custom Template                                                                                            // 318\n      if (field.template) {                                                                                         // 319\n        if (field.template in Template) {                                                                           // 320\n          Template[field.template].helpers(AccountsTemplates.atInputHelpers);                                       // 321\n        } else {                                                                                                    // 322\n          console.warn(                                                                                             // 323\n            \"[UserAccounts] Warning no template \" + field.template + \" found!\"                                      // 324\n          );                                                                                                        // 325\n        }                                                                                                           // 326\n      }                                                                                                             // 327\n  });                                                                                                               // 328\n                                                                                                                    // 329\n  // Initializes reactive states                                                                                    // 330\n  var form = new ReactiveDict();                                                                                    // 331\n                                                                                                                    // 332\n  form.set(\"disabled\", false);                                                                                      // 333\n  form.set(\"state\", \"signIn\");                                                                                      // 334\n  form.set(\"result\", null);                                                                                         // 335\n  form.set(\"error\", null);                                                                                          // 336\n  form.set(\"message\", null);                                                                                        // 337\n  this.state = {                                                                                                    // 338\n    form: form,                                                                                                     // 339\n  };                                                                                                                // 340\n                                                                                                                    // 341\n  // Possibly subscribes to extended user data (to get the list of registered services...)                          // 342\n  if (this.options.showAddRemoveServices) {                                                                         // 343\n      Meteor.subscribe(\"userRegisteredServices\");                                                                   // 344\n  }                                                                                                                 // 345\n                                                                                                                    // 346\n  //Check that reCaptcha site keys are available and no secret keys visible                                         // 347\n  if (this.options.showReCaptcha) {                                                                                 // 348\n    var atSiteKey = null;                                                                                           // 349\n    var atSecretKey = null;                                                                                         // 350\n    var settingsSiteKey = null;                                                                                     // 351\n    var settingsSecretKey = null;                                                                                   // 352\n                                                                                                                    // 353\n    if (AccountsTemplates.options.reCaptcha) {                                                                      // 354\n      atSiteKey = AccountsTemplates.options.reCaptcha.siteKey;                                                      // 355\n      atSecretKey = AccountsTemplates.options.reCaptcha.secretKey;                                                  // 356\n    }                                                                                                               // 357\n                                                                                                                    // 358\n    if (Meteor.settings && Meteor.settings.public && Meteor.settings.public.reCaptcha) {                            // 359\n      settingsSiteKey = Meteor.settings.public.reCaptcha.siteKey;                                                   // 360\n      settingsSecretKey = Meteor.settings.public.reCaptcha.secretKey;                                               // 361\n    }                                                                                                               // 362\n                                                                                                                    // 363\n    if (atSecretKey || settingsSecretKey) {                                                                         // 364\n      //erase the secret key                                                                                        // 365\n      if (atSecretKey) {                                                                                            // 366\n          AccountsTemplates.options.reCaptcha.secretKey = null;                                                     // 367\n      }                                                                                                             // 368\n                                                                                                                    // 369\n      if (settingsSecretKey) {                                                                                      // 370\n          Meteor.settings.public.reCaptcha.secretKey = null;                                                        // 371\n      }                                                                                                             // 372\n                                                                                                                    // 373\n      var loc = atSecretKey ? \"User Accounts configuration!\" : \"Meteor settings!\";                                  // 374\n      throw new Meteor.Error(401, \"User Accounts: DANGER - reCaptcha private key leaked to client from \" + loc      // 375\n      + \" Provide the key in server settings ONLY.\");                                                               // 376\n    }                                                                                                               // 377\n                                                                                                                    // 378\n    if (!atSiteKey && !settingsSiteKey) {                                                                           // 379\n      throw new Meteor.Error(401, \"User Accounts: reCaptcha site key not found! Please provide it or set showReCaptcha to false.\");\n    }                                                                                                               // 381\n  }                                                                                                                 // 382\n                                                                                                                    // 383\n  // Marks AccountsTemplates as initialized                                                                         // 384\n  this._initialized = true;                                                                                         // 385\n};                                                                                                                  // 386\n                                                                                                                    // 387\nAT.prototype.linkClick = function(route) {                                                                          // 388\n  if (AccountsTemplates.disabled()) {                                                                               // 389\n    return;                                                                                                         // 390\n  }                                                                                                                 // 391\n                                                                                                                    // 392\n  AccountsTemplates.setState(route);                                                                                // 393\n                                                                                                                    // 394\n  if (AccountsTemplates.options.focusFirstInput) {                                                                  // 395\n    var firstVisibleInput = _.find(this.getFields(), function(f) {                                                  // 396\n      return _.contains(f.visible, route);                                                                          // 397\n    });                                                                                                             // 398\n                                                                                                                    // 399\n    if (firstVisibleInput) {                                                                                        // 400\n      $(\"input#at-field-\" + firstVisibleInput._id).focus();                                                         // 401\n    }                                                                                                               // 402\n  }                                                                                                                 // 403\n};                                                                                                                  // 404\n                                                                                                                    // 405\nAT.prototype.logout = function() {                                                                                  // 406\n  var onLogoutHook = AccountsTemplates.options.onLogoutHook;                                                        // 407\n                                                                                                                    // 408\n  Meteor.logout(function() {                                                                                        // 409\n    if (onLogoutHook) {                                                                                             // 410\n      onLogoutHook();                                                                                               // 411\n    }                                                                                                               // 412\n  });                                                                                                               // 413\n};                                                                                                                  // 414\n                                                                                                                    // 415\nAT.prototype.submitCallback = function(error, state, onSuccess) {                                                   // 416\n  var onSubmitHook = AccountsTemplates.options.onSubmitHook;                                                        // 417\n                                                                                                                    // 418\n  if (onSubmitHook) {                                                                                               // 419\n    onSubmitHook(error, state);                                                                                     // 420\n  }                                                                                                                 // 421\n                                                                                                                    // 422\n  if (error) {                                                                                                      // 423\n    if (_.isObject(error.details)) {                                                                                // 424\n      // If error.details is an object, we may try to set fields errors from it                                     // 425\n      _.each(error.details, function(error, fieldId) {                                                              // 426\n          AccountsTemplates.getField(fieldId).setError(error);                                                      // 427\n      });                                                                                                           // 428\n    } else {                                                                                                        // 429\n      var err = \"error.accounts.Unknown error\";                                                                     // 430\n                                                                                                                    // 431\n      if (error.reason) {                                                                                           // 432\n        err = error.reason;                                                                                         // 433\n      }                                                                                                             // 434\n                                                                                                                    // 435\n      if (err.substring(0, 15) !== \"error.accounts.\") {                                                             // 436\n        err = \"error.accounts.\" + err;                                                                              // 437\n      }                                                                                                             // 438\n                                                                                                                    // 439\n      AccountsTemplates.state.form.set(\"error\", [err]);                                                             // 440\n    }                                                                                                               // 441\n                                                                                                                    // 442\n    AccountsTemplates.setDisabled(false);                                                                           // 443\n    // Possibly resets reCaptcha form                                                                               // 444\n    if (state === \"signUp\" && AccountsTemplates.options.showReCaptcha) {                                            // 445\n      grecaptcha.reset();                                                                                           // 446\n    }                                                                                                               // 447\n  } else {                                                                                                          // 448\n    if (onSuccess) {                                                                                                // 449\n      onSuccess();                                                                                                  // 450\n    }                                                                                                               // 451\n                                                                                                                    // 452\n    if (state) {                                                                                                    // 453\n      AccountsTemplates.setDisabled(false);                                                                         // 454\n    }                                                                                                               // 455\n  }                                                                                                                 // 456\n};                                                                                                                  // 457\n                                                                                                                    // 458\nAccountsTemplates = new AT();                                                                                       // 459\n                                                                                                                    // 460\n// Initialization                                                                                                   // 461\nMeteor.startup(function() {                                                                                         // 462\n  AccountsTemplates._init();                                                                                        // 463\n});                                                                                                                 // 464\n                                                                                                                    // 465\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/useraccounts_core/lib/templates_helpers/at_error.js                                                     //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nAT.prototype.atErrorHelpers = {                                                                                     // 1\n    singleError: function() {                                                                                       // 2\n        var errors = AccountsTemplates.state.form.get(\"error\");                                                     // 3\n        return errors && errors.length === 1;                                                                       // 4\n    },                                                                                                              // 5\n    error: function() {                                                                                             // 6\n        return AccountsTemplates.state.form.get(\"error\");                                                           // 7\n    },                                                                                                              // 8\n    errorText: function(){                                                                                          // 9\n        var field, err;                                                                                             // 10\n        if (this.field){                                                                                            // 11\n            field = T9n.get(this.field, markIfMissing=false);                                                       // 12\n            err = T9n.get(this.err, markIfMissing=false);                                                           // 13\n        }                                                                                                           // 14\n        else                                                                                                        // 15\n            err = T9n.get(this.valueOf(), markIfMissing=false);                                                     // 16\n                                                                                                                    // 17\n        // Possibly removes initial prefix in case the key in not found inside t9n                                  // 18\n        if (err.substring(0, 15) === \"error.accounts.\")                                                             // 19\n            err = err.substring(15);                                                                                // 20\n                                                                                                                    // 21\n        if (field)                                                                                                  // 22\n            return field + \": \" + err;                                                                              // 23\n        return err;                                                                                                 // 24\n    },                                                                                                              // 25\n};                                                                                                                  // 26\n                                                                                                                    // 27\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/useraccounts_core/lib/templates_helpers/at_form.js                                                      //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nAT.prototype.atFormHelpers = {                                                                                      // 1\n    hide: function(){                                                                                               // 2\n        var state = this.state || AccountsTemplates.getState();                                                     // 3\n        return state === \"hide\";                                                                                    // 4\n    },                                                                                                              // 5\n    showTitle: function(next_state){                                                                                // 6\n        var state = next_state || this.state || AccountsTemplates.getState();                                       // 7\n        if (Meteor.userId() && state === \"signIn\")                                                                  // 8\n          return false;                                                                                             // 9\n        return !!AccountsTemplates.texts.title[state];                                                              // 10\n    },                                                                                                              // 11\n    showOauthServices: function(next_state){                                                                        // 12\n        var state = next_state || this.state || AccountsTemplates.getState();                                       // 13\n        if (!(state === \"signIn\" || state === \"signUp\"))                                                            // 14\n            return false;                                                                                           // 15\n        var services = AccountsTemplates.oauthServices();                                                           // 16\n        if (!services.length)                                                                                       // 17\n            return false;                                                                                           // 18\n        if (Meteor.userId())                                                                                        // 19\n            return AccountsTemplates.options.showAddRemoveServices;                                                 // 20\n        return true;                                                                                                // 21\n    },                                                                                                              // 22\n    showServicesSeparator: function(next_state){                                                                    // 23\n        var pwdService = Package[\"accounts-password\"] !== undefined;                                                // 24\n        var state = next_state || this.state || AccountsTemplates.getState();                                       // 25\n        var rightState = (state === \"signIn\" || state === \"signUp\");                                                // 26\n        return rightState && !Meteor.userId() && pwdService && AccountsTemplates.oauthServices().length;            // 27\n    },                                                                                                              // 28\n    showError: function(next_state) {                                                                               // 29\n        return !!AccountsTemplates.state.form.get(\"error\");                                                         // 30\n    },                                                                                                              // 31\n    showResult: function(next_state) {                                                                              // 32\n        return !!AccountsTemplates.state.form.get(\"result\");                                                        // 33\n    },                                                                                                              // 34\n    showMessage: function(next_state) {                                                                             // 35\n        return !!AccountsTemplates.state.form.get(\"message\");                                                       // 36\n    },                                                                                                              // 37\n    showPwdForm: function(next_state) {                                                                             // 38\n        if (Package[\"accounts-password\"] === undefined)                                                             // 39\n            return false;                                                                                           // 40\n        var state = next_state || this.state || AccountsTemplates.getState();                                       // 41\n        if ((state === \"verifyEmail\") || (state === \"signIn\" && Meteor.userId()))                                   // 42\n            return false;                                                                                           // 43\n        return true;                                                                                                // 44\n    },                                                                                                              // 45\n    showSignInLink: function(next_state){                                                                           // 46\n        if (AccountsTemplates.options.hideSignInLink)                                                               // 47\n            return false;                                                                                           // 48\n        var state = next_state || this.state || AccountsTemplates.getState();                                       // 49\n        if (AccountsTemplates.options.forbidClientAccountCreation && state === \"forgotPwd\")                         // 50\n            return true;                                                                                            // 51\n        return state === \"signUp\";                                                                                  // 52\n    },                                                                                                              // 53\n    showSignUpLink: function(next_state){                                                                           // 54\n        if  (AccountsTemplates.options.hideSignUpLink)                                                              // 55\n            return false;                                                                                           // 56\n        var state = next_state || this.state || AccountsTemplates.getState();                                       // 57\n        return ((state === \"signIn\" && !Meteor.userId()) || state === \"forgotPwd\") && !AccountsTemplates.options.forbidClientAccountCreation;\n    },                                                                                                              // 59\n    showTermsLink: function(next_state){                                                                            // 60\n        //TODO: Add privacyRoute and termsRoute as alternatives (the point of named routes is                       // 61\n        // being able to change the url in one place only)                                                          // 62\n        if (!!AccountsTemplates.options.privacyUrl || !!AccountsTemplates.options.termsUrl) {                       // 63\n            var state = next_state || this.state || AccountsTemplates.getState();                                   // 64\n            if (state === \"signUp\" || state === \"enrollAccount\" ) {                                                 // 65\n              return true;                                                                                          // 66\n            }                                                                                                       // 67\n        }                                                                                                           // 68\n        /*                                                                                                          // 69\n        if (state === \"signIn\"){                                                                                    // 70\n            var pwdService = Package[\"accounts-password\"] !== undefined;                                            // 71\n            if (!pwdService)                                                                                        // 72\n                return true;                                                                                        // 73\n        }                                                                                                           // 74\n        */                                                                                                          // 75\n        return false;                                                                                               // 76\n    },                                                                                                              // 77\n    showResendVerificationEmailLink: function(){                                                                    // 78\n        var parentData = Template.currentData();                                                                    // 79\n        var state = (parentData && parentData.state) || AccountsTemplates.getState();                               // 80\n        return (state === \"signIn\" || state === \"forgotPwd\") && AccountsTemplates.options.showResendVerificationEmailLink;\n    },                                                                                                              // 82\n};                                                                                                                  // 83\n                                                                                                                    // 84\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/useraccounts_core/lib/templates_helpers/at_input.js                                                     //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nAT.prototype.atInputRendered = [function(){                                                                         // 1\n    var fieldId = this.data._id;                                                                                    // 2\n                                                                                                                    // 3\n    var parentData = Template.currentData();                                                                        // 4\n    var state = (parentData && parentData.state) || AccountsTemplates.getState();                                   // 5\n                                                                                                                    // 6\n    if (AccountsTemplates.options.focusFirstInput) {                                                                // 7\n      var firstVisibleInput = _.find(AccountsTemplates.getFields(), function(f){                                    // 8\n        return _.contains(f.visible, state);                                                                        // 9\n      });                                                                                                           // 10\n                                                                                                                    // 11\n      if (firstVisibleInput && firstVisibleInput._id === fieldId) {                                                 // 12\n        this.$(\"input#at-field-\" + fieldId).focus();                                                                // 13\n      }                                                                                                             // 14\n  }                                                                                                                 // 15\n}];                                                                                                                 // 16\n                                                                                                                    // 17\nAT.prototype.atInputHelpers = {                                                                                     // 18\n    disabled: function() {                                                                                          // 19\n        return AccountsTemplates.disabled();                                                                        // 20\n    },                                                                                                              // 21\n    showLabels: function() {                                                                                        // 22\n        return AccountsTemplates.options.showLabels;                                                                // 23\n    },                                                                                                              // 24\n    displayName: function() {                                                                                       // 25\n        var parentData = Template.parentData();                                                                     // 26\n        var state = (parentData && parentData.state) || AccountsTemplates.getState();                               // 27\n        var displayName = this.getDisplayName(state);                                                               // 28\n        return T9n.get(displayName, markIfMissing=false);                                                           // 29\n    },                                                                                                              // 30\n    optionalText: function(){                                                                                       // 31\n        return \"(\" + T9n.get(AccountsTemplates.texts.optionalField, markIfMissing=false) + \")\";                     // 32\n    },                                                                                                              // 33\n    templateName: function() {                                                                                      // 34\n        if (this.template)                                                                                          // 35\n            return this.template;                                                                                   // 36\n        if (this.type === \"checkbox\")                                                                               // 37\n            return \"atCheckboxInput\";                                                                               // 38\n        if (this.type === \"select\")                                                                                 // 39\n            return \"atSelectInput\";                                                                                 // 40\n        if (this.type === \"radio\")                                                                                  // 41\n            return \"atRadioInput\";                                                                                  // 42\n        if (this.type === \"hidden\")                                                                                 // 43\n            return \"atHiddenInput\";                                                                                 // 44\n        return \"atTextInput\";                                                                                       // 45\n    },                                                                                                              // 46\n    values: function(){                                                                                             // 47\n        var id = this._id;                                                                                          // 48\n        return _.map(this.select, function(select){                                                                 // 49\n            var s = _.clone(select);                                                                                // 50\n            s._id = id + \"-\" + select.value;                                                                        // 51\n            s.id = id;                                                                                              // 52\n            return s;                                                                                               // 53\n        });                                                                                                         // 54\n    },                                                                                                              // 55\n    errorText: function() {                                                                                         // 56\n        var err = this.getStatus();                                                                                 // 57\n        return T9n.get(err, markIfMissing=false);                                                                   // 58\n    },                                                                                                              // 59\n    placeholder: function() {                                                                                       // 60\n        if (AccountsTemplates.options.showPlaceholders) {                                                           // 61\n            var parentData = Template.parentData();                                                                 // 62\n            var state = (parentData && parentData.state) || AccountsTemplates.getState();                           // 63\n            var placeholder = this.getPlaceholder(state);                                                           // 64\n            return T9n.get(placeholder, markIfMissing=false);                                                       // 65\n        }                                                                                                           // 66\n    },                                                                                                              // 67\n};                                                                                                                  // 68\n                                                                                                                    // 69\nAT.prototype.atInputEvents = {                                                                                      // 70\n    \"focusin input\": function(event, t){                                                                            // 71\n        this.clearStatus();                                                                                         // 72\n    },                                                                                                              // 73\n    \"focusout input, change select\": function(event, t){                                                            // 74\n        var fieldId = this._id;                                                                                     // 75\n        var rawValue = this.getValue(t);                                                                            // 76\n        var value = this.fixValue(rawValue);                                                                        // 77\n        // Possibly updates the input value                                                                         // 78\n        if (value !== rawValue) {                                                                                   // 79\n            this.setValue(t, value);                                                                                // 80\n        }                                                                                                           // 81\n                                                                                                                    // 82\n        // Client-side only validation                                                                              // 83\n        if (!this.validation)                                                                                       // 84\n            return;                                                                                                 // 85\n        var parentData = Template.parentData();                                                                     // 86\n        var state = (parentData && parentData.state) || AccountsTemplates.getState();                               // 87\n        // No validation during signIn                                                                              // 88\n        if (state === \"signIn\")                                                                                     // 89\n            return;                                                                                                 // 90\n        // Special case for password confirmation                                                                   // 91\n        if (value && fieldId === \"password_again\"){                                                                 // 92\n            if (value !== $(\"#at-field-password\").val())                                                            // 93\n                return this.setError(AccountsTemplates.texts.errors.pwdMismatch);                                   // 94\n        }                                                                                                           // 95\n        this.validate(value);                                                                                       // 96\n    },                                                                                                              // 97\n    \"keyup input\": function(event, t){                                                                              // 98\n        // Client-side only continuous validation                                                                   // 99\n        if (!this.continuousValidation)                                                                             // 100\n            return;                                                                                                 // 101\n        var parentData = Template.parentData();                                                                     // 102\n        var state = (parentData && parentData.state) || AccountsTemplates.getState();                               // 103\n        // No validation during signIn                                                                              // 104\n        if (state === \"signIn\")                                                                                     // 105\n            return;                                                                                                 // 106\n        var fieldId = this._id;                                                                                     // 107\n        var rawValue = this.getValue(t);                                                                            // 108\n        var value = this.fixValue(rawValue);                                                                        // 109\n        // Possibly updates the input value                                                                         // 110\n        if (value !== rawValue) {                                                                                   // 111\n            this.setValue(t, value);                                                                                // 112\n        }                                                                                                           // 113\n        // Special case for password confirmation                                                                   // 114\n        if (value && fieldId === \"password_again\"){                                                                 // 115\n            if (value !== $(\"#at-field-password\").val())                                                            // 116\n                return this.setError(AccountsTemplates.texts.errors.pwdMismatch);                                   // 117\n        }                                                                                                           // 118\n        this.validate(value);                                                                                       // 119\n    },                                                                                                              // 120\n};                                                                                                                  // 121\n                                                                                                                    // 122\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/useraccounts_core/lib/templates_helpers/at_nav_button.js                                                //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nAT.prototype.atNavButtonHelpers = {                                                                                 // 1\n    text: function(){                                                                                               // 2\n        var key = Meteor.userId() ? AccountsTemplates.texts.navSignOut : AccountsTemplates.texts.navSignIn;         // 3\n        return T9n.get(key, markIfMissing=false);                                                                   // 4\n    }                                                                                                               // 5\n};                                                                                                                  // 6\n                                                                                                                    // 7\nAT.prototype.atNavButtonEvents = {                                                                                  // 8\n    'click #at-nav-button': function(event){                                                                        // 9\n        event.preventDefault();                                                                                     // 10\n        if (Meteor.userId())                                                                                        // 11\n            AccountsTemplates.logout();                                                                             // 12\n        else                                                                                                        // 13\n            AccountsTemplates.linkClick(\"signIn\");                                                                  // 14\n    },                                                                                                              // 15\n};                                                                                                                  // 16\n                                                                                                                    // 17\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/useraccounts_core/lib/templates_helpers/at_oauth.js                                                     //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nAT.prototype.atOauthHelpers = {                                                                                     // 1\n    oauthService: function() {                                                                                      // 2\n        return AccountsTemplates.oauthServices();                                                                   // 3\n    },                                                                                                              // 4\n};                                                                                                                  // 5\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/useraccounts_core/lib/templates_helpers/at_pwd_form.js                                                  //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nAT.prototype.atPwdFormHelpers = {                                                                                   // 1\n    disabled: function() {                                                                                          // 2\n        return AccountsTemplates.disabled();                                                                        // 3\n    },                                                                                                              // 4\n    fields: function() {                                                                                            // 5\n        var parentData = Template.currentData();                                                                    // 6\n        var state = (parentData && parentData.state) || AccountsTemplates.getState();                               // 7\n        return _.filter(AccountsTemplates.getFields(), function(s) {                                                // 8\n            return _.contains(s.visible, state);                                                                    // 9\n        });                                                                                                         // 10\n    },                                                                                                              // 11\n    showForgotPasswordLink: function() {                                                                            // 12\n        var parentData = Template.currentData();                                                                    // 13\n        var state = (parentData && parentData.state) || AccountsTemplates.getState();                               // 14\n        return state === \"signIn\" && AccountsTemplates.options.showForgotPasswordLink;                              // 15\n    },                                                                                                              // 16\n    showReCaptcha: function() {                                                                                     // 17\n      var parentData = Template.currentData();                                                                      // 18\n      var state = (parentData && parentData.state) || AccountsTemplates.getState();                                 // 19\n      return state === \"signUp\" && AccountsTemplates.options.showReCaptcha;                                         // 20\n    },                                                                                                              // 21\n};                                                                                                                  // 22\n                                                                                                                    // 23\n                                                                                                                    // 24\nvar toLowercaseUsername = function(value){                                                                          // 25\n  return value.toLowerCase().replace(/\\s+/gm, '');                                                                  // 26\n};                                                                                                                  // 27\n                                                                                                                    // 28\nAT.prototype.atPwdFormEvents = {                                                                                    // 29\n    // Form submit                                                                                                  // 30\n    \"submit #at-pwd-form\": function(event, t) {                                                                     // 31\n        event.preventDefault();                                                                                     // 32\n        t.$(\"#at-btn\").blur();                                                                                      // 33\n                                                                                                                    // 34\n        AccountsTemplates.setDisabled(true);                                                                        // 35\n                                                                                                                    // 36\n        var parentData = Template.currentData();                                                                    // 37\n        var state = (parentData && parentData.state) || AccountsTemplates.getState();                               // 38\n        var preValidation = (state !== \"signIn\");                                                                   // 39\n                                                                                                                    // 40\n        // Client-side pre-validation                                                                               // 41\n        // Validates fields values                                                                                  // 42\n        // NOTE: This is the only place where password validation can be enforced!                                  // 43\n        var formData = {};                                                                                          // 44\n        var someError = false;                                                                                      // 45\n        var errList = [];                                                                                           // 46\n        _.each(AccountsTemplates.getFields(), function(field){                                                      // 47\n            // Considers only visible fields...                                                                     // 48\n            if (!_.contains(field.visible, state))                                                                  // 49\n                return;                                                                                             // 50\n                                                                                                                    // 51\n            var fieldId = field._id;                                                                                // 52\n                                                                                                                    // 53\n            var rawValue = field.getValue(t);                                                                       // 54\n            var value = field.fixValue(rawValue);                                                                   // 55\n            // Possibly updates the input value                                                                     // 56\n            if (value !== rawValue) {                                                                               // 57\n                field.setValue(t, value);                                                                           // 58\n            }                                                                                                       // 59\n            if (value !== undefined && value !== \"\") {                                                              // 60\n                formData[fieldId] = value;                                                                          // 61\n            }                                                                                                       // 62\n                                                                                                                    // 63\n            // Validates the field value only if current state is not \"signIn\"                                      // 64\n            if (preValidation && field.getStatus() !== false){                                                      // 65\n                var validationErr = field.validate(value, \"strict\");                                                // 66\n                if (validationErr) {                                                                                // 67\n                    if (field.negativeValidation)                                                                   // 68\n                        field.setError(validationErr);                                                              // 69\n                    else{                                                                                           // 70\n                        var fId = T9n.get(field.getDisplayName(), markIfMissing=false);                             // 71\n                        //errList.push(fId + \": \" + err);                                                           // 72\n                        errList.push({                                                                              // 73\n                            field: field.getDisplayName(),                                                          // 74\n                            err: validationErr                                                                      // 75\n                        });                                                                                         // 76\n                    }                                                                                               // 77\n                    someError = true;                                                                               // 78\n                }                                                                                                   // 79\n                else                                                                                                // 80\n                    field.setSuccess();                                                                             // 81\n            }                                                                                                       // 82\n        });                                                                                                         // 83\n                                                                                                                    // 84\n        // Clears error and result                                                                                  // 85\n        AccountsTemplates.clearError();                                                                             // 86\n        AccountsTemplates.clearResult();                                                                            // 87\n        AccountsTemplates.clearMessage();                                                                           // 88\n        // Possibly sets errors                                                                                     // 89\n        if (someError){                                                                                             // 90\n            if (errList.length)                                                                                     // 91\n                AccountsTemplates.state.form.set(\"error\", errList);                                                 // 92\n            AccountsTemplates.setDisabled(false);                                                                   // 93\n            //reset reCaptcha form                                                                                  // 94\n            if (state === \"signUp\" && AccountsTemplates.options.showReCaptcha) {                                    // 95\n                grecaptcha.reset();                                                                                 // 96\n            }                                                                                                       // 97\n            return;                                                                                                 // 98\n        }                                                                                                           // 99\n                                                                                                                    // 100\n        // Extracts username, email, and pwds                                                                       // 101\n        var current_password = formData.current_password;                                                           // 102\n        var email = formData.email;                                                                                 // 103\n        var password = formData.password;                                                                           // 104\n        var password_again = formData.password_again;                                                               // 105\n        var username = formData.username;                                                                           // 106\n        var username_and_email = formData.username_and_email;                                                       // 107\n        // Clears profile data removing username, email, and pwd                                                    // 108\n        delete formData.current_password;                                                                           // 109\n        delete formData.email;                                                                                      // 110\n        delete formData.password;                                                                                   // 111\n        delete formData.password_again;                                                                             // 112\n        delete formData.username;                                                                                   // 113\n        delete formData.username_and_email;                                                                         // 114\n                                                                                                                    // 115\n        if (AccountsTemplates.options.confirmPassword){                                                             // 116\n            // Checks passwords for correct match                                                                   // 117\n            if (password_again && password !== password_again){                                                     // 118\n                var pwd_again = AccountsTemplates.getField(\"password_again\");                                       // 119\n                if (pwd_again.negativeValidation)                                                                   // 120\n                    pwd_again.setError(AccountsTemplates.texts.errors.pwdMismatch);                                 // 121\n                else                                                                                                // 122\n                    AccountsTemplates.state.form.set(\"error\", [{                                                    // 123\n                        field: pwd_again.getDisplayName(),                                                          // 124\n                        err: AccountsTemplates.texts.errors.pwdMismatch                                             // 125\n                    }]);                                                                                            // 126\n                AccountsTemplates.setDisabled(false);                                                               // 127\n                //reset reCaptcha form                                                                              // 128\n                if (state === \"signUp\" && AccountsTemplates.options.showReCaptcha) {                                // 129\n                  grecaptcha.reset();                                                                               // 130\n                }                                                                                                   // 131\n                return;                                                                                             // 132\n            }                                                                                                       // 133\n        }                                                                                                           // 134\n                                                                                                                    // 135\n        // -------                                                                                                  // 136\n        // Sign In                                                                                                  // 137\n        // -------                                                                                                  // 138\n        if (state === \"signIn\") {                                                                                   // 139\n            var pwdOk = !!password;                                                                                 // 140\n            var userOk = true;                                                                                      // 141\n            var loginSelector;                                                                                      // 142\n            if (email) {                                                                                            // 143\n                if (AccountsTemplates.options.lowercaseUsername) {                                                  // 144\n                  email = toLowercaseUsername(email);                                                               // 145\n                }                                                                                                   // 146\n                                                                                                                    // 147\n                loginSelector = {email: email};                                                                     // 148\n            }                                                                                                       // 149\n            else if (username) {                                                                                    // 150\n                if (AccountsTemplates.options.lowercaseUsername) {                                                  // 151\n                  username = toLowercaseUsername(username);                                                         // 152\n                }                                                                                                   // 153\n                loginSelector = {username: username};                                                               // 154\n            }                                                                                                       // 155\n            else if (username_and_email) {                                                                          // 156\n                if (AccountsTemplates.options.lowercaseUsername) {                                                  // 157\n                  username_and_email = toLowercaseUsername(username_and_email);                                     // 158\n                }                                                                                                   // 159\n                loginSelector = username_and_email;                                                                 // 160\n            }                                                                                                       // 161\n            else                                                                                                    // 162\n                userOk = false;                                                                                     // 163\n                                                                                                                    // 164\n            // Possibly exits if not both 'password' and 'username' are non-empty...                                // 165\n            if (!pwdOk || !userOk){                                                                                 // 166\n                AccountsTemplates.state.form.set(\"error\", [AccountsTemplates.texts.errors.loginForbidden]);         // 167\n                AccountsTemplates.setDisabled(false);                                                               // 168\n                return;                                                                                             // 169\n            }                                                                                                       // 170\n                                                                                                                    // 171\n                                                                                                                    // 172\n            return Meteor.loginWithPassword(loginSelector, password, function(error) {                              // 173\n                AccountsTemplates.submitCallback(error, state);                                                     // 174\n            });                                                                                                     // 175\n        }                                                                                                           // 176\n                                                                                                                    // 177\n        // -------                                                                                                  // 178\n        // Sign Up                                                                                                  // 179\n        // -------                                                                                                  // 180\n        if (state === \"signUp\") {                                                                                   // 181\n            // Possibly gets reCaptcha response                                                                     // 182\n            if (AccountsTemplates.options.showReCaptcha) {                                                          // 183\n              var response = grecaptcha.getResponse();                                                              // 184\n              if (response === \"\") {                                                                                // 185\n                // recaptcha verification has not completed yet (or has expired)...                                 // 186\n                // ...simply ignore submit event!                                                                   // 187\n                AccountsTemplates.setDisabled(false);                                                               // 188\n                return;                                                                                             // 189\n              } else {                                                                                              // 190\n                formData.reCaptchaResponse = response;                                                              // 191\n              }                                                                                                     // 192\n            }                                                                                                       // 193\n                                                                                                                    // 194\n            var hash = Accounts._hashPassword(password);                                                            // 195\n            var options = {                                                                                         // 196\n                username: username,                                                                                 // 197\n                email: email,                                                                                       // 198\n                password: hash,                                                                                     // 199\n                profile: formData,                                                                                  // 200\n            };                                                                                                      // 201\n                                                                                                                    // 202\n            // Call preSignUpHook, if any...                                                                        // 203\n            var preSignUpHook = AccountsTemplates.options.preSignUpHook;                                            // 204\n            if (preSignUpHook) {                                                                                    // 205\n              preSignUpHook(password, options);                                                                     // 206\n            }                                                                                                       // 207\n                                                                                                                    // 208\n            return Meteor.call(\"ATCreateUserServer\", options, function(error){                                      // 209\n                if (error && error.reason === 'Email already exists.') {                                            // 210\n                    if (AccountsTemplates.options.showReCaptcha) {                                                  // 211\n                      grecaptcha.reset();                                                                           // 212\n                    }                                                                                               // 213\n                }                                                                                                   // 214\n                AccountsTemplates.submitCallback(error, undefined, function(){                                      // 215\n                    if (AccountsTemplates.options.sendVerificationEmail && AccountsTemplates.options.enforceEmailVerification){\n                        AccountsTemplates.submitCallback(error, state, function () {                                // 217\n                            AccountsTemplates.state.form.set(\"result\", AccountsTemplates.texts.info.signUpVerifyEmail);\n                            // Cleans up input fields' content                                                      // 219\n                            _.each(AccountsTemplates.getFields(), function(field){                                  // 220\n                                // Considers only visible fields...                                                 // 221\n                                if (!_.contains(field.visible, state))                                              // 222\n                                    return;                                                                         // 223\n                                                                                                                    // 224\n                                var elem = t.$(\"#at-field-\" + field._id);                                           // 225\n                                                                                                                    // 226\n                                // Naïve reset                                                                      // 227\n                                if (field.type === \"checkbox\") elem.prop('checked', false);                         // 228\n                                else elem.val(\"\");                                                                  // 229\n                                                                                                                    // 230\n                            });                                                                                     // 231\n                            AccountsTemplates.setDisabled(false);                                                   // 232\n                            AccountsTemplates.avoidRedirect = true;                                                 // 233\n                        });                                                                                         // 234\n                    }                                                                                               // 235\n                    else {                                                                                          // 236\n                        var loginSelector;                                                                          // 237\n                                                                                                                    // 238\n                        if (email) {                                                                                // 239\n                            if (AccountsTemplates.options.lowercaseUsername) {                                      // 240\n                              email = toLowercaseUsername(email);                                                   // 241\n                            }                                                                                       // 242\n                                                                                                                    // 243\n                            loginSelector = {email: email};                                                         // 244\n                        }                                                                                           // 245\n                        else if (username) {                                                                        // 246\n                            if (AccountsTemplates.options.lowercaseUsername) {                                      // 247\n                              username = toLowercaseUsername(username);                                             // 248\n                            }                                                                                       // 249\n                            loginSelector = {username: username};                                                   // 250\n                        }                                                                                           // 251\n                        else {                                                                                      // 252\n                            if (AccountsTemplates.options.lowercaseUsername) {                                      // 253\n                              username_and_email = toLowercaseUsername(username_and_email);                         // 254\n                            }                                                                                       // 255\n                            loginSelector = username_and_email;                                                     // 256\n                        }                                                                                           // 257\n                                                                                                                    // 258\n                        Meteor.loginWithPassword(loginSelector, password, function(error) {                         // 259\n                            AccountsTemplates.submitCallback(error, state, function(){                              // 260\n                                AccountsTemplates.setState(\"signIn\");                                               // 261\n                            });                                                                                     // 262\n                        });                                                                                         // 263\n                    }                                                                                               // 264\n                });                                                                                                 // 265\n            });                                                                                                     // 266\n        }                                                                                                           // 267\n                                                                                                                    // 268\n        //----------------                                                                                          // 269\n        // Forgot Password                                                                                          // 270\n        //----------------                                                                                          // 271\n        if (state === \"forgotPwd\"){                                                                                 // 272\n            return Accounts.forgotPassword({                                                                        // 273\n                email: email                                                                                        // 274\n            }, function(error) {                                                                                    // 275\n                AccountsTemplates.submitCallback(error, state, function(){                                          // 276\n                    AccountsTemplates.state.form.set(\"result\", AccountsTemplates.texts.info.emailSent);             // 277\n                    t.$(\"#at-field-email\").val(\"\");                                                                 // 278\n                });                                                                                                 // 279\n            });                                                                                                     // 280\n        }                                                                                                           // 281\n                                                                                                                    // 282\n        //--------------------------------                                                                          // 283\n        // Reset Password / Enroll Account                                                                          // 284\n        //--------------------------------                                                                          // 285\n        if (state === \"resetPwd\" || state === \"enrollAccount\") {                                                    // 286\n            var paramToken = AccountsTemplates.getparamToken();                                                     // 287\n            return Accounts.resetPassword(paramToken, password, function(error) {                                   // 288\n                AccountsTemplates.submitCallback(error, state, function(){                                          // 289\n                    var pwd_field_id;                                                                               // 290\n                    if (state === \"resetPwd\")                                                                       // 291\n                        AccountsTemplates.state.form.set(\"result\", AccountsTemplates.texts.info.pwdReset);          // 292\n                    else // Enroll Account                                                                          // 293\n                        AccountsTemplates.state.form.set(\"result\", AccountsTemplates.texts.info.pwdSet);            // 294\n                    t.$(\"#at-field-password\").val(\"\");                                                              // 295\n                    if (AccountsTemplates.options.confirmPassword)                                                  // 296\n                        t.$(\"#at-field-password_again\").val(\"\");                                                    // 297\n                });                                                                                                 // 298\n            });                                                                                                     // 299\n        }                                                                                                           // 300\n                                                                                                                    // 301\n        //----------------                                                                                          // 302\n        // Change Password                                                                                          // 303\n        //----------------                                                                                          // 304\n        if (state === \"changePwd\"){                                                                                 // 305\n            return Accounts.changePassword(current_password, password, function(error) {                            // 306\n                AccountsTemplates.submitCallback(error, state, function(){                                          // 307\n                    AccountsTemplates.state.form.set(\"result\", AccountsTemplates.texts.info.pwdChanged);            // 308\n                    t.$(\"#at-field-current_password\").val(\"\");                                                      // 309\n                    t.$(\"#at-field-password\").val(\"\");                                                              // 310\n                    if (AccountsTemplates.options.confirmPassword)                                                  // 311\n                        t.$(\"#at-field-password_again\").val(\"\");                                                    // 312\n                });                                                                                                 // 313\n            });                                                                                                     // 314\n        }                                                                                                           // 315\n                                                                                                                    // 316\n        //----------------                                                                                          // 317\n        // Resend Verification E-mail                                                                               // 318\n        //----------------                                                                                          // 319\n        if (state === \"resendVerificationEmail\"){                                                                   // 320\n            return Meteor.call(\"ATResendVerificationEmail\", email, function (error) {                               // 321\n                AccountsTemplates.submitCallback(error, state, function(){                                          // 322\n                    AccountsTemplates.state.form.set(\"result\", AccountsTemplates.texts.info.verificationEmailSent);\n                    t.$(\"#at-field-email\").val(\"\");                                                                 // 324\n                                                                                                                    // 325\n                    AccountsTemplates.avoidRedirect = true;                                                         // 326\n                });                                                                                                 // 327\n            });                                                                                                     // 328\n        }                                                                                                           // 329\n    },                                                                                                              // 330\n};                                                                                                                  // 331\n                                                                                                                    // 332\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/useraccounts_core/lib/templates_helpers/at_pwd_form_btn.js                                              //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nAT.prototype.atPwdFormBtnHelpers = {                                                                                // 1\n    submitDisabled: function(){                                                                                     // 2\n        var disable = _.chain(AccountsTemplates.getFields())                                                        // 3\n            .map(function(field){                                                                                   // 4\n                return field.hasError() || field.isValidating();                                                    // 5\n            })                                                                                                      // 6\n            .some()                                                                                                 // 7\n            .value()                                                                                                // 8\n        ;                                                                                                           // 9\n        if (disable)                                                                                                // 10\n            return \"disabled\";                                                                                      // 11\n    },                                                                                                              // 12\n    buttonText: function() {                                                                                        // 13\n        var parentData = Template.currentData();                                                                    // 14\n        var state = (parentData && parentData.state) || AccountsTemplates.getState();                               // 15\n        return T9n.get(AccountsTemplates.texts.button[state], markIfMissing=false);                                 // 16\n    },                                                                                                              // 17\n};                                                                                                                  // 18\n                                                                                                                    // 19\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/useraccounts_core/lib/templates_helpers/at_pwd_link.js                                                  //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nAT.prototype.atPwdLinkHelpers = {                                                                                   // 1\n    disabled: function() {                                                                                          // 2\n        return AccountsTemplates.disabled();                                                                        // 3\n    },                                                                                                              // 4\n    forgotPwdLink: function(){                                                                                      // 5\n        return AccountsTemplates.getRoutePath(\"forgotPwd\");                                                         // 6\n    },                                                                                                              // 7\n    preText: function(){                                                                                            // 8\n        return T9n.get(AccountsTemplates.texts.pwdLink_pre, markIfMissing=false);                                   // 9\n    },                                                                                                              // 10\n    linkText: function(){                                                                                           // 11\n        return T9n.get(AccountsTemplates.texts.pwdLink_link, markIfMissing=false);                                  // 12\n    },                                                                                                              // 13\n    suffText: function(){                                                                                           // 14\n        return T9n.get(AccountsTemplates.texts.pwdLink_suff, markIfMissing=false);                                  // 15\n    },                                                                                                              // 16\n};                                                                                                                  // 17\n                                                                                                                    // 18\nAT.prototype.atPwdLinkEvents = {                                                                                    // 19\n    \"click #at-forgotPwd\": function(event, t) {                                                                     // 20\n        event.preventDefault();                                                                                     // 21\n        AccountsTemplates.linkClick(\"forgotPwd\");                                                                   // 22\n    },                                                                                                              // 23\n};                                                                                                                  // 24\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/useraccounts_core/lib/templates_helpers/at_reCaptcha.js                                                 //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nAT.prototype.atReCaptchaRendered = function() {                                                                     // 1\n    $.getScript('//www.google.com/recaptcha/api.js?hl=' + T9n.getLanguage());                                       // 2\n};                                                                                                                  // 3\n                                                                                                                    // 4\nAT.prototype.atReCaptchaHelpers = {                                                                                 // 5\n    key: function() {                                                                                               // 6\n        if (AccountsTemplates.options.reCaptcha && AccountsTemplates.options.reCaptcha.siteKey)                     // 7\n            return AccountsTemplates.options.reCaptcha.siteKey;                                                     // 8\n        return Meteor.settings.public.reCaptcha.siteKey;                                                            // 9\n    },                                                                                                              // 10\n                                                                                                                    // 11\n    theme: function() {                                                                                             // 12\n        return AccountsTemplates.options.reCaptcha && AccountsTemplates.options.reCaptcha.theme;                    // 13\n    },                                                                                                              // 14\n                                                                                                                    // 15\n    data_type: function() {                                                                                         // 16\n        return AccountsTemplates.options.reCaptcha && AccountsTemplates.options.reCaptcha.data_type;                // 17\n    },                                                                                                              // 18\n};                                                                                                                  // 19\n                                                                                                                    // 20\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/useraccounts_core/lib/templates_helpers/at_resend_verification_email_link.js                            //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nAT.prototype.atResendVerificationEmailLinkHelpers = {                                                               // 1\n    disabled: function () {                                                                                         // 2\n        return AccountsTemplates.disabled();                                                                        // 3\n    },                                                                                                              // 4\n    resendVerificationEmailLink: function () {                                                                      // 5\n        return AccountsTemplates.getRoutePath(\"resendVerificationEmail\");                                           // 6\n    },                                                                                                              // 7\n    preText: function(){                                                                                            // 8\n        return T9n.get(AccountsTemplates.texts.resendVerificationEmailLink_pre, markIfMissing=false);               // 9\n    },                                                                                                              // 10\n    linkText: function(){                                                                                           // 11\n        return T9n.get(AccountsTemplates.texts.resendVerificationEmailLink_link, markIfMissing=false);              // 12\n    },                                                                                                              // 13\n    suffText: function(){                                                                                           // 14\n        return T9n.get(AccountsTemplates.texts.resendVerificationEmailLink_suff, markIfMissing=false);              // 15\n    },                                                                                                              // 16\n};                                                                                                                  // 17\n                                                                                                                    // 18\nAT.prototype.atResendVerificationEmailLinkEvents = {                                                                // 19\n    \"click #at-resend-verification-email\": function(event, t) {                                                     // 20\n        event.preventDefault();                                                                                     // 21\n        AccountsTemplates.linkClick('resendVerificationEmail');                                                     // 22\n    },                                                                                                              // 23\n};                                                                                                                  // 24\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/useraccounts_core/lib/templates_helpers/at_result.js                                                    //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nAT.prototype.atResultHelpers = {                                                                                    // 1\n    result: function() {                                                                                            // 2\n        var resultText = AccountsTemplates.state.form.get(\"result\");                                                // 3\n        if (resultText)                                                                                             // 4\n            return T9n.get(resultText, markIfMissing=false);                                                        // 5\n    },                                                                                                              // 6\n};                                                                                                                  // 7\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/useraccounts_core/lib/templates_helpers/at_sep.js                                                       //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nAT.prototype.atSepHelpers = {                                                                                       // 1\n    sepText: function(){                                                                                            // 2\n        return T9n.get(AccountsTemplates.texts.sep, markIfMissing=false);                                           // 3\n    },                                                                                                              // 4\n};                                                                                                                  // 5\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/useraccounts_core/lib/templates_helpers/at_signin_link.js                                               //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nAT.prototype.atSigninLinkHelpers = {                                                                                // 1\n    disabled: function() {                                                                                          // 2\n        return AccountsTemplates.disabled();                                                                        // 3\n    },                                                                                                              // 4\n    signInLink: function(){                                                                                         // 5\n        return AccountsTemplates.getRoutePath(\"signIn\");                                                            // 6\n    },                                                                                                              // 7\n    preText: function(){                                                                                            // 8\n        return T9n.get(AccountsTemplates.texts.signInLink_pre, markIfMissing=false);                                // 9\n    },                                                                                                              // 10\n    linkText: function(){                                                                                           // 11\n        return T9n.get(AccountsTemplates.texts.signInLink_link, markIfMissing=false);                               // 12\n    },                                                                                                              // 13\n    suffText: function(){                                                                                           // 14\n        return T9n.get(AccountsTemplates.texts.signInLink_suff, markIfMissing=false);                               // 15\n    },                                                                                                              // 16\n};                                                                                                                  // 17\n                                                                                                                    // 18\nAT.prototype.atSigninLinkEvents = {                                                                                 // 19\n    \"click #at-signIn\": function(event, t) {                                                                        // 20\n        event.preventDefault();                                                                                     // 21\n        AccountsTemplates.linkClick(\"signIn\");                                                                      // 22\n    },                                                                                                              // 23\n};                                                                                                                  // 24\n                                                                                                                    // 25\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/useraccounts_core/lib/templates_helpers/at_signup_link.js                                               //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nAT.prototype.atSignupLinkHelpers = {                                                                                // 1\n    disabled: function() {                                                                                          // 2\n        return AccountsTemplates.disabled();                                                                        // 3\n    },                                                                                                              // 4\n    signUpLink: function(){                                                                                         // 5\n        return AccountsTemplates.getRoutePath(\"signUp\");                                                            // 6\n    },                                                                                                              // 7\n    preText: function(){                                                                                            // 8\n        return T9n.get(AccountsTemplates.texts.signUpLink_pre, markIfMissing=false);                                // 9\n    },                                                                                                              // 10\n    linkText: function(){                                                                                           // 11\n        return T9n.get(AccountsTemplates.texts.signUpLink_link, markIfMissing=false);                               // 12\n    },                                                                                                              // 13\n    suffText: function(){                                                                                           // 14\n        return T9n.get(AccountsTemplates.texts.signUpLink_suff, markIfMissing=false);                               // 15\n    },                                                                                                              // 16\n};                                                                                                                  // 17\n                                                                                                                    // 18\nAT.prototype.atSignupLinkEvents = {                                                                                 // 19\n    \"click #at-signUp\": function(event, t) {                                                                        // 20\n        event.preventDefault();                                                                                     // 21\n        AccountsTemplates.linkClick('signUp');                                                                      // 22\n    },                                                                                                              // 23\n};                                                                                                                  // 24\n                                                                                                                    // 25\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/useraccounts_core/lib/templates_helpers/at_social.js                                                    //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nAT.prototype.atSocialHelpers = {                                                                                    // 1\n    disabled: function() {                                                                                          // 2\n        if (AccountsTemplates.disabled())                                                                           // 3\n            return \"disabled\";                                                                                      // 4\n        var user = Meteor.user();                                                                                   // 5\n        if (user){                                                                                                  // 6\n            var numServices = 0;                                                                                    // 7\n            if (user.services)                                                                                      // 8\n                numServices = _.keys(user.services).length; // including \"resume\"                                   // 9\n            if (numServices === 2 && user.services[this._id])                                                       // 10\n                return \"disabled\";                                                                                  // 11\n        }                                                                                                           // 12\n    },                                                                                                              // 13\n    name: function(){                                                                                               // 14\n        return this._id;                                                                                            // 15\n    },                                                                                                              // 16\n    iconClass: function() {                                                                                         // 17\n        var ic = AccountsTemplates.texts.socialIcons[this._id];                                                     // 18\n        if (!ic)                                                                                                    // 19\n            ic = \"fa fa-\" + this._id;                                                                               // 20\n        return ic;                                                                                                  // 21\n    },                                                                                                              // 22\n    buttonText: function() {                                                                                        // 23\n        var service = this;                                                                                         // 24\n        var serviceName = this._id;                                                                                 // 25\n        if (serviceName === \"meteor-developer\")                                                                     // 26\n            serviceName = \"meteor\";                                                                                 // 27\n        serviceName = capitalize(serviceName);                                                                      // 28\n        if (!service.configured)                                                                                    // 29\n            return T9n.get(AccountsTemplates.texts.socialConfigure, markIfMissing=false) + \" \" + serviceName;       // 30\n        var showAddRemove = AccountsTemplates.options.showAddRemoveServices;                                        // 31\n        var user = Meteor.user();                                                                                   // 32\n        if (user && showAddRemove){                                                                                 // 33\n            if (user.services && user.services[this._id]){                                                          // 34\n                var numServices = _.keys(user.services).length; // including \"resume\"                               // 35\n                if (numServices === 2)                                                                              // 36\n                    return serviceName;                                                                             // 37\n                else                                                                                                // 38\n                    return T9n.get(AccountsTemplates.texts.socialRemove, markIfMissing=false) + \" \" + serviceName;  // 39\n            } else                                                                                                  // 40\n                    return T9n.get(AccountsTemplates.texts.socialAdd, markIfMissing=false) + \" \" + serviceName;     // 41\n        }                                                                                                           // 42\n        var parentData = Template.parentData();                                                                     // 43\n        var state = (parentData && parentData.state) || AccountsTemplates.getState();                               // 44\n        var prefix = state === \"signIn\" ?                                                                           // 45\n            T9n.get(AccountsTemplates.texts.socialSignIn, markIfMissing=false) :                                    // 46\n            T9n.get(AccountsTemplates.texts.socialSignUp, markIfMissing=false);                                     // 47\n        return prefix + \" \" + T9n.get(AccountsTemplates.texts.socialWith, markIfMissing=false) + \" \" + serviceName;\n    },                                                                                                              // 49\n};                                                                                                                  // 50\n                                                                                                                    // 51\nAT.prototype.atSocialEvents = {                                                                                     // 52\n    \"click button\": function(event, t) {                                                                            // 53\n        event.preventDefault();                                                                                     // 54\n        event.currentTarget.blur();                                                                                 // 55\n        if (AccountsTemplates.disabled())                                                                           // 56\n            return;                                                                                                 // 57\n        var user = Meteor.user();                                                                                   // 58\n        if (user && user.services && user.services[this._id]){                                                      // 59\n            var numServices = _.keys(user.services).length; // including \"resume\"                                   // 60\n            if (numServices === 2)                                                                                  // 61\n                return;                                                                                             // 62\n            else{                                                                                                   // 63\n                AccountsTemplates.setDisabled(true);                                                                // 64\n                Meteor.call(\"ATRemoveService\", this._id, function(error){                                           // 65\n                    AccountsTemplates.setDisabled(false);                                                           // 66\n                });                                                                                                 // 67\n            }                                                                                                       // 68\n        } else {                                                                                                    // 69\n            AccountsTemplates.setDisabled(true);                                                                    // 70\n            var parentData = Template.parentData();                                                                 // 71\n            var state = (parentData && parentData.state) || AccountsTemplates.getState();                           // 72\n            var serviceName = this._id;                                                                             // 73\n            var methodName;                                                                                         // 74\n            if (serviceName === 'meteor-developer')                                                                 // 75\n                methodName = \"loginWithMeteorDeveloperAccount\";                                                     // 76\n            else                                                                                                    // 77\n                methodName = \"loginWith\" + capitalize(serviceName);                                                 // 78\n            var loginWithService = Meteor[methodName];                                                              // 79\n            options = {                                                                                             // 80\n                loginStyle: AccountsTemplates.options.socialLoginStyle,                                             // 81\n            };                                                                                                      // 82\n            if (Accounts.ui) {                                                                                      // 83\n                if (Accounts.ui._options.requestPermissions[serviceName]) {                                         // 84\n                    options.requestPermissions = Accounts.ui._options.requestPermissions[serviceName];              // 85\n                }                                                                                                   // 86\n                if (Accounts.ui._options.requestOfflineToken[serviceName]) {                                        // 87\n                    options.requestOfflineToken = Accounts.ui._options.requestOfflineToken[serviceName];            // 88\n                }                                                                                                   // 89\n            }                                                                                                       // 90\n            loginWithService(options, function(err) {                                                               // 91\n                AccountsTemplates.setDisabled(false);                                                               // 92\n                if (err && err instanceof Accounts.LoginCancelledError) {                                           // 93\n                    // do nothing                                                                                   // 94\n                }                                                                                                   // 95\n                else if (err && err instanceof ServiceConfiguration.ConfigError) {                                  // 96\n                    if (Accounts._loginButtonsSession)                                                              // 97\n                        return Accounts._loginButtonsSession.configureService(serviceName);                         // 98\n                }                                                                                                   // 99\n                else                                                                                                // 100\n                    AccountsTemplates.submitCallback(err, state);                                                   // 101\n            });                                                                                                     // 102\n        }                                                                                                           // 103\n    },                                                                                                              // 104\n};                                                                                                                  // 105\n                                                                                                                    // 106\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/useraccounts_core/lib/templates_helpers/at_terms_link.js                                                //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nAT.prototype.atTermsLinkHelpers = {                                                                                 // 1\n    disabled: function() {                                                                                          // 2\n        return AccountsTemplates.disabled();                                                                        // 3\n    },                                                                                                              // 4\n    text: function(){                                                                                               // 5\n        return T9n.get(AccountsTemplates.texts.termsPreamble, markIfMissing=false);                                 // 6\n    },                                                                                                              // 7\n    privacyUrl: function(){                                                                                         // 8\n        return AccountsTemplates.options.privacyUrl;                                                                // 9\n    },                                                                                                              // 10\n    privacyLinkText: function(){                                                                                    // 11\n        return T9n.get(AccountsTemplates.texts.termsPrivacy, markIfMissing=false);                                  // 12\n    },                                                                                                              // 13\n    showTermsAnd: function(){                                                                                       // 14\n        return !!AccountsTemplates.options.privacyUrl && !!AccountsTemplates.options.termsUrl;                      // 15\n    },                                                                                                              // 16\n    and: function(){                                                                                                // 17\n        return T9n.get(AccountsTemplates.texts.termsAnd, markIfMissing=false);                                      // 18\n    },                                                                                                              // 19\n    termsUrl: function(){                                                                                           // 20\n        return AccountsTemplates.options.termsUrl;                                                                  // 21\n    },                                                                                                              // 22\n    termsLinkText: function(){                                                                                      // 23\n        return T9n.get(AccountsTemplates.texts.termsTerms, markIfMissing=false);                                    // 24\n    },                                                                                                              // 25\n};                                                                                                                  // 26\n                                                                                                                    // 27\nAT.prototype.atTermsLinkEvents = {                                                                                  // 28\n    \"click a\": function(event) {                                                                                    // 29\n        if (AccountsTemplates.disabled())                                                                           // 30\n            event.preventDefault();                                                                                 // 31\n    },                                                                                                              // 32\n};                                                                                                                  // 33\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/useraccounts_core/lib/templates_helpers/at_title.js                                                     //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nAT.prototype.atTitleHelpers = {                                                                                     // 1\n  title: function() {                                                                                               // 2\n    var parentData = Template.currentData();                                                                        // 3\n    var state = (parentData && parentData.state) || AccountsTemplates.getState();                                   // 4\n    return T9n.get(AccountsTemplates.texts.title[state], markIfMissing = false);                                    // 5\n  },                                                                                                                // 6\n};                                                                                                                  // 7\n                                                                                                                    // 8\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/useraccounts_core/lib/templates_helpers/at_message.js                                                   //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nAT.prototype.atMessageHelpers = {                                                                                   // 1\n    message: function() {                                                                                           // 2\n        var messageText = AccountsTemplates.state.form.get(\"message\");                                              // 3\n        if (messageText)                                                                                            // 4\n            return T9n.get(messageText, markIfMissing=false);                                                       // 5\n    },                                                                                                              // 6\n};                                                                                                                  // 7\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/useraccounts_core/lib/templates_helpers/template.ensure_signed_in.js                                    //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n                                                                                                                    // 1\nTemplate.__checkName(\"ensureSignedIn\");                                                                             // 2\nTemplate[\"ensureSignedIn\"] = new Template(\"Template.ensureSignedIn\", (function() {                                  // 3\n  var view = this;                                                                                                  // 4\n  return Blaze.If(function() {                                                                                      // 5\n    return Spacebars.call(view.lookup(\"signedIn\"));                                                                 // 6\n  }, function() {                                                                                                   // 7\n    return [ \"\\n    \", Blaze._TemplateWith(function() {                                                             // 8\n      return {                                                                                                      // 9\n        template: Spacebars.call(view.lookup(\"template\"))                                                           // 10\n      };                                                                                                            // 11\n    }, function() {                                                                                                 // 12\n      return Spacebars.include(function() {                                                                         // 13\n        return Spacebars.call(Template.__dynamic);                                                                  // 14\n      });                                                                                                           // 15\n    }), \"\\n  \" ];                                                                                                   // 16\n  }, function() {                                                                                                   // 17\n    return [ \"\\n    \", Blaze.If(function() {                                                                        // 18\n      return Spacebars.call(view.lookup(\"auth\"));                                                                   // 19\n    }, function() {                                                                                                 // 20\n      return [ \"\\n      \", Blaze._TemplateWith(function() {                                                         // 21\n        return {                                                                                                    // 22\n          template: Spacebars.call(view.lookup(\"auth\"))                                                             // 23\n        };                                                                                                          // 24\n      }, function() {                                                                                               // 25\n        return Spacebars.include(function() {                                                                       // 26\n          return Spacebars.call(Template.__dynamic);                                                                // 27\n        });                                                                                                         // 28\n      }), \"\\n    \" ];                                                                                               // 29\n    }, function() {                                                                                                 // 30\n      return [ \"\\n      \", Spacebars.include(view.lookupTemplate(\"fullPageAtForm\")), \"\\n    \" ];                    // 31\n    }), \"\\n  \" ];                                                                                                   // 32\n  });                                                                                                               // 33\n}));                                                                                                                // 34\n                                                                                                                    // 35\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/useraccounts_core/lib/templates_helpers/ensure_signed_in.js                                             //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n                                                                                                                    // 1\nTemplate.ensureSignedIn.helpers({                                                                                   // 2\n  signedIn: function () {                                                                                           // 3\n    if (!Meteor.user()) {                                                                                           // 4\n      AccountsTemplates.setState(AccountsTemplates.options.defaultState, function(){                                // 5\n        var err = AccountsTemplates.texts.errors.mustBeLoggedIn;                                                    // 6\n        AccountsTemplates.state.form.set('error', [err]);                                                           // 7\n      });                                                                                                           // 8\n      return false;                                                                                                 // 9\n    } else {                                                                                                        // 10\n      AccountsTemplates.clearError();                                                                               // 11\n      return true;                                                                                                  // 12\n    }                                                                                                               // 13\n  }                                                                                                                 // 14\n});                                                                                                                 // 15\n                                                                                                                    // 16\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/useraccounts_core/lib/methods.js                                                                        //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n/* global                                                                                                           // 1\n  AccountsTemplates: false                                                                                          // 2\n*/                                                                                                                  // 3\n\"use strict\";                                                                                                       // 4\n                                                                                                                    // 5\nMeteor.methods({                                                                                                    // 6\n  ATRemoveService: function(serviceName) {                                                                          // 7\n    check(serviceName, String);                                                                                     // 8\n                                                                                                                    // 9\n    var userId = this.userId;                                                                                       // 10\n                                                                                                                    // 11\n    if (userId) {                                                                                                   // 12\n      var user = Meteor.users.findOne(userId);                                                                      // 13\n      var numServices = _.keys(user.services).length; // including \"resume\"                                         // 14\n      var unset = {};                                                                                               // 15\n                                                                                                                    // 16\n      if (numServices === 2) {                                                                                      // 17\n        throw new Meteor.Error(403, AccountsTemplates.texts.errors.cannotRemoveService, {});                        // 18\n      }                                                                                                             // 19\n                                                                                                                    // 20\n      unset[\"services.\" + serviceName] = \"\";                                                                        // 21\n      Meteor.users.update(userId, {$unset: unset});                                                                 // 22\n    }                                                                                                               // 23\n  },                                                                                                                // 24\n});                                                                                                                 // 25\n                                                                                                                    // 26\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['useraccounts:core'] = {}, {\n  AccountsTemplates: AccountsTemplates\n});\n\n})();\n","servePath":"/packages/useraccounts_core.js"}]