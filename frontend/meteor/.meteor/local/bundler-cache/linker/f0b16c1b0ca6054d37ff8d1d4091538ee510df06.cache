[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar OAuth = Package.oauth.OAuth;\nvar Oauth = Package.oauth.Oauth;\nvar HTTP = Package.http.HTTP;\nvar HTTPInternals = Package.http.HTTPInternals;\nvar _ = Package.underscore._;\nvar ServiceConfiguration = Package['service-configuration'].ServiceConfiguration;\n\n/* Package-scope variables */\nvar Facebook;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                //\n// packages/facebook/facebook_server.js                                                           //\n//                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                  //\nFacebook = {};\n\nvar querystring = Npm.require('querystring');\n\n\nOAuth.registerService('facebook', 2, null, function(query) {\n\n  var response = getTokenResponse(query);\n  var accessToken = response.accessToken;\n\n  // include all fields from facebook\n  // http://developers.facebook.com/docs/reference/login/public-profile-and-friend-list/\n  var whitelisted = ['id', 'email', 'name', 'first_name',\n      'last_name', 'link', 'gender', 'locale', 'age_range'];\n\n  var identity = getIdentity(accessToken, whitelisted);\n\n  var serviceData = {\n    accessToken: accessToken,\n    expiresAt: (+new Date) + (1000 * response.expiresIn)\n  };\n\n\n  var fields = _.pick(identity, whitelisted);\n  _.extend(serviceData, fields);\n\n  return {\n    serviceData: serviceData,\n    options: {profile: {name: identity.name}}\n  };\n});\n\n// checks whether a string parses as JSON\nvar isJSON = function (str) {\n  try {\n    JSON.parse(str);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\n// returns an object containing:\n// - accessToken\n// - expiresIn: lifetime of token in seconds\nvar getTokenResponse = function (query) {\n  var config = ServiceConfiguration.configurations.findOne({service: 'facebook'});\n  if (!config)\n    throw new ServiceConfiguration.ConfigError();\n\n  var responseContent;\n  try {\n    // Request an access token\n    responseContent = HTTP.get(\n      \"https://graph.facebook.com/v2.2/oauth/access_token\", {\n        params: {\n          client_id: config.appId,\n          redirect_uri: OAuth._redirectUri('facebook', config),\n          client_secret: OAuth.openSecret(config.secret),\n          code: query.code\n        }\n      }).content;\n  } catch (err) {\n    throw _.extend(new Error(\"Failed to complete OAuth handshake with Facebook. \" + err.message),\n                   {response: err.response});\n  }\n\n  // If 'responseContent' parses as JSON, it is an error.\n  // XXX which facebook error causes this behvaior?\n  if (isJSON(responseContent)) {\n    throw new Error(\"Failed to complete OAuth handshake with Facebook. \" + responseContent);\n  }\n\n  // Success!  Extract the facebook access token and expiration\n  // time from the response\n  var parsedResponse = querystring.parse(responseContent);\n  var fbAccessToken = parsedResponse.access_token;\n  var fbExpires = parsedResponse.expires;\n\n  if (!fbAccessToken) {\n    throw new Error(\"Failed to complete OAuth handshake with facebook \" +\n                    \"-- can't find access token in HTTP response. \" + responseContent);\n  }\n  return {\n    accessToken: fbAccessToken,\n    expiresIn: fbExpires\n  };\n};\n\nvar getIdentity = function (accessToken, fields) {\n  try {\n    return HTTP.get(\"https://graph.facebook.com/v2.4/me\", {\n      params: {\n        access_token: accessToken,\n        fields: fields\n      }\n    }).data;\n  } catch (err) {\n    throw _.extend(new Error(\"Failed to fetch identity from Facebook. \" + err.message),\n                   {response: err.response});\n  }\n};\n\nFacebook.retrieveCredential = function(credentialToken, credentialSecret) {\n  return OAuth.retrieveCredential(credentialToken, credentialSecret);\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package.facebook = {}, {\n  Facebook: Facebook\n});\n\n})();\n","servePath":"/packages/facebook.js"}]