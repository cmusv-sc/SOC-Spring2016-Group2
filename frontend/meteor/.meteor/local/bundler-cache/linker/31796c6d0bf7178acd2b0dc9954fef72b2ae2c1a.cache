[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar $ = Package.jquery.$;\nvar jQuery = Package.jquery.jQuery;\nvar Iron = Package['iron:core'].Iron;\n\n/* Package-scope variables */\nvar urlToHashStyle, urlFromHashStyle, fixHashPath, State, Location;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                          //\n// packages/iron_location/lib/utils.js                                                                      //\n//                                                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                            //\nvar Url = Iron.Url;                                                                                         // 1\nvar HASH_PARAM_NAME='__hash__';                                                                             // 2\n                                                                                                            // 3\n/**                                                                                                         // 4\n * Given:                                                                                                   // 5\n *   http://host:port/some/pathname/?query=string#bar                                                       // 6\n *                                                                                                          // 7\n * Return:                                                                                                  // 8\n *   http://host:port#!some/pathname/?query=string&__hash__=bar                                             // 9\n */                                                                                                         // 10\nurlToHashStyle = function (url) {                                                                           // 11\n  var parts = Url.parse(url);                                                                               // 12\n  var hash = parts.hash && parts.hash.replace('#', '');                                                     // 13\n  var search = parts.search;                                                                                // 14\n  var pathname = parts.pathname;                                                                            // 15\n  var root = parts.rootUrl;                                                                                 // 16\n                                                                                                            // 17\n  // do we have another hash value that isn't a path?                                                       // 18\n  if (hash && hash.charAt(0) !== '!') {                                                                     // 19\n    var hashQueryString = HASH_PARAM_NAME + '=' + hash;                                                     // 20\n    search = search ? (search + '&') : '?';                                                                 // 21\n    search += hashQueryString;                                                                              // 22\n    hash = '';                                                                                              // 23\n  }                                                                                                         // 24\n                                                                                                            // 25\n  // if we don't already have a path on the hash create one                                                 // 26\n  if (! hash && pathname) {                                                                                 // 27\n    hash = '#!' + pathname.substring(1);                                                                    // 28\n  } else if (hash) {                                                                                        // 29\n    hash = '#' + hash;                                                                                      // 30\n  }                                                                                                         // 31\n                                                                                                            // 32\n  return [                                                                                                  // 33\n    root,                                                                                                   // 34\n    hash,                                                                                                   // 35\n    search                                                                                                  // 36\n  ].join('');                                                                                               // 37\n};                                                                                                          // 38\n                                                                                                            // 39\n/**                                                                                                         // 40\n * Given a url that uses the hash style (see above), return a new url that uses                             // 41\n * the hash path as a normal pathname.                                                                      // 42\n *                                                                                                          // 43\n * Given:                                                                                                   // 44\n *   http://host:port#!some/pathname/?query=string&__hash__=bar                                             // 45\n *                                                                                                          // 46\n * Return:                                                                                                  // 47\n *   http://host:port/some/pathname/?query=string#bar                                                       // 48\n */                                                                                                         // 49\nurlFromHashStyle = function (url) {                                                                         // 50\n  var parts = Url.parse(url);                                                                               // 51\n  var pathname = parts.hash && parts.hash.replace('#!', '/');                                               // 52\n  var search = parts.search;                                                                                // 53\n  var root = parts.rootUrl;                                                                                 // 54\n  var hash;                                                                                                 // 55\n                                                                                                            // 56\n  // see if there's a __hash__=value in the query string in which case put it                               // 57\n  // back in the normal hash position and delete it from the search string.                                 // 58\n  if (_.has(parts.queryObject, HASH_PARAM_NAME)) {                                                          // 59\n    hash = '#' + parts.queryObject[HASH_PARAM_NAME];                                                        // 60\n    delete parts.queryObject[HASH_PARAM_NAME];                                                              // 61\n  } else {                                                                                                  // 62\n    hash = '';                                                                                              // 63\n  }                                                                                                         // 64\n                                                                                                            // 65\n  return [                                                                                                  // 66\n    root,                                                                                                   // 67\n    pathname,                                                                                               // 68\n    Url.toQueryString(parts.queryObject),                                                                   // 69\n    hash                                                                                                    // 70\n  ].join('');                                                                                               // 71\n};                                                                                                          // 72\n                                                                                                            // 73\n/**                                                                                                         // 74\n * Fix up a pathname intended for use with a hash path by moving any hash                                   // 75\n * fragments into the query string.                                                                         // 76\n */                                                                                                         // 77\nfixHashPath = function (pathname) {                                                                         // 78\n  var parts = Url.parse(pathname);                                                                          // 79\n  var query = parts.queryObject;                                                                            // 80\n                                                                                                            // 81\n  // if there's a hash in the path move that to the query string                                            // 82\n  if (parts.hash) {                                                                                         // 83\n    query[HASH_PARAM_NAME] = parts.hash.replace('#', '')                                                    // 84\n  }                                                                                                         // 85\n                                                                                                            // 86\n  return [                                                                                                  // 87\n    '!',                                                                                                    // 88\n    parts.pathname.substring(1),                                                                            // 89\n    Url.toQueryString(query)                                                                                // 90\n  ].join('');                                                                                               // 91\n};                                                                                                          // 92\n                                                                                                            // 93\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                          //\n// packages/iron_location/lib/state.js                                                                      //\n//                                                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                            //\nvar Url = Iron.Url;                                                                                         // 1\n                                                                                                            // 2\nState = function (url, options) {                                                                           // 3\n  _.extend(this, Url.parse(url), {options: options || {}});                                                 // 4\n};                                                                                                          // 5\n                                                                                                            // 6\n// XXX: should this compare options (e.g. history.state?)                                                   // 7\nState.prototype.equals = function (other) {                                                                 // 8\n  if (!other)                                                                                               // 9\n    return false;                                                                                           // 10\n                                                                                                            // 11\n  if (!(other instanceof State))                                                                            // 12\n    return false;                                                                                           // 13\n                                                                                                            // 14\n  if (other.pathname == this.pathname &&                                                                    // 15\n     other.search == this.search &&                                                                         // 16\n     other.hash == this.hash &&                                                                             // 17\n     other.options.historyState === this.options.historyState)                                              // 18\n    return true;                                                                                            // 19\n                                                                                                            // 20\n  return false;                                                                                             // 21\n};                                                                                                          // 22\n                                                                                                            // 23\nState.prototype.isCancelled = function () {                                                                 // 24\n  return !!this._isCancelled;                                                                               // 25\n};                                                                                                          // 26\n                                                                                                            // 27\nState.prototype.cancelUrlChange = function () {                                                             // 28\n  this._isCancelled = true;                                                                                 // 29\n};                                                                                                          // 30\n                                                                                                            // 31\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                          //\n// packages/iron_location/lib/location.js                                                                   //\n//                                                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                            //\n/*****************************************************************************/                             // 1\n/* Imports */                                                                                               // 2\n/*****************************************************************************/                             // 3\nvar Url = Iron.Url;                                                                                         // 4\n                                                                                                            // 5\n/*****************************************************************************/                             // 6\n/* Private */                                                                                               // 7\n/*****************************************************************************/                             // 8\nvar current = null;                                                                                         // 9\nvar dep = new Deps.Dependency;                                                                              // 10\nvar handlers = {go: [], popState: []};                                                                      // 11\n                                                                                                            // 12\nvar isIE9 = function () {                                                                                   // 13\n  return /MSIE 9/.test(navigator.appVersion);                                                               // 14\n};                                                                                                          // 15\n                                                                                                            // 16\nvar isIE8 = function () {                                                                                   // 17\n  return /MSIE 8/.test(navigator.appVersion);                                                               // 18\n};                                                                                                          // 19\n                                                                                                            // 20\nvar usingAppcache = function() {                                                                            // 21\n  return !! Package.appcache;                                                                               // 22\n}                                                                                                           // 23\n                                                                                                            // 24\nvar replaceStateUndefined = function() {                                                                    // 25\n  return (typeof history === \"undefined\")  || (typeof history.pushState !== \"function\");                    // 26\n}                                                                                                           // 27\n                                                                                                            // 28\nvar shouldUseHashPaths = function () {                                                                      // 29\n  return Location.options.useHashPaths || isIE8() || isIE9() || usingAppcache() || replaceStateUndefined();\n};                                                                                                          // 31\n                                                                                                            // 32\nvar isUsingHashPaths = function () {                                                                        // 33\n  return !!Location.options.useHashPaths;                                                                   // 34\n};                                                                                                          // 35\n                                                                                                            // 36\nvar runHandlers = function(name, state) {                                                                   // 37\n  _.each(handlers[name], function(cb) {                                                                     // 38\n    cb.call(state);                                                                                         // 39\n  });                                                                                                       // 40\n}                                                                                                           // 41\n                                                                                                            // 42\nvar set = function (state) {                                                                                // 43\n  if (!(state instanceof State))                                                                            // 44\n    throw new Error(\"Expected a State instance\");                                                           // 45\n                                                                                                            // 46\n  if (!state.equals(current)) {                                                                             // 47\n    current = state;                                                                                        // 48\n    dep.changed();                                                                                          // 49\n                                                                                                            // 50\n    // return true to indicate state was set to a new value.                                                // 51\n    return true;                                                                                            // 52\n  }                                                                                                         // 53\n                                                                                                            // 54\n  // state not set                                                                                          // 55\n  return false;                                                                                             // 56\n};                                                                                                          // 57\n                                                                                                            // 58\nvar setStateFromEventHandler = function () {                                                                // 59\n  var href = location.href;                                                                                 // 60\n  var state;                                                                                                // 61\n                                                                                                            // 62\n  if (isUsingHashPaths()) {                                                                                 // 63\n    state = new State(urlFromHashStyle(href));                                                              // 64\n  } else {                                                                                                  // 65\n    state = new State(href, {historyState: history.state});                                                 // 66\n  }                                                                                                         // 67\n                                                                                                            // 68\n  runHandlers('popState', state);                                                                           // 69\n  set(state);                                                                                               // 70\n};                                                                                                          // 71\n                                                                                                            // 72\nvar fireOnClick = function (e) {                                                                            // 73\n  var handler = onClickHandler;                                                                             // 74\n  handler && handler(e);                                                                                    // 75\n};                                                                                                          // 76\n                                                                                                            // 77\n/**                                                                                                         // 78\n * Go to a url.                                                                                             // 79\n */                                                                                                         // 80\nvar go = function (url, options) {                                                                          // 81\n  options = options || {};                                                                                  // 82\n                                                                                                            // 83\n  var state = new State(url, options);                                                                      // 84\n                                                                                                            // 85\n  runHandlers('go', state);                                                                                 // 86\n                                                                                                            // 87\n  if (set(state)) {                                                                                         // 88\n    Deps.afterFlush(function () {                                                                           // 89\n      // if after we've flushed if nobody has cancelled the state then change                               // 90\n      // the url.                                                                                           // 91\n      if (!state.isCancelled()) {                                                                           // 92\n        if (isUsingHashPaths()) {                                                                           // 93\n          location.hash = fixHashPath(url);                                                                 // 94\n        } else {                                                                                            // 95\n          if (options.replaceState === true)                                                                // 96\n            history.replaceState(options.historyState, null, url);                                          // 97\n          else                                                                                              // 98\n            history.pushState(options.historyState, null, url);                                             // 99\n        }                                                                                                   // 100\n      }                                                                                                     // 101\n    });                                                                                                     // 102\n  }                                                                                                         // 103\n};                                                                                                          // 104\n                                                                                                            // 105\nvar onClickHandler = function (e) {                                                                         // 106\n  try {                                                                                                     // 107\n    var el = e.currentTarget;                                                                               // 108\n    var href = el.href;                                                                                     // 109\n    var path = el.pathname + el.search + el.hash;                                                           // 110\n                                                                                                            // 111\n    // ie9 omits the leading slash in pathname - so patch up if it's missing                                // 112\n    path = path.replace(/(^\\/?)/,\"/\");                                                                      // 113\n                                                                                                            // 114\n    // haven't been cancelled already                                                                       // 115\n    if (e.isDefaultPrevented()) {                                                                           // 116\n      e.preventDefault();                                                                                   // 117\n      return;                                                                                               // 118\n    }                                                                                                       // 119\n                                                                                                            // 120\n    // with no meta key pressed                                                                             // 121\n    if (e.metaKey || e.ctrlKey || e.shiftKey)                                                               // 122\n      return;                                                                                               // 123\n                                                                                                            // 124\n    // aren't targeting a new window                                                                        // 125\n    if (el.target)                                                                                          // 126\n      return;                                                                                               // 127\n                                                                                                            // 128\n    // aren't external to the app                                                                           // 129\n    if (!Url.isSameOrigin(href, location.href))                                                             // 130\n      return;                                                                                               // 131\n                                                                                                            // 132\n    // note that we _do_ handle links which point to the current URL                                        // 133\n    // and links which only change the hash.                                                                // 134\n    e.preventDefault();                                                                                     // 135\n                                                                                                            // 136\n    // manage setting the new state and maybe pushing onto the pushState stack                              // 137\n    go(path);                                                                                               // 138\n  } catch (err) {                                                                                           // 139\n    // make sure we can see any errors that are thrown before going to the                                  // 140\n    // server.                                                                                              // 141\n    e.preventDefault();                                                                                     // 142\n    throw err;                                                                                              // 143\n  }                                                                                                         // 144\n};                                                                                                          // 145\n                                                                                                            // 146\n/*****************************************************************************/                             // 147\n/* Location API */                                                                                          // 148\n/*****************************************************************************/                             // 149\n                                                                                                            // 150\n/**                                                                                                         // 151\n * Main Location object. Reactively respond to url changes. Normalized urls                                 // 152\n * between hash style (ie8/9) and normal style using pushState.                                             // 153\n */                                                                                                         // 154\nLocation = {};                                                                                              // 155\n                                                                                                            // 156\n/**                                                                                                         // 157\n * Default options.                                                                                         // 158\n */                                                                                                         // 159\nLocation.options = {                                                                                        // 160\n  linkSelector: 'a[href]',                                                                                  // 161\n  useHashPaths: false                                                                                       // 162\n};                                                                                                          // 163\n                                                                                                            // 164\n/**                                                                                                         // 165\n * Set options on the Location object.                                                                      // 166\n */                                                                                                         // 167\nLocation.configure = function (options) {                                                                   // 168\n  _.extend(this.options, options || {});                                                                    // 169\n};                                                                                                          // 170\n                                                                                                            // 171\n/**                                                                                                         // 172\n * Reactively get the current state.                                                                        // 173\n */                                                                                                         // 174\nLocation.get = function () {                                                                                // 175\n  dep.depend();                                                                                             // 176\n  return current;                                                                                           // 177\n};                                                                                                          // 178\n                                                                                                            // 179\n/**                                                                                                         // 180\n * Set the initial state and start listening for url events.                                                // 181\n */                                                                                                         // 182\nLocation.start = function () {                                                                              // 183\n  if (this._isStarted)                                                                                      // 184\n    return;                                                                                                 // 185\n                                                                                                            // 186\n  var parts = Url.parse(location.href);                                                                     // 187\n                                                                                                            // 188\n  // if we're using the /#/items/5 style then start off at the root url but                                 // 189\n  // store away the pathname, query and hash into the hash fragment so when the                             // 190\n  // client gets the response we can render the correct page.                                               // 191\n  if (shouldUseHashPaths()) {                                                                               // 192\n    // if we have any pathname like /items/5 take a trip to the server to get us                            // 193\n    // back a root url.                                                                                     // 194\n    if (parts.pathname.length > 1) {                                                                        // 195\n      var url = urlToHashStyle(location.href);                                                              // 196\n      window.location = url;                                                                                // 197\n    }                                                                                                       // 198\n                                                                                                            // 199\n    // ok good to go                                                                                        // 200\n    this.configure({useHashPaths: true});                                                                   // 201\n  }                                                                                                         // 202\n  // set initial state                                                                                      // 203\n  var href = location.href;                                                                                 // 204\n                                                                                                            // 205\n  if (isUsingHashPaths()) {                                                                                 // 206\n    var state = new State(urlFromHashStyle(href));                                                          // 207\n    set(state);                                                                                             // 208\n  } else {                                                                                                  // 209\n    // if we started at a URL in the /#!items/5 style then we have picked up a                              // 210\n    // URL from an non-HTML5 user. Let's redirect to /items/5                                               // 211\n    if (parts.hash.replace('#', '')[0] === '!') {                                                           // 212\n      var href = urlFromHashStyle(href);                                                                    // 213\n    }                                                                                                       // 214\n                                                                                                            // 215\n    // store the fact that this is the first route we hit.                                                  // 216\n    // this serves two purposes                                                                             // 217\n    //   1. We can tell when we've reached an unhandled route and need to show a                            // 218\n    //      404 (rather than bailing out to let the server handle it)                                       // 219\n    //   2. Users can look at the state to tell if the history.back() will stay                             // 220\n    //      inside the app (this is important for mobile apps).                                             // 221\n    var historyState = {initial: true}                                                                      // 222\n    history.replaceState(historyState, null, href);                                                         // 223\n    var state = new State(href, {historyState: historyState});                                              // 224\n    set(state);                                                                                             // 225\n  }                                                                                                         // 226\n                                                                                                            // 227\n  // bind the event handlers                                                                                // 228\n  $(window).on('popstate.iron-location', setStateFromEventHandler);                                         // 229\n  $(window).on('hashchange.iron-location', setStateFromEventHandler);                                       // 230\n                                                                                                            // 231\n  // make sure we have a document before binding the click handler                                          // 232\n  Meteor.startup(function () {                                                                              // 233\n    $(document).on('click.iron-location', Location.options.linkSelector, fireOnClick);                      // 234\n  });                                                                                                       // 235\n                                                                                                            // 236\n  this._isStarted = true;                                                                                   // 237\n};                                                                                                          // 238\n                                                                                                            // 239\n/**                                                                                                         // 240\n * Stop the Location from listening for url changes.                                                        // 241\n */                                                                                                         // 242\nLocation.stop = function () {                                                                               // 243\n  if (!this._isStarted)                                                                                     // 244\n    return;                                                                                                 // 245\n                                                                                                            // 246\n  $(window).on('popstate.iron-location');                                                                   // 247\n  $(window).on('hashchange.iron-location');                                                                 // 248\n  $(document).off('click.iron-location');                                                                   // 249\n                                                                                                            // 250\n  this._isStarted = false;                                                                                  // 251\n};                                                                                                          // 252\n                                                                                                            // 253\n/**                                                                                                         // 254\n * Assign a different click handler.                                                                        // 255\n */                                                                                                         // 256\nLocation.onClick = function (fn) {                                                                          // 257\n  onClickHandler = fn;                                                                                      // 258\n};                                                                                                          // 259\n                                                                                                            // 260\n/**                                                                                                         // 261\n * Go to a new url.                                                                                         // 262\n */                                                                                                         // 263\nLocation.go = function (url, options) {                                                                     // 264\n  return go(url, options);                                                                                  // 265\n};                                                                                                          // 266\n                                                                                                            // 267\n/**                                                                                                         // 268\n * Run the supplied callback whenever we \"go\" to a new location.                                            // 269\n *                                                                                                          // 270\n * Argument: cb - function, called with no arguments,                                                       // 271\n * `this` is the state that's being set, _may_ be modified.                                                 // 272\n */                                                                                                         // 273\nLocation.onGo = function (cb) {                                                                             // 274\n  handlers.go.push(cb);                                                                                     // 275\n};                                                                                                          // 276\n                                                                                                            // 277\n/**                                                                                                         // 278\n * Run the supplied callback whenever we \"popState\" to an old location.                                     // 279\n *                                                                                                          // 280\n * Argument: cb - function, called with no arguments,                                                       // 281\n * `this` is the state that's being set, _may_ be modified.                                                 // 282\n */                                                                                                         // 283\nLocation.onPopState = function (cb) {                                                                       // 284\n  handlers.popState.push(cb);                                                                               // 285\n};                                                                                                          // 286\n                                                                                                            // 287\n/**                                                                                                         // 288\n * Automatically start Iron.Location                                                                        // 289\n */                                                                                                         // 290\nLocation.start();                                                                                           // 291\n                                                                                                            // 292\n/*****************************************************************************/                             // 293\n/* Namespacing */                                                                                           // 294\n/*****************************************************************************/                             // 295\nIron.Location = Location;                                                                                   // 296\n                                                                                                            // 297\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['iron:location'] = {}, {\n  urlToHashStyle: urlToHashStyle,\n  urlFromHashStyle: urlFromHashStyle\n});\n\n})();\n","servePath":"/packages/iron_location.js"}]