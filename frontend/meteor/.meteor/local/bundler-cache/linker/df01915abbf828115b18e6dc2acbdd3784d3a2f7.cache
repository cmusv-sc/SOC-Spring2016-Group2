[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Collection2 = Package['aldeed:collection2-core'].Collection2;\nvar _ = Package.underscore._;\nvar LocalCollection = Package.minimongo.LocalCollection;\nvar Minimongo = Package.minimongo.Minimongo;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar SimpleSchema = Package['aldeed:simple-schema'].SimpleSchema;\nvar MongoObject = Package['aldeed:simple-schema'].MongoObject;\nvar MongoInternals = Package.mongo.MongoInternals;\nvar Mongo = Package.mongo.Mongo;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////\n//                                                                                   //\n// packages/aldeed_schema-index/lib/indexing.js                                      //\n//                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////\n                                                                                     //\n// Extend the schema options allowed by SimpleSchema\nSimpleSchema.extendOptions({\n  index: Match.Optional(Match.OneOf(Number, String, Boolean)),\n  unique: Match.Optional(Boolean),\n  sparse: Match.Optional(Boolean),\n});\n\n// Define validation error messages\nSimpleSchema.messages({\n  notUnique: \"[label] must be unique\",\n});\n\nif (Meteor.isServer) {\n  Collection2.on('schema.attached', function (collection, ss) {\n    function ensureIndex(index, indexName, unique, sparse) {\n      Meteor.startup(function () {\n        collection._collection._ensureIndex(index, {\n          background: true,\n          name: indexName,\n          unique: unique,\n          sparse: sparse\n        });\n      });\n    }\n  \n    function dropIndex(indexName) {\n      Meteor.startup(function () {\n        try {\n          collection._collection._dropIndex(indexName);\n        } catch (err) {\n          // no index with that name, which is what we want\n        }\n      });\n    }\n  \n    // Loop over fields definitions and ensure collection indexes (server side only)\n    _.each(ss.schema(), function(definition, fieldName) {\n      if ('index' in definition || definition.unique === true) {\n        var index = {}, indexValue;\n        // If they specified `unique: true` but not `index`,\n        // we assume `index: 1` to set up the unique index in mongo\n        if ('index' in definition) {\n          indexValue = definition.index;\n          if (indexValue === true) indexValue = 1;\n        } else {\n          indexValue = 1;\n        }\n        var indexName = 'c2_' + fieldName;\n        // In the index object, we want object array keys without the \".$\" piece\n        var idxFieldName = fieldName.replace(/\\.\\$\\./g, \".\");\n        index[idxFieldName] = indexValue;\n        var unique = !!definition.unique && (indexValue === 1 || indexValue === -1);\n        var sparse = definition.sparse || false;\n  \n        // If unique and optional, force sparse to prevent errors\n        if (!sparse && unique && definition.optional) sparse = true;\n  \n        if (indexValue === false) {\n          dropIndex(indexName);\n        } else {\n          ensureIndex(index, indexName, unique, sparse);\n        }\n      }\n    });\n  });\n}\n///////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['aldeed:schema-index'] = {};\n\n})();\n","servePath":"/packages/aldeed_schema-index.js"}]