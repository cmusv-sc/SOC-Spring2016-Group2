[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Blaze = Package.ui.Blaze;\nvar UI = Package.ui.UI;\nvar Handlebars = Package.ui.Handlebars;\nvar _ = Package.underscore._;\nvar $ = Package.jquery.$;\nvar jQuery = Package.jquery.jQuery;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar ReactiveVar = Package['reactive-var'].ReactiveVar;\nvar Template = Package.templating.Template;\nvar Random = Package.random.Random;\nvar Iron = Package['iron:core'].Iron;\nvar HTML = Package.htmljs.HTML;\nvar Spacebars = Package.spacebars.Spacebars;\n\n/* Package-scope variables */\nvar DynamicTemplate;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/iron_dynamic-template/version_conflict_error.js                                                       //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\nif (Package['cmather:iron-dynamic-template']) {                                                                   // 1\n  throw new Error(\"\\n\\n\\\n    Sorry! The cmather:iron-{x} packages were migrated to the new package system with the wrong name, and you have duplicate copies.\\n\\\n    You can see which cmather:iron-{x} packages have been installed by using this command:\\n\\n\\\n    > meteor list\\n\\n\\\n    Can you remove any installed cmather:iron-{x} packages like this:\\\n    \\n\\n\\\n    > meteor remove cmather:iron-core\\n\\\n    > meteor remove cmather:iron-router\\n\\\n    > meteor remove cmather:iron-dynamic-template\\n\\\n    > meteor remove cmather:iron-dynamic-layout\\n\\\n    \\n\\\n    The new packages are named iron:{x}. For example:\\n\\n\\\n    > meteor add iron:router\\n\\n\\\n    Sorry for the hassle, but thank you!\\\n    \\n\\n\\\n  \");                                                                                                             // 17\n                                                                                                                  // 18\n}                                                                                                                 // 19\n                                                                                                                  // 20\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/iron_dynamic-template/template.dynamic_template.js                                                    //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\n                                                                                                                  // 1\nTemplate.__checkName(\"__DynamicTemplateError__\");                                                                 // 2\nTemplate[\"__DynamicTemplateError__\"] = new Template(\"Template.__DynamicTemplateError__\", (function() {            // 3\n  var view = this;                                                                                                // 4\n  return HTML.DIV({                                                                                               // 5\n    style: \"margin: 0 auto; color: red;\"                                                                          // 6\n  }, \"\\n    \", Blaze.View(\"lookup:msg\", function() {                                                              // 7\n    return Spacebars.mustache(view.lookup(\"msg\"));                                                                // 8\n  }), \"\\n  \");                                                                                                    // 9\n}));                                                                                                              // 10\n                                                                                                                  // 11\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/iron_dynamic-template/dynamic_template.js                                                             //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\n/*****************************************************************************/                                   // 1\n/* Imports */                                                                                                     // 2\n/*****************************************************************************/                                   // 3\nvar debug = Iron.utils.debug('iron:dynamic-template');                                                            // 4\nvar assert = Iron.utils.assert;                                                                                   // 5\nvar get = Iron.utils.get;                                                                                         // 6\nvar camelCase = Iron.utils.camelCase;                                                                             // 7\n                                                                                                                  // 8\n/*****************************************************************************/                                   // 9\n/* Private */                                                                                                     // 10\n/*****************************************************************************/                                   // 11\nvar typeOf = function (value) {                                                                                   // 12\n  return Object.prototype.toString.call(value);                                                                   // 13\n};                                                                                                                // 14\n                                                                                                                  // 15\n/*****************************************************************************/                                   // 16\n/* DynamicTemplate */                                                                                             // 17\n/*****************************************************************************/                                   // 18\n                                                                                                                  // 19\n/**                                                                                                               // 20\n * Render a component to the page whose template and data context can change                                      // 21\n * dynamically, either from code or from helpers.                                                                 // 22\n *                                                                                                                // 23\n */                                                                                                               // 24\nDynamicTemplate = function (options) {                                                                            // 25\n  this._id = Random.id();                                                                                         // 26\n  this.options = options = options || {};                                                                         // 27\n  this._template = options.template;                                                                              // 28\n  this._defaultTemplate = options.defaultTemplate;                                                                // 29\n  this._content = options.content;                                                                                // 30\n  this._data = options.data;                                                                                      // 31\n  this._templateDep = new Tracker.Dependency;                                                                     // 32\n  this._dataDep = new Tracker.Dependency;                                                                         // 33\n                                                                                                                  // 34\n  this._lookupHostDep = new Tracker.Dependency;                                                                   // 35\n  this._lookupHostValue = null;                                                                                   // 36\n                                                                                                                  // 37\n  this._hooks = {};                                                                                               // 38\n  this._eventMap = null;                                                                                          // 39\n  this._eventHandles = null;                                                                                      // 40\n  this._eventThisArg = null;                                                                                      // 41\n  this.name = options.name || this.constructor.prototype.name || 'DynamicTemplate';                               // 42\n                                                                                                                  // 43\n  // has the Blaze.View been created?                                                                             // 44\n  this.isCreated = false;                                                                                         // 45\n                                                                                                                  // 46\n  // has the Blaze.View been destroyed and not created again?                                                     // 47\n  this.isDestroyed = false;                                                                                       // 48\n};                                                                                                                // 49\n                                                                                                                  // 50\n/**                                                                                                               // 51\n * Get or set the template.                                                                                       // 52\n */                                                                                                               // 53\nDynamicTemplate.prototype.template = function (value) {                                                           // 54\n  if (arguments.length === 1 && value !== this._template) {                                                       // 55\n    this._template = value;                                                                                       // 56\n    this._templateDep.changed();                                                                                  // 57\n    return;                                                                                                       // 58\n  }                                                                                                               // 59\n                                                                                                                  // 60\n  if (arguments.length > 0)                                                                                       // 61\n    return;                                                                                                       // 62\n                                                                                                                  // 63\n  this._templateDep.depend();                                                                                     // 64\n                                                                                                                  // 65\n  // do we have a template?                                                                                       // 66\n  if (this._template)                                                                                             // 67\n    return (typeof this._template === 'function') ? this._template() : this._template;                            // 68\n                                                                                                                  // 69\n  // no template? ok let's see if we have a default one set                                                       // 70\n  if (this._defaultTemplate)                                                                                      // 71\n    return (typeof this._defaultTemplate === 'function') ? this._defaultTemplate() : this._defaultTemplate;       // 72\n};                                                                                                                // 73\n                                                                                                                  // 74\n/**                                                                                                               // 75\n * Get or set the default template.                                                                               // 76\n *                                                                                                                // 77\n * This function does not change any dependencies.                                                                // 78\n */                                                                                                               // 79\nDynamicTemplate.prototype.defaultTemplate = function (value) {                                                    // 80\n  if (arguments.length === 1)                                                                                     // 81\n    this._defaultTemplate = value;                                                                                // 82\n  else                                                                                                            // 83\n    return this._defaultTemplate;                                                                                 // 84\n};                                                                                                                // 85\n                                                                                                                  // 86\n/**                                                                                                               // 87\n * Clear the template and data contexts.                                                                          // 88\n */                                                                                                               // 89\nDynamicTemplate.prototype.clear = function () {                                                                   // 90\n  //XXX do we need to clear dependencies here too?                                                                // 91\n  this._template = undefined;                                                                                     // 92\n  this._data = undefined;                                                                                         // 93\n  this._templateDep.changed();                                                                                    // 94\n};                                                                                                                // 95\n                                                                                                                  // 96\n/**                                                                                                               // 97\n * Get or set the data context.                                                                                   // 98\n */                                                                                                               // 99\nDynamicTemplate.prototype.data = function (value) {                                                               // 100\n  if (arguments.length === 1 && value !== this._data) {                                                           // 101\n    this._data = value;                                                                                           // 102\n    this._dataDep.changed();                                                                                      // 103\n    return;                                                                                                       // 104\n  }                                                                                                               // 105\n                                                                                                                  // 106\n  this._dataDep.depend();                                                                                         // 107\n  return typeof this._data === 'function' ? this._data() : this._data;                                            // 108\n};                                                                                                                // 109\n                                                                                                                  // 110\n/**                                                                                                               // 111\n * Create the view if it hasn't been created yet.                                                                 // 112\n */                                                                                                               // 113\nDynamicTemplate.prototype.create = function (options) {                                                           // 114\n  var self = this;                                                                                                // 115\n                                                                                                                  // 116\n  if (this.isCreated) {                                                                                           // 117\n    throw new Error(\"DynamicTemplate view is already created\");                                                   // 118\n  }                                                                                                               // 119\n                                                                                                                  // 120\n  this.isCreated = true;                                                                                          // 121\n  this.isDestroyed = false;                                                                                       // 122\n                                                                                                                  // 123\n  var templateVar = ReactiveVar(null);                                                                            // 124\n                                                                                                                  // 125\n  var view = Blaze.View('DynamicTemplate', function () {                                                          // 126\n    var thisView = this;                                                                                          // 127\n                                                                                                                  // 128\n    // create the template dependency here because we need the entire                                             // 129\n    // dynamic template to re-render if the template changes, including                                           // 130\n    // the Blaze.With view.                                                                                       // 131\n    var template = templateVar.get();                                                                             // 132\n                                                                                                                  // 133\n    return Blaze.With(function () {                                                                               // 134\n      // NOTE: This will rerun anytime the data function invalidates this                                         // 135\n      // computation OR if created from an inclusion helper (see note below) any                                  // 136\n      // time any of the argument functions invlidate the computation. For                                        // 137\n      // example, when the template changes this function will rerun also. But                                    // 138\n      // it's probably generally ok. The more serious use case is to not                                          // 139\n      // re-render the entire template every time the data context changes.                                       // 140\n      var result = self.data();                                                                                   // 141\n                                                                                                                  // 142\n      if (typeof result !== 'undefined')                                                                          // 143\n        // looks like data was set directly on this dynamic template                                              // 144\n        return result;                                                                                            // 145\n      else                                                                                                        // 146\n        // return the first parent data context that is not inclusion arguments                                   // 147\n        return DynamicTemplate.getParentDataContext(thisView);                                                    // 148\n    }, function () {                                                                                              // 149\n      return self.renderView(template);                                                                           // 150\n    });                                                                                                           // 151\n  });                                                                                                             // 152\n                                                                                                                  // 153\n  view.onViewCreated(function () {                                                                                // 154\n    this.autorun(function () {                                                                                    // 155\n      templateVar.set(self.template());                                                                           // 156\n    });                                                                                                           // 157\n  });                                                                                                             // 158\n                                                                                                                  // 159\n  // wire up the view lifecycle callbacks                                                                         // 160\n  _.each(['onViewCreated', 'onViewReady', '_onViewRendered', 'onViewDestroyed'], function (hook) {                // 161\n    view[hook](function () {                                                                                      // 162\n      // \"this\" is the view instance                                                                              // 163\n      self._runHooks(hook, this);                                                                                 // 164\n    });                                                                                                           // 165\n  });                                                                                                             // 166\n                                                                                                                  // 167\n  view._onViewRendered(function () {                                                                              // 168\n    // avoid inserting the view twice by accident.                                                                // 169\n    self.isInserted = true;                                                                                       // 170\n                                                                                                                  // 171\n    if (view.renderCount !== 1)                                                                                   // 172\n      return;                                                                                                     // 173\n                                                                                                                  // 174\n    self._attachEvents();                                                                                         // 175\n  });                                                                                                             // 176\n                                                                                                                  // 177\n  view.onViewDestroyed(function () {                                                                              // 178\n    // clean up the event handlers if                                                                             // 179\n    // the view is destroyed                                                                                      // 180\n    self._detachEvents();                                                                                         // 181\n  });                                                                                                             // 182\n                                                                                                                  // 183\n  view._templateInstance = new Blaze.TemplateInstance(view);                                                      // 184\n  view.templateInstance = function () {                                                                           // 185\n    // Update data, firstNode, and lastNode, and return the TemplateInstance                                      // 186\n    // object.                                                                                                    // 187\n    var inst = view._templateInstance;                                                                            // 188\n                                                                                                                  // 189\n    inst.data = Blaze.getData(view);                                                                              // 190\n                                                                                                                  // 191\n    if (view._domrange && !view.isDestroyed) {                                                                    // 192\n      inst.firstNode = view._domrange.firstNode();                                                                // 193\n      inst.lastNode = view._domrange.lastNode();                                                                  // 194\n    } else {                                                                                                      // 195\n      // on 'created' or 'destroyed' callbacks we don't have a DomRange                                           // 196\n      inst.firstNode = null;                                                                                      // 197\n      inst.lastNode = null;                                                                                       // 198\n    }                                                                                                             // 199\n                                                                                                                  // 200\n    return inst;                                                                                                  // 201\n  };                                                                                                              // 202\n                                                                                                                  // 203\n  this.view = view;                                                                                               // 204\n  view.__dynamicTemplate__ = this;                                                                                // 205\n  view.name = this.name;                                                                                          // 206\n  return view;                                                                                                    // 207\n};                                                                                                                // 208\n                                                                                                                  // 209\nDynamicTemplate.prototype.renderView = function (template) {                                                      // 210\n  var self = this;                                                                                                // 211\n                                                                                                                  // 212\n  // NOTE: When DynamicTemplate is used from a template inclusion helper                                          // 213\n  // like this {{> DynamicTemplate template=getTemplate data=getData}} the                                        // 214\n  // function below will rerun any time the getData function invalidates the                                      // 215\n  // argument data computation.                                                                                   // 216\n  var tmpl = null;                                                                                                // 217\n                                                                                                                  // 218\n  // is it a template name like \"MyTemplate\"?                                                                     // 219\n  if (typeof template === 'string') {                                                                             // 220\n    tmpl = Template[template];                                                                                    // 221\n                                                                                                                  // 222\n    if (!tmpl)                                                                                                    // 223\n      // as a fallback double check the user didn't actually define                                               // 224\n      // a camelCase version of the template.                                                                     // 225\n      tmpl = Template[camelCase(template)];                                                                       // 226\n                                                                                                                  // 227\n    if (!tmpl) {                                                                                                  // 228\n      tmpl = Blaze.With({                                                                                         // 229\n        msg: \"Couldn't find a template named \" + JSON.stringify(template) + \" or \" + JSON.stringify(camelCase(template))+ \". Are you sure you defined it?\"\n      }, function () {                                                                                            // 231\n        return Template.__DynamicTemplateError__;                                                                 // 232\n      });                                                                                                         // 233\n    }                                                                                                             // 234\n  } else if (typeOf(template) === '[object Object]') {                                                            // 235\n    // or maybe a view already?                                                                                   // 236\n    tmpl = template;                                                                                              // 237\n  } else if (typeof self._content !== 'undefined') {                                                              // 238\n    // or maybe its block content like                                                                            // 239\n    // {{#DynamicTemplate}}                                                                                       // 240\n    //  Some block                                                                                                // 241\n    // {{/DynamicTemplate}}                                                                                       // 242\n    tmpl = self._content;                                                                                         // 243\n  }                                                                                                               // 244\n                                                                                                                  // 245\n  return tmpl;                                                                                                    // 246\n};                                                                                                                // 247\n                                                                                                                  // 248\n/**                                                                                                               // 249\n * Destroy the dynamic template, also destroying the view if it exists.                                           // 250\n */                                                                                                               // 251\nDynamicTemplate.prototype.destroy = function () {                                                                 // 252\n  if (this.isCreated) {                                                                                           // 253\n    Blaze.remove(this.view);                                                                                      // 254\n    this.view = null;                                                                                             // 255\n    this.isDestroyed = true;                                                                                      // 256\n    this.isCreated = false;                                                                                       // 257\n  }                                                                                                               // 258\n};                                                                                                                // 259\n                                                                                                                  // 260\n/**                                                                                                               // 261\n * View lifecycle hooks.                                                                                          // 262\n */                                                                                                               // 263\n_.each(['onViewCreated', 'onViewReady', '_onViewRendered', 'onViewDestroyed'], function (hook) {                  // 264\n  DynamicTemplate.prototype[hook] = function (cb) {                                                               // 265\n    var hooks = this._hooks[hook] = this._hooks[hook] || [];                                                      // 266\n    hooks.push(cb);                                                                                               // 267\n    return this;                                                                                                  // 268\n  };                                                                                                              // 269\n});                                                                                                               // 270\n                                                                                                                  // 271\nDynamicTemplate.prototype._runHooks = function (name, view) {                                                     // 272\n  var hooks = this._hooks[name] || [];                                                                            // 273\n  var hook;                                                                                                       // 274\n                                                                                                                  // 275\n  for (var i = 0; i < hooks.length; i++) {                                                                        // 276\n    hook = hooks[i];                                                                                              // 277\n    // keep the \"thisArg\" pointing to the view, but make the first parameter to                                   // 278\n    // the callback teh dynamic template instance.                                                                // 279\n    hook.call(view, this);                                                                                        // 280\n  }                                                                                                               // 281\n};                                                                                                                // 282\n                                                                                                                  // 283\nDynamicTemplate.prototype.events = function (eventMap, thisInHandler) {                                           // 284\n  var self = this;                                                                                                // 285\n                                                                                                                  // 286\n  this._detachEvents();                                                                                           // 287\n  this._eventThisArg = thisInHandler;                                                                             // 288\n                                                                                                                  // 289\n  var boundMap = this._eventMap = {};                                                                             // 290\n                                                                                                                  // 291\n  for (var key in eventMap) {                                                                                     // 292\n    boundMap[key] = (function (key, handler) {                                                                    // 293\n      return function (e) {                                                                                       // 294\n        var data = Blaze.getData(e.currentTarget);                                                                // 295\n        if (data == null) data = {};                                                                              // 296\n        var tmplInstance = self.view.templateInstance();                                                          // 297\n        return handler.call(thisInHandler || this, e, tmplInstance, data);                                        // 298\n      }                                                                                                           // 299\n    })(key, eventMap[key]);                                                                                       // 300\n  }                                                                                                               // 301\n                                                                                                                  // 302\n  this._attachEvents();                                                                                           // 303\n};                                                                                                                // 304\n                                                                                                                  // 305\nDynamicTemplate.prototype._attachEvents = function () {                                                           // 306\n  var self = this;                                                                                                // 307\n  var thisArg = self._eventThisArg;                                                                               // 308\n  var boundMap = self._eventMap;                                                                                  // 309\n  var view = self.view;                                                                                           // 310\n  var handles = self._eventHandles;                                                                               // 311\n                                                                                                                  // 312\n  if (!view)                                                                                                      // 313\n    return;                                                                                                       // 314\n                                                                                                                  // 315\n  var domrange = view._domrange;                                                                                  // 316\n                                                                                                                  // 317\n  if (!domrange)                                                                                                  // 318\n    throw new Error(\"no domrange\");                                                                               // 319\n                                                                                                                  // 320\n  var attach = function (range, element) {                                                                        // 321\n    _.each(boundMap, function (handler, spec) {                                                                   // 322\n      var clauses = spec.split(/,\\s+/);                                                                           // 323\n      // iterate over clauses of spec, e.g. ['click .foo', 'click .bar']                                          // 324\n      _.each(clauses, function (clause) {                                                                         // 325\n        var parts = clause.split(/\\s+/);                                                                          // 326\n        if (parts.length === 0)                                                                                   // 327\n          return;                                                                                                 // 328\n                                                                                                                  // 329\n        var newEvents = parts.shift();                                                                            // 330\n        var selector = parts.join(' ');                                                                           // 331\n        handles.push(Blaze._EventSupport.listen(                                                                  // 332\n          element, newEvents, selector,                                                                           // 333\n          function (evt) {                                                                                        // 334\n            if (! range.containsElement(evt.currentTarget))                                                       // 335\n              return null;                                                                                        // 336\n            var handlerThis = self._eventThisArg || this;                                                         // 337\n            var handlerArgs = arguments;                                                                          // 338\n            //XXX which view should this be? What if the event happened                                           // 339\n            //somwhere down the hierarchy?                                                                        // 340\n            return Blaze._withCurrentView(view, function () {                                                     // 341\n              return handler.apply(handlerThis, handlerArgs);                                                     // 342\n            });                                                                                                   // 343\n          },                                                                                                      // 344\n          range, function (r) {                                                                                   // 345\n            return r.parentRange;                                                                                 // 346\n          }));                                                                                                    // 347\n      });                                                                                                         // 348\n    });                                                                                                           // 349\n  };                                                                                                              // 350\n                                                                                                                  // 351\n  if (domrange.attached)                                                                                          // 352\n    attach(domrange, domrange.parentElement);                                                                     // 353\n  else                                                                                                            // 354\n    domrange.onAttached(attach);                                                                                  // 355\n};                                                                                                                // 356\n                                                                                                                  // 357\nDynamicTemplate.prototype._detachEvents = function () {                                                           // 358\n  _.each(this._eventHandles, function (h) { h.stop(); });                                                         // 359\n  this._eventHandles = [];                                                                                        // 360\n};                                                                                                                // 361\n                                                                                                                  // 362\nvar attachEventMaps = function (range, element, eventMap, thisInHandler) {                                        // 363\n  _.each(eventMap, function (handler, spec) {                                                                     // 364\n    var clauses = spec.split(/,\\s+/);                                                                             // 365\n    // iterate over clauses of spec, e.g. ['click .foo', 'click .bar']                                            // 366\n    _.each(clauses, function (clause) {                                                                           // 367\n      var parts = clause.split(/\\s+/);                                                                            // 368\n      if (parts.length === 0)                                                                                     // 369\n        return;                                                                                                   // 370\n                                                                                                                  // 371\n      var newEvents = parts.shift();                                                                              // 372\n      var selector = parts.join(' ');                                                                             // 373\n      handles.push(Blaze._EventSupport.listen(                                                                    // 374\n        element, newEvents, selector,                                                                             // 375\n        function (evt) {                                                                                          // 376\n          if (! range.containsElement(evt.currentTarget))                                                         // 377\n            return null;                                                                                          // 378\n          var handlerThis = thisInHandler || this;                                                                // 379\n          var handlerArgs = arguments;                                                                            // 380\n          return Blaze._withCurrentView(view, function () {                                                       // 381\n            return handler.apply(handlerThis, handlerArgs);                                                       // 382\n          });                                                                                                     // 383\n        },                                                                                                        // 384\n        range, function (r) {                                                                                     // 385\n          return r.parentRange;                                                                                   // 386\n        }));                                                                                                      // 387\n    });                                                                                                           // 388\n  });                                                                                                             // 389\n};                                                                                                                // 390\n                                                                                                                  // 391\n/**                                                                                                               // 392\n * Insert the Layout view into the dom.                                                                           // 393\n */                                                                                                               // 394\nDynamicTemplate.prototype.insert = function (options) {                                                           // 395\n  options = options || {};                                                                                        // 396\n                                                                                                                  // 397\n  if (this.isInserted)                                                                                            // 398\n    return;                                                                                                       // 399\n  this.isInserted = true;                                                                                         // 400\n                                                                                                                  // 401\n  var el = options.el || document.body;                                                                           // 402\n  var $el = $(el);                                                                                                // 403\n                                                                                                                  // 404\n  if ($el.length === 0)                                                                                           // 405\n    throw new Error(\"No element to insert layout into. Is your element defined? Try a Meteor.startup callback.\");\n                                                                                                                  // 407\n  if (!this.view)                                                                                                 // 408\n    this.create(options);                                                                                         // 409\n                                                                                                                  // 410\n  Blaze.render(this.view, $el[0], options.nextNode, options.parentView);                                          // 411\n                                                                                                                  // 412\n  return this;                                                                                                    // 413\n};                                                                                                                // 414\n                                                                                                                  // 415\n/**                                                                                                               // 416\n * Reactively return the value of the current lookup host or null if there                                        // 417\n * is no lookup host.                                                                                             // 418\n */                                                                                                               // 419\nDynamicTemplate.prototype._getLookupHost = function () {                                                          // 420\n  // XXX this is called from the Blaze overrides so we can't create a dep                                         // 421\n  // here for every single lookup. Will revisit.                                                                  // 422\n  //this._lookupHostDep.depend();                                                                                 // 423\n  return this._lookupHostValue;                                                                                   // 424\n};                                                                                                                // 425\n                                                                                                                  // 426\n/**                                                                                                               // 427\n * Set the reactive value of the lookup host.                                                                     // 428\n *                                                                                                                // 429\n */                                                                                                               // 430\nDynamicTemplate.prototype._setLookupHost = function (host) {                                                      // 431\n  var self = this;                                                                                                // 432\n                                                                                                                  // 433\n  if (self._lookupHostValue !== host) {                                                                           // 434\n    self._lookupHostValue = host;                                                                                 // 435\n    Deps.afterFlush(function () {                                                                                 // 436\n      // if the lookup host changes and the template also changes                                                 // 437\n      // before the next flush cycle, this gives the new template                                                 // 438\n      // a chance to render, and the old template to be torn off                                                  // 439\n      // the page (including stopping its computation) before the                                                 // 440\n      // lookupHostDep is changed.                                                                                // 441\n      self._lookupHostDep.changed();                                                                              // 442\n    });                                                                                                           // 443\n  }                                                                                                               // 444\n                                                                                                                  // 445\n  return this;                                                                                                    // 446\n};                                                                                                                // 447\n                                                                                                                  // 448\n/*****************************************************************************/                                   // 449\n/* DynamicTemplate Static Methods */                                                                              // 450\n/*****************************************************************************/                                   // 451\n                                                                                                                  // 452\n/**                                                                                                               // 453\n * Get the first parent data context that are not inclusion arguments                                             // 454\n * (see above function). Note: This function can create reactive dependencies.                                    // 455\n */                                                                                                               // 456\nDynamicTemplate.getParentDataContext = function (view) {                                                          // 457\n  return DynamicTemplate.getDataContext(view && view.parentView);                                                 // 458\n};                                                                                                                // 459\n                                                                                                                  // 460\n/**                                                                                                               // 461\n * Get the first data context that is not inclusion arguments.                                                    // 462\n */                                                                                                               // 463\nDynamicTemplate.getDataContext = function (view) {                                                                // 464\n  while (view) {                                                                                                  // 465\n    if (view.name === 'with' && !view.__isTemplateWith)                                                           // 466\n      return view.dataVar.get();                                                                                  // 467\n    else                                                                                                          // 468\n      view = view.parentView;                                                                                     // 469\n  }                                                                                                               // 470\n                                                                                                                  // 471\n  return null;                                                                                                    // 472\n};                                                                                                                // 473\n                                                                                                                  // 474\n/**                                                                                                               // 475\n * Get inclusion arguments, if any, from a view.                                                                  // 476\n *                                                                                                                // 477\n * Uses the __isTemplateWith property set when a parent view is used                                              // 478\n * specificially for a data context with inclusion args.                                                          // 479\n *                                                                                                                // 480\n * Inclusion arguments are arguments provided in a template like this:                                            // 481\n * {{> yield \"inclusionArg\"}}                                                                                     // 482\n * or                                                                                                             // 483\n * {{> yield region=\"inclusionArgValue\"}}                                                                         // 484\n */                                                                                                               // 485\nDynamicTemplate.getInclusionArguments = function (view) {                                                         // 486\n  var parent = view && view.parentView;                                                                           // 487\n                                                                                                                  // 488\n  if (!parent)                                                                                                    // 489\n    return null;                                                                                                  // 490\n                                                                                                                  // 491\n  if (parent.__isTemplateWith)                                                                                    // 492\n    return parent.dataVar.get();                                                                                  // 493\n                                                                                                                  // 494\n  return null;                                                                                                    // 495\n};                                                                                                                // 496\n                                                                                                                  // 497\n/**                                                                                                               // 498\n * Given a view, return a function that can be used to access argument values at                                  // 499\n * the time the view was rendered. There are two key benefits:                                                    // 500\n *                                                                                                                // 501\n * 1. Save the argument data at the time of rendering. When you use lookup(...)                                   // 502\n *    it starts from the current data context which can change.                                                   // 503\n * 2. Defer creating a dependency on inclusion arguments until later.                                             // 504\n *                                                                                                                // 505\n * Example:                                                                                                       // 506\n *                                                                                                                // 507\n *   {{> MyTemplate template=\"MyTemplate\"                                                                         // 508\n *   var args = DynamicTemplate.args(view);                                                                       // 509\n *   var tmplValue = args('template');                                                                            // 510\n *     => \"MyTemplate\"                                                                                            // 511\n */                                                                                                               // 512\nDynamicTemplate.args = function (view) {                                                                          // 513\n  return function (key) {                                                                                         // 514\n    var data = DynamicTemplate.getInclusionArguments(view);                                                       // 515\n                                                                                                                  // 516\n    if (data) {                                                                                                   // 517\n      if (key)                                                                                                    // 518\n        return data[key];                                                                                         // 519\n      else                                                                                                        // 520\n        return data;                                                                                              // 521\n    }                                                                                                             // 522\n                                                                                                                  // 523\n    return null;                                                                                                  // 524\n  };                                                                                                              // 525\n};                                                                                                                // 526\n                                                                                                                  // 527\n/**                                                                                                               // 528\n * Inherit from DynamicTemplate.                                                                                  // 529\n */                                                                                                               // 530\nDynamicTemplate.extend = function (props) {                                                                       // 531\n  return Iron.utils.extend(this, props);                                                                          // 532\n};                                                                                                                // 533\n                                                                                                                  // 534\nDynamicTemplate.findFirstLookupHost = function (view) {                                                           // 535\n  var host;                                                                                                       // 536\n  var helper;                                                                                                     // 537\n  assert(view instanceof Blaze.View, \"view must be a Blaze.View\");                                                // 538\n  while (view) {                                                                                                  // 539\n    if (view.__dynamicTemplate__) {                                                                               // 540\n      // creates a reactive dependency.                                                                           // 541\n      var host = view.__dynamicTemplate__._getLookupHost();                                                       // 542\n      if (host) return host;                                                                                      // 543\n    } else {                                                                                                      // 544\n      view = view.parentView;                                                                                     // 545\n    }                                                                                                             // 546\n  }                                                                                                               // 547\n                                                                                                                  // 548\n  return undefined;                                                                                               // 549\n};                                                                                                                // 550\n                                                                                                                  // 551\nDynamicTemplate.findLookupHostWithProperty = function (view, key) {                                               // 552\n  var host;                                                                                                       // 553\n  var prop;                                                                                                       // 554\n  assert(view instanceof Blaze.View, \"view must be a Blaze.View\");                                                // 555\n  while (view) {                                                                                                  // 556\n    if (view.__dynamicTemplate__) {                                                                               // 557\n                                                                                                                  // 558\n      // creates a reactive dependency                                                                            // 559\n      var host = view.__dynamicTemplate__._getLookupHost();                                                       // 560\n                                                                                                                  // 561\n      if (host && get(host, key)) {                                                                               // 562\n        return host;                                                                                              // 563\n      }                                                                                                           // 564\n    }                                                                                                             // 565\n                                                                                                                  // 566\n    view = view.parentView;                                                                                       // 567\n  }                                                                                                               // 568\n                                                                                                                  // 569\n  return undefined;                                                                                               // 570\n};                                                                                                                // 571\n                                                                                                                  // 572\n/**                                                                                                               // 573\n * Find a lookup host that has a given helper and returns the host. Note,                                         // 574\n * this will create a reactive dependency on each dynamic template's getLookupHost                                // 575\n * function. This is required becuase we need to rerun the entire lookup if                                       // 576\n * the host changes or is added or removed later, anywhere in the chain.                                          // 577\n */                                                                                                               // 578\nDynamicTemplate.findLookupHostWithHelper = function (view, helperKey) {                                           // 579\n  var host;                                                                                                       // 580\n  var helper;                                                                                                     // 581\n  assert(view instanceof Blaze.View, \"view must be a Blaze.View\");                                                // 582\n  while (view) {                                                                                                  // 583\n    if (view.__dynamicTemplate__) {                                                                               // 584\n      // creates a reactive dependency                                                                            // 585\n      var host = view.__dynamicTemplate__._getLookupHost();                                                       // 586\n      if (host && get(host, 'constructor', '_helpers', helperKey)) {                                              // 587\n        return host;                                                                                              // 588\n      }                                                                                                           // 589\n    }                                                                                                             // 590\n                                                                                                                  // 591\n    view = view.parentView;                                                                                       // 592\n  }                                                                                                               // 593\n                                                                                                                  // 594\n  return undefined;                                                                                               // 595\n};                                                                                                                // 596\n                                                                                                                  // 597\n/*****************************************************************************/                                   // 598\n/* UI Helpers */                                                                                                  // 599\n/*****************************************************************************/                                   // 600\nif (typeof Template !== 'undefined') {                                                                            // 601\n  UI.registerHelper('DynamicTemplate', new Template('DynamicTemplateHelper', function () {                        // 602\n    var args = DynamicTemplate.args(this);                                                                        // 603\n                                                                                                                  // 604\n    return new DynamicTemplate({                                                                                  // 605\n      data: function () { return args('data'); },                                                                 // 606\n      template: function () { return args('template'); },                                                         // 607\n      content: this.templateContentBlock                                                                          // 608\n    }).create();                                                                                                  // 609\n  }));                                                                                                            // 610\n}                                                                                                                 // 611\n                                                                                                                  // 612\n/*****************************************************************************/                                   // 613\n/* Namespacing */                                                                                                 // 614\n/*****************************************************************************/                                   // 615\nIron.DynamicTemplate = DynamicTemplate;                                                                           // 616\n                                                                                                                  // 617\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/iron_dynamic-template/blaze_overrides.js                                                              //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\n/*****************************************************************************/                                   // 1\n/* Imports */                                                                                                     // 2\n/*****************************************************************************/                                   // 3\nvar assert = Iron.utils.assert;                                                                                   // 4\nvar get = Iron.utils.get;                                                                                         // 5\n                                                                                                                  // 6\n/*****************************************************************************/                                   // 7\n/* Blaze Overrides */                                                                                             // 8\n/*****************************************************************************/                                   // 9\n/**                                                                                                               // 10\n * Adds ability to inject lookup hosts into views that can participate in                                         // 11\n * property lookup. For example, iron:controller or iron:component could make                                     // 12\n * use of this to add methods into the lookup chain. If the property is found,                                    // 13\n * a function is returned that either returns the property value or the result                                    // 14\n * of calling the function (bound to the __lookupHost__).                                                         // 15\n */                                                                                                               // 16\nvar origLookup = Blaze.View.prototype.lookup;                                                                     // 17\nBlaze.View.prototype.lookup = function (name /*, args */) {                                                       // 18\n  var host;                                                                                                       // 19\n                                                                                                                  // 20\n  host = DynamicTemplate.findLookupHostWithHelper(Blaze.getView(), name);                                         // 21\n                                                                                                                  // 22\n  if (host) {                                                                                                     // 23\n    return function callLookupHostHelper (/* args */) {                                                           // 24\n      var helper = get(host, 'constructor', '_helpers', name);                                                    // 25\n      var args = [].slice.call(arguments);                                                                        // 26\n      return (typeof helper === 'function') ? helper.apply(host, args) : helper;                                  // 27\n    }                                                                                                             // 28\n  } else {                                                                                                        // 29\n    return origLookup.apply(this, arguments);                                                                     // 30\n  }                                                                                                               // 31\n};                                                                                                                // 32\n                                                                                                                  // 33\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['iron:dynamic-template'] = {};\n\n})();\n","servePath":"/packages/iron_dynamic-template.js"}]