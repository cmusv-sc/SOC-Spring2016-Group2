{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/mdg:validation-error/validation-error.js","filenameRelative":"/packages/mdg:validation-error/validation-error.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/mdg:validation-error/validation-error.js.map","sourceFileName":"/packages/mdg:validation-error/validation-error.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"validation-error"},"ignored":false,"code":"var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/* global ValidationError:true */\n/* global SimpleSchema */\n\n// This is exactly what comes out of SS.\nvar errorSchema = new SimpleSchema({\n  name: { type: String },\n  type: { type: String },\n  details: { type: Object, blackbox: true, optional: true }\n});\n\nvar errorsSchema = new SimpleSchema({\n  errors: { type: Array },\n  'errors.$': { type: errorSchema }\n});\n\nValidationError = function (_Meteor$Error) {\n  (0, _inherits3['default'])(_class, _Meteor$Error);\n\n  function _class(errors) {\n    var message = arguments.length <= 1 || arguments[1] === undefined ? 'Validation Failed' : arguments[1];\n    (0, _classCallCheck3['default'])(this, _class);\n\n    errorsSchema.validate({ errors: errors });\n\n    var _this = (0, _possibleConstructorReturn3['default'])(this, _Meteor$Error.call(this, ValidationError.ERROR_CODE, message, errors));\n\n    _this.errors = errors;\n    return _this;\n  }\n\n  return _class;\n}(Meteor.Error);\n\n// If people use this to check for the error code, we can change it\n// in future versions\nValidationError.ERROR_CODE = 'validation-error';","ast":null,"map":{"version":3,"sources":["/packages/mdg:validation-error/validation-error.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAIA,IAAM,cAAc,IAAI,YAAJ,CAAiB;AACnC,QAAM,EAAC,MAAM,MAAN,EAAP;AACA,QAAM,EAAC,MAAM,MAAN,EAAP;AACA,WAAS,EAAC,MAAM,MAAN,EAAc,UAAU,IAAV,EAAgB,UAAU,IAAV,EAAxC;CAHkB,CAAd;;AAMN,IAAM,eAAe,IAAI,YAAJ,CAAiB;AACpC,UAAQ,EAAC,MAAM,KAAN,EAAT;AACA,cAAY,EAAC,MAAM,WAAN,EAAb;CAFmB,CAAf;;AAKN;;;AACE,kBAAY,MAAZ,EAAmD;QAA/B,gEAAU,mCAAqB;;;AACjD,iBAAa,QAAb,CAAsB,EAAC,cAAD,EAAtB,EADiD;;kEAGjD,yBAAM,gBAAgB,UAAhB,EAA4B,OAAlC,EAA2C,MAA3C,GAHiD;;AAKjD,UAAK,MAAL,GAAc,MAAd,CALiD;;GAAnD;;;EAD8B,OAAO,KAAP,CAAhC;;;;AAYA,gBAAgB,UAAhB,GAA6B,kBAA7B","file":"/packages/mdg:validation-error/validation-error.js.map","sourcesContent":["/* global ValidationError:true */\n/* global SimpleSchema */\n\n// This is exactly what comes out of SS.\nconst errorSchema = new SimpleSchema({\n  name: {type: String},\n  type: {type: String},\n  details: {type: Object, blackbox: true, optional: true}\n});\n\nconst errorsSchema = new SimpleSchema({\n  errors: {type: Array},\n  'errors.$': {type: errorSchema}\n});\n\nValidationError = class extends Meteor.Error {\n  constructor(errors, message = 'Validation Failed') {\n    errorsSchema.validate({errors});\n\n    super(ValidationError.ERROR_CODE, message, errors);\n\n    this.errors = errors;\n  }\n};\n\n// If people use this to check for the error code, we can change it\n// in future versions\nValidationError.ERROR_CODE = 'validation-error';\n"]},"hash":"0d2803b65bb05cf205ee9084470af44611a10acb"}
